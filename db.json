{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/baidu_verify_ipXkAyKOZh.html","hash":"0b3140b94a81aa317aacd36402c817cad644ef6e","modified":1501413268197},{"_id":"themes/BlueLake/_config.yml","hash":"82682a44090cdd61e8c5d084616e09d0a7fe5fa2","modified":1501770084158},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1501400744179},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1501400744153},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1501400744153},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1501400744152},{"_id":"source/_posts/BlueLake博客主题的详细配置.md","hash":"0a2ed6eff509310d0dd95d002a1729110ca91159","modified":1501399307829},{"_id":"source/_posts/Hexo3-2-github搭建静态博客.md","hash":"a28219965a03df312ea5bb3a7e37321f153c27b0","modified":1501399307831},{"_id":"source/_posts/Hexo博客优化--主题、分享、评论、微博秀.md","hash":"0e017f7bab95de86eff8e0b5d6f4ab8de301d5c6","modified":1501399307841},{"_id":"source/_posts/Hexo博客优化--库、字体、收录、统计.md","hash":"434c0bbac2ff110c75236ce7496d457001bb44fe","modified":1501399307841},{"_id":"source/_posts/Hexo博客优化--站内搜索、版权、IE8兼容.md","hash":"da880b2fc551bbad9415c02cafaf5f62939fc234","modified":1501399307842},{"_id":"source/_posts/Linq-js使用笔记.md","hash":"941cc304f6cd01899378b6d0e1b62bf285e4dd02","modified":1501399307842},{"_id":"source/_posts/MongoDB学习笔记(1).md","hash":"55d08fdc46b0e2c106fcfb5ea4954cf5625ba1f8","modified":1501399307843},{"_id":"source/_posts/MongoDB学习笔记(2).md","hash":"2aba67f06509cc9ab00bb3d7f90d1538f89b2a70","modified":1501399307843},{"_id":"source/_posts/Node.js Buffer.md","hash":"52b9bb67efa75f2823e03c0be641715f94dae3ed","modified":1501399307843},{"_id":"source/_posts/Node.js EventEmitter类.md","hash":"ac7ef7418a872cfbd67a440d58e0c1762075241c","modified":1501399307844},{"_id":"source/_posts/Node.js Express 框架.md","hash":"3e98454dc61e7ac8cf8462a85c39b4a74754e217","modified":1501399307844},{"_id":"source/_posts/Node.js GET POST请求.md","hash":"f9a15200cf9470f421af64cb839221ec28108798","modified":1501399307844},{"_id":"source/_posts/Node.js JXcore打包.md","hash":"9e3d011c382392a7d82c06b4fbd15e8e79c7bbfd","modified":1501399307845},{"_id":"source/_posts/Node.js RESTful API.md","hash":"34b1e26ed82f13b249de14ce2e7a8db26d57c113","modified":1501399307845},{"_id":"source/_posts/Node.js Stream流.md","hash":"c38d0d15b27b4aa2b09b56f46a11a5974648eab5","modified":1501399307846},{"_id":"source/_posts/Node.js Web模块.md","hash":"c86397fd38cf8eb6e13d1fccb31eaffd0fee53cb","modified":1501399307846},{"_id":"source/_posts/Node.js 事件循环.md","hash":"180a89b3280a2966a0c4d097b0bbd5db3b592146","modified":1501399307846},{"_id":"source/_posts/Node.js 全局对象.md","hash":"10a96669d9ce7d22c2208c671a44c37d4cb5ad99","modified":1501399307847},{"_id":"source/_posts/Node.js 多进程.md","hash":"af216e4173f7e6991d8d8430865dab120587de01","modified":1501399307847},{"_id":"source/_posts/Node.js 工具模块.md","hash":"5a7d22d492898a54ab2a677af547669e32983094","modified":1501399307848},{"_id":"source/_posts/Node.js 常用工具.md","hash":"7d21159706f73cfafce459585ebda3493e1104f2","modified":1501399307848},{"_id":"source/_posts/Node.js 文件系统.md","hash":"d100eae2617a36c599fb4d0fd9f5bd8d66c73154","modified":1501399307849},{"_id":"source/_posts/Node.js 路由.md","hash":"cd1e935ea9c67efa092ad0a2246cd91aaafc9afe","modified":1501399307850},{"_id":"source/_posts/Node.js函数.md","hash":"66392517868ef79847b97070250a2b7c66c6c3fb","modified":1501399307850},{"_id":"source/_posts/Node.js创建第一个应用.md","hash":"00fe2b374f61278d9fb7a3fb52d2101f1a1eed2f","modified":1501399307851},{"_id":"source/_posts/Node.js模块系统.md","hash":"d74ca3a9c9b9488306636686b828df14e91f3b58","modified":1501399307851},{"_id":"source/_posts/Web包管理器-Bower.md","hash":"e9c8856e265099f694ce39e238a24fd43a15a060","modified":1501399307852},{"_id":"source/_posts/github博客迁移.md","hash":"5805085d46ee9b324cf6c9322fc4a17020281003","modified":1501399307852},{"_id":"source/_posts/sublime-text3个人习惯配置-C.md","hash":"13edc0a35b98e94488c0890ba20ba760d80486b8","modified":1501399307853},{"_id":"source/_posts/自定义HEXO站内搜索Javascript-json.md","hash":"32c6d57a638937519036e050ae87ab3e535f1817","modified":1501399307854},{"_id":"source/about/index.md","hash":"be27dfb46a90ac804a80fbea57d879e9d10ab334","modified":1501399307855},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501400744110},{"_id":"themes/BlueLake/.git/config","hash":"05165d804714e9c1a0e5d4a99a95a77f34d4fac6","modified":1501400744114},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501400732249},{"_id":"themes/BlueLake/.git/index","hash":"6528dc80479b854f5c752f7f50043ee17387cbf7","modified":1501406520210},{"_id":"themes/BlueLake/.git/packed-refs","hash":"e119a861e23c1745c1123f408c1f5e5dc01b187a","modified":1501400744106},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1501400744157},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1501400744158},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1501400744158},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1501400744158},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1501400744159},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1501400744159},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1501400744159},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1501400744160},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1501400744171},{"_id":"themes/BlueLake/layout/base.jade","hash":"0f0291077c4ab6d8fd8450744137e83be21fc639","modified":1501400744171},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1501400744177},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1501400744178},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1501400744178},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1501400744178},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1501400744179},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1501400744181},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1501400744179},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501400732265},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501400732284},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501400732285},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501400732286},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501400732287},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501400732280},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501400732288},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501400732289},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"f2764d6c3e2469fb6f32282959f18f3586bc1d45","modified":1501400744111},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501400732288},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501400732287},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501400732287},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1501400744163},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1501400744163},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1501400744162},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1501400744164},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1501400744164},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1501400744165},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1501400744165},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1501400744166},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1501400744164},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1501400744166},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1501400744166},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1501400744167},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1501400744167},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1501400744167},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1501400744168},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1501400744168},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1501400744168},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"bfde6890d26939917dfc28281567e5b9d5d7a2d8","modified":1501424322833},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1501400744163},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1501400744166},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1501400744164},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1501400744180},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1501400744182},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1501400744183},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1501400744183},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1501400744187},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1501400744187},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1501400744188},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1501400744182},{"_id":"themes/BlueLake/.git/objects/pack/pack-fe278fdb1eaf40f3d4d0e92d5e7ff93b4eaef23c.idx","hash":"ce0083ab99391be2adde1ad73a30441821a8dbdb","modified":1501400743950},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"341dc69eb1d9efe1ef91307d9bb8c922b9cbfa04","modified":1501400744111},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1501400744181},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1501400744184},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"f2764d6c3e2469fb6f32282959f18f3586bc1d45","modified":1501400744112},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501400744109},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"f2764d6c3e2469fb6f32282959f18f3586bc1d45","modified":1501400744109},{"_id":"themes/BlueLake/.git/objects/pack/pack-fe278fdb1eaf40f3d4d0e92d5e7ff93b4eaef23c.pack","hash":"72e8a372d062caf11165224369179fd109e23a4f","modified":1501400743951},{"_id":"public/baidusitemap.xml","hash":"12e3ff3f816f8dacc2dbf69c749951145fbc9d8e","modified":1501902548852},{"_id":"public/atom.xml","hash":"9003e0e9cccab8b90a0092177ce083c0d9996212","modified":1501902548880},{"_id":"public/content.json","hash":"05d0b7e65d6c31b23b82b768f1fd56ee9522050d","modified":1501902548881},{"_id":"public/sitemap.xml","hash":"620b53b9702c4d687a830159b8480eac83adbaab","modified":1501902548882},{"_id":"public/baidu_verify_ipXkAyKOZh.html","hash":"a27f8263b5cb5bfb44323a442c10bd35de354b2f","modified":1501902548911},{"_id":"public/about/index.html","hash":"a2f82e0c2d3cd4fe615e03cfc8b0352587dc5d2a","modified":1501902548911},{"_id":"public/2016/05/14/Linq-js使用笔记.html","hash":"c10b82f5030b4493bc96c3d4f38c43200686c35f","modified":1501902548911},{"_id":"public/archives/index.html","hash":"b921f735e3f9f5a5da48c08e33893ab904e27e9a","modified":1501902548911},{"_id":"public/archives/2016/index.html","hash":"b921f735e3f9f5a5da48c08e33893ab904e27e9a","modified":1501902548911},{"_id":"public/archives/2016/05/index.html","hash":"cd186a863db43752798a00823bf74e6a581658ee","modified":1501902548912},{"_id":"public/archives/2016/06/index.html","hash":"7e66881f3d0c420b8f3410d91f56ad0c25dc27ac","modified":1501902548912},{"_id":"public/archives/2016/07/index.html","hash":"bfaf9c7631d0e17b0691c65ba9aa44d110d6036f","modified":1501902548912},{"_id":"public/archives/2016/08/index.html","hash":"a9b3ec2a62aab8f211a7fedf3310c8105fad4ae9","modified":1501902548913},{"_id":"public/archives/2016/11/index.html","hash":"56474b0a2e16492592761b2ff9136c0c337a4dbd","modified":1501902548913},{"_id":"public/archives/2016/12/index.html","hash":"60fd870620431b9a0f7ed45ca7cc5acb19762b14","modified":1501902548913},{"_id":"public/categories/hexo博客折腾/index.html","hash":"58c83d3a3868bfebc8c83b7222f445baada83cfd","modified":1501902548913},{"_id":"public/categories/语言集成查询/index.html","hash":"5c37c55d5788d5b20587654d838b1848debf470d","modified":1501902548913},{"_id":"public/categories/数据库/index.html","hash":"f7fcbc8b6eadb81446f4b9489af3574fadbf3e72","modified":1501902548913},{"_id":"public/2016/12/29/BlueLake博客主题的详细配置.html","hash":"311d28f33fb7c248b209dc6b98910babcf6de74e","modified":1501902548913},{"_id":"public/2016/11/09/自定义HEXO站内搜索Javascript-json.html","hash":"dca4c6d9008d3061e67f6502ee4fc736169588db","modified":1501902548914},{"_id":"public/2016/08/17/github博客迁移.html","hash":"ee308b4282e20196e102f1fdf5420c9398fe06b2","modified":1501902548914},{"_id":"public/2016/08/12/Web包管理器-Bower.html","hash":"30faaf5bdc7464908fd4de980b74fd209f064c8d","modified":1501902548914},{"_id":"public/2016/07/30/MongoDB学习笔记(2).html","hash":"4a042deadddb2f20e078de7426c5afc638350882","modified":1501902548914},{"_id":"public/2016/07/29/MongoDB学习笔记(1).html","hash":"18520ab0cb9ccd01be823435d52bcc8bd6cb62e9","modified":1501902548914},{"_id":"public/2016/06/30/Node.js 多进程.html","hash":"51b2b0fe351c2eac11d8ebe4310a0c4fd2e9475f","modified":1501902548915},{"_id":"public/2016/06/30/Node.js RESTful API.html","hash":"d762b28d266200510e38f90c4114ac452423fe39","modified":1501902548915},{"_id":"public/2016/06/30/Node.js Express 框架.html","hash":"d6690f26e9b6cd6cbdbfb7e868721869998b64fd","modified":1501902548916},{"_id":"public/2016/06/29/Node.js Web模块.html","hash":"4a7039704e5e2e8288303a09a6184157f3c2292a","modified":1501902548916},{"_id":"public/2016/06/29/Node.js JXcore打包.html","hash":"ac5b5fa508b9682ee09db675d2686c06867e6dcd","modified":1501902548916},{"_id":"public/2016/06/29/Node.js 工具模块.html","hash":"bd1cf0a7bef7bcb2acab92940096cc9087eb03d6","modified":1501902548916},{"_id":"public/2016/06/29/Node.js GET POST请求.html","hash":"6bc3c3286aa8d7ae9a934593d265d82459ab6d64","modified":1501902548916},{"_id":"public/2016/06/29/Node.js 文件系统.html","hash":"bbb67df85e88ed34eb7560a4c41c1552ee6738a4","modified":1501902548917},{"_id":"public/2016/06/29/sublime-text3个人习惯配置-C.html","hash":"278498c7b261a8e49bb6476a723083a3b5019e02","modified":1501902548917},{"_id":"public/2016/06/29/Node.js 常用工具.html","hash":"a57d72f80a7b3d5311e0fa705eb1689759512918","modified":1501902548917},{"_id":"public/2016/06/28/Node.js 全局对象.html","hash":"3262c7c09e1e93129e12e36b8c9d6d72fa37232c","modified":1501902548917},{"_id":"public/2016/06/28/Node.js 路由.html","hash":"87bc84b868cd1902c043f548f0553d55c513f396","modified":1501902548917},{"_id":"public/2016/06/28/Node.js函数.html","hash":"85cd69f22c7133b5bd44e7b83afff83e2ca5cf76","modified":1501902548917},{"_id":"public/2016/06/28/Node.js模块系统.html","hash":"79c0ae7417c2a61778fe81eeec9a2ab9989335e4","modified":1501902548917},{"_id":"public/2016/06/28/Node.js Stream流.html","hash":"936d25f4335b7c7c80402c9098262cfcb9ab62a6","modified":1501902548918},{"_id":"public/2016/06/27/Node.js Buffer.html","hash":"6886c00929d02e8f3ab752d0486bf2b83d8a727f","modified":1501902548918},{"_id":"public/2016/06/27/Node.js EventEmitter类.html","hash":"ffcd64c552a15001813fd48ad4351af890ef774b","modified":1501902548918},{"_id":"public/2016/06/27/Node.js 事件循环.html","hash":"1eb5c448ef213d7ddcd6e62c1bfa3469019cba18","modified":1501902548918},{"_id":"public/2016/06/27/Node.js创建第一个应用.html","hash":"3dffe03c72c73bddeebdacd90bc36f851be4b9c3","modified":1501902548918},{"_id":"public/2016/05/25/Hexo博客优化--站内搜索、版权、IE8兼容.html","hash":"686df00dc7118f2e94fb328f2e4135b7ff92534d","modified":1501902548918},{"_id":"public/2016/05/24/Hexo博客优化--库、字体、收录、统计.html","hash":"68dc39a6d47a4a31b9b4c6f29fc9438318688738","modified":1501902548918},{"_id":"public/2016/05/23/Hexo博客优化--主题、分享、评论、微博秀.html","hash":"8b25f254b1f187421e3cebdbfc3abc5298bd9180","modified":1501902548918},{"_id":"public/2016/05/23/Hexo3-2-github搭建静态博客.html","hash":"f5aa0933fe65be83ce07f50573d45decd1393c21","modified":1501902548918},{"_id":"public/categories/nodeJS学习笔记/index.html","hash":"747b6adecd094da5aeb9e5d8c0b1dbfbadc2a91e","modified":1501902549348},{"_id":"public/page/4/index.html","hash":"91a49a9647d1cd09efe244d3c3f5557a18ea52e8","modified":1501902549348},{"_id":"public/tags/hexo/index.html","hash":"d10579c837539eece44bdf41c5128fa31db4f8bd","modified":1501902549349},{"_id":"public/tags/BlueLake/index.html","hash":"4d27b52e73fb945c13d9bceac5b4a97217e968e4","modified":1501902549349},{"_id":"public/tags/javascript/index.html","hash":"850ecae8ca5cdc877df4936537c725792ba7a451","modified":1501902549349},{"_id":"public/tags/linq/index.html","hash":"9f35fa89d0ffad381432e7ce7d2cd78997ae3f5d","modified":1501902549349},{"_id":"public/tags/语言集成查询/index.html","hash":"ae5216902418356bcdedbaebd34f3b1d69c6006a","modified":1501902549349},{"_id":"public/tags/mongodb/index.html","hash":"836587deab33c62731d960082ca77e454d7fad28","modified":1501902549349},{"_id":"public/tags/node/index.html","hash":"39e510d0f664732fb7a8b3b825c49ec6c34674ff","modified":1501902549349},{"_id":"public/tags/bower/index.html","hash":"55a60b2014c52ea09eea38ee80e501e5843303bf","modified":1501902549349},{"_id":"public/tags/github/index.html","hash":"27fa24ab68180703ddf95d9fbb76a9dfc62f4f89","modified":1501902549349},{"_id":"public/tags/sublime/index.html","hash":"9cbd357d67b03c6aa70f8fa2fdeddaa69a217d77","modified":1501902549350},{"_id":"public/categories/nodeJS学习笔记/page/2/index.html","hash":"4bb798222c5334ce955d9fad222f47394895e95f","modified":1501902549350},{"_id":"public/categories/前端工具/index.html","hash":"b5a5f67c4511206405bb21efe568e7de78d4b348","modified":1501902549350},{"_id":"public/index.html","hash":"76c5eff700d17ce3b6d05e6b0cea50fceba1bda0","modified":1501902549350},{"_id":"public/page/2/index.html","hash":"4adecdec42102fa723e2f48fdb7ad9d4c7df8ca7","modified":1501902549350},{"_id":"public/page/3/index.html","hash":"e1a23a2e92f92fd948ebfdc4d08e498a35de1695","modified":1501902549350},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1501902549350},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1501902549350},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1501902549350},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1501902549351},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1501902549351},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1501902549351},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1501902551500},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1501902551511},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1501902551511},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1501902551511},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1501902551511},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1501902551511}],"Category":[{"name":"hexo博客折腾","_id":"cj5ypzvrf0004v0ui4oclwcak"},{"name":"语言集成查询","_id":"cj5ypzvsz000nv0uip4fzzxra"},{"name":"数据库","_id":"cj5ypzvtd000vv0uirj9o6rzc"},{"name":"nodeJS学习笔记","_id":"cj5ypzvtw0016v0ui9vqh992v"},{"name":"前端工具","_id":"cj5ypzvw1002mv0ui9dbr02l1"}],"Data":[],"Page":[{"_content":"ipXkAyKOZh","source":"baidu_verify_ipXkAyKOZh.html","raw":"ipXkAyKOZh","date":"2017-07-30T11:15:41.056Z","updated":"2017-07-30T11:14:28.197Z","path":"baidu_verify_ipXkAyKOZh.html","title":"","comments":1,"layout":"page","_id":"cj5ypzuo50000v0uiklpev2hp","content":"ipXkAyKOZh","site":{"data":{}},"excerpt":"","more":"ipXkAyKOZh"},{"title":"about","date":"2016-11-09T09:29:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-09 17:29:51\n---\n","updated":"2017-07-30T07:21:47.855Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj5ypzvr90002v0uiyheqsxa1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"BlueLake博客主题的详细配置","date":"2016-12-29T03:25:33.000Z","_content":"### 开始之前\n\n[BlueLake主题](https://github.com/chaooo/hexo-theme-BlueLake)写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。\n\n在阅读本文之前，假定您已经成功安装了[Hexo](https://hexo.io/zh-cn/)，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n> 需要特别注意的是Hexo有两个`_config.yml`配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为**`根_config.yml`**；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为**`主题_config.yml`**。\n\n### 1. 安装\n\n您可以直接到[BlueLake发布页](https://github.com/chaooo/hexo-theme-BlueLake)下载，然后解压拷贝到`themes`目录下，修改配置即可。\n不过我还是推荐使用`GIT`来checkout代码，之后也可以通过`git pull`来快速更新。\n\n#### 1.1 安装主题\n\n在根目录下打开终端窗口：\n``` bash git bash\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n```\n\n#### 1.2 安装主题渲染器\n\nBlueLake是基于`jade`和`stylus`写的，所以需要安装`hexo-renderer-jade`和`hexo-renderer-stylus`来渲染。\n``` bash git bash\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n```\n\n#### 1.3 启用主题\n\n打开`根_config.yml`配置文件，找到theme字段，将其值改为`BlueLake`(先确认主题文件夹名称是否为BlueLake)。\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntheme: BlueLake\n```\n\n#### 1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\n``` bash git bash\n$ hexo s --debug\n```\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000`，检查站点是否正确运行。\n\n#### 1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接`git pull`来更新主题。\n``` bash git bash\ncd themes/BlueLake\ngit pull\n```\n\n### 2. 配置\n\n#### 2.1 配置网站头部显示文字\n\n打开`根_config.yml`，找到：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntitle: \nsubtitle: \ndescription: \nauthor: \n```\n`title`和`subtitle`分别是网站主标题和副标题，会显示在网站头部；`description`在网站界面不会显示，内容会加入网站源码的`meta`标签中，主要用于SEO；`author`就填写网站所有者的名字，会在网站底部的`Copyright`处有所显示。\n\n#### 2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在`根_config.yml`配置如下：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\nlanguage: zh-CN\n```\n\n#### 2.3 设置菜单\n\n打开`主题_config.yml`，找到：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n```\n主题默认是展示四个菜单，即`主页home`，`归档archive`，`关于about`，`订阅RSS`；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的`footer`中`联系博主`的三个图标分别是`邮箱`，`微博主页链接地址`，`GitHUb个人页链接地址`，直接使用`主题_config.yml`中`about页面`的配置，若不需要about页面，只需要如下配置就好：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n```\n\n##### 2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\n``` bash git bash\n$ hexo new page 'about'\n```\n打开`主题_config.yml`，补全关于我页面的详细信息：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n```\n当然您也可以自定义重新布局about页面，只需要修改`layout/page.jade`模板就好。\n\n##### 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\n``` bash git bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n添加`主题_config.yml`配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n#### 2.4 添加本地搜索\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)来创建JSON数据文件：\n``` bash git bash\n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后在`根_config.yml`添加配置：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n最后在`主题_config.yml`添加配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nlocal_search: true\n```\n\n#### 2.5 修改站点图标\n\n站点图标存放在主题的`Source`目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的`source`文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为** apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n\n#### 2.6 添加站点关键字\n\n请在hexo目录的`根_config.yml`中添加keywords字段，如：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n```\n\n#### 2.7 其他配置\n`主题_config.yml`的其他配置\n1. `show_category_count`——是否显示分类下的文章数。\n2. `widgets_on_small_screens`——是否在小屏显示侧边栏，若`true`,则侧边栏挂件将显示在底部。\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nshow_category_count: true \nwidgets_on_small_screens: true \n```\n\n### 3.集成第三方服务\n\n#### 3.1 添加评论\n\n目前主题集成六种第三方评论，分别是[多说评论](http://duoshuo.com)、[Disqus评论](https://disqus.com)、[来必力评论](https://livere.com)、[友言评论](http://www.uyan.cc/)、[网易云跟帖评论](https://gentie.163.com/info.html)、[畅言评论](http://changyan.kuaizhan.com)，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前`网易云跟帖`和`畅言`还不错。\n1. 注册并获得代码。\n  - 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。\n  - 若使用[Disqus评论](https://disqus.com)，注册Disqus后获得short_name。\n  - 若使用[来必力评论](https://livere.com)，注册来必力,获得data-uid。\n  - 若使用[友言评论](http://www.uyan.cc/)，注册友言,获得uid。\n  - 若使用[网易云跟帖评论](https://gentie.163.com/info.html)，注册网易云跟帖,获得productKey。\n  - 若使用[畅言评论](http://changyan.kuaizhan.com)，注册畅言，获得appid，appkey。\n2. 配置`主题_config.yml`：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)\n```\n\n#### 3.2 百度统计\n\n1. 登录[百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面。\n2. 复制`//hm.baidu.com/hm.js?`后面那串统计脚本id(假设为：8006843039519956000)\n3. 配置`主题_config.yml`:\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nbaidu_analytics: 8006843039519956000\n```\n> 注意： `baidu_analytics`不是你的百度`id`或者百度统计`id`\n如若使用谷歌统计，配置方法与百度统计类似。\n\n#### 3.3 卜算子阅读次数统计\n\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nbusuanzi: true\n```\n若设置为`true`将计算文章的阅读量(Hits)，并显示在文章标题下的`小手图标`旁。\n\n#### 3.4 微博秀\n\n微博秀挂件的代码放在`layout/_widget/weibo.jade`下，需要您去[微博开放平台](http://open.weibo.com/)获取您自己的微博秀代码来替换。\n1. 登录[微博开放平台](http://open.weibo.com/)，选择微博秀。\n2. 为了与主题风格统一，作如下配置\n  - 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`；\n  - 样式设置：主字色`#333`；链接色`#40759b`；鼠标悬停色`#f7f8f8`；\n  - 模块设置：去掉`标题`、`边框`、`粉丝`的勾选框，只留`微博`。\n3. 复制代码里`src=\"\"`里引号包裹的内容，替换到`layout/_widget/weibo.jade`\n{% codeblock weibo.jade lang:stylus mark:1,7-8,10 https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade layout/_widget/weibo.jade %}\n.widget\n  .widget-title\n    i(class='fa fa-weibo')= ' ' + __('新浪微博')\n  iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n{% endcodeblock %}\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n> 注意：最主要是是要把`src`里`uid=`和`verifier=`后面的字段替换为您自己代码里的就好。","source":"_posts/BlueLake博客主题的详细配置.md","raw":"---\ntitle: BlueLake博客主题的详细配置\ndate: 2016-12-29 11:25:33\ntags: [hexo,BlueLake]\ncategories: hexo博客折腾\n---\n### 开始之前\n\n[BlueLake主题](https://github.com/chaooo/hexo-theme-BlueLake)写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。\n\n在阅读本文之前，假定您已经成功安装了[Hexo](https://hexo.io/zh-cn/)，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n> 需要特别注意的是Hexo有两个`_config.yml`配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为**`根_config.yml`**；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为**`主题_config.yml`**。\n\n### 1. 安装\n\n您可以直接到[BlueLake发布页](https://github.com/chaooo/hexo-theme-BlueLake)下载，然后解压拷贝到`themes`目录下，修改配置即可。\n不过我还是推荐使用`GIT`来checkout代码，之后也可以通过`git pull`来快速更新。\n\n#### 1.1 安装主题\n\n在根目录下打开终端窗口：\n``` bash git bash\n$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake\n```\n\n#### 1.2 安装主题渲染器\n\nBlueLake是基于`jade`和`stylus`写的，所以需要安装`hexo-renderer-jade`和`hexo-renderer-stylus`来渲染。\n``` bash git bash\n$ npm install hexo-renderer-jade@0.3.0 --save\n$ npm install hexo-renderer-stylus --save\n```\n\n#### 1.3 启用主题\n\n打开`根_config.yml`配置文件，找到theme字段，将其值改为`BlueLake`(先确认主题文件夹名称是否为BlueLake)。\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntheme: BlueLake\n```\n\n#### 1.4 验证\n\n首先启动 Hexo 本地站点，并开启调试模式：\n``` bash git bash\n$ hexo s --debug\n```\n在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000`，检查站点是否正确运行。\n\n#### 1.5 更新主题\n\n今后若主题添加了新功能正是您需要的，您可以直接`git pull`来更新主题。\n``` bash git bash\ncd themes/BlueLake\ngit pull\n```\n\n### 2. 配置\n\n#### 2.1 配置网站头部显示文字\n\n打开`根_config.yml`，找到：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\ntitle: \nsubtitle: \ndescription: \nauthor: \n```\n`title`和`subtitle`分别是网站主标题和副标题，会显示在网站头部；`description`在网站界面不会显示，内容会加入网站源码的`meta`标签中，主要用于SEO；`author`就填写网站所有者的名字，会在网站底部的`Copyright`处有所显示。\n\n#### 2.2 设置语言\n\n该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在`根_config.yml`配置如下：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\nlanguage: zh-CN\n```\n\n#### 2.3 设置菜单\n\n打开`主题_config.yml`，找到：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nmenu:\n  - page: home\n    directory: .\n    icon: fa-home\n  - page: archive\n    directory: archives/\n    icon: fa-archive\n  # - page: about\n  #   directory: about/\n  #   icon: fa-user\n  - page: rss\n    directory: atom.xml\n    icon: fa-rss\n```\n主题默认是展示四个菜单，即`主页home`，`归档archive`，`关于about`，`订阅RSS`；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。\n每个页面底部的`footer`中`联系博主`的三个图标分别是`邮箱`，`微博主页链接地址`，`GitHUb个人页链接地址`，直接使用`主题_config.yml`中`about页面`的配置，若不需要about页面，只需要如下配置就好：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  github_url: ## github主页链接地址\n```\n\n##### 2.3.1 添加about页\n\n此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：\n``` bash git bash\n$ hexo new page 'about'\n```\n打开`主题_config.yml`，补全关于我页面的详细信息：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n# About page \nabout:\n  photo_url: ## 头像的链接地址\n  email: ## 个人邮箱 \n  weibo_url: ## 微博主页链接地址\n  weibo_name: ## 微博用户名 \n  github_url: ## github主页链接地址\n  github_name: ## github用户名\n```\n当然您也可以自定义重新布局about页面，只需要修改`layout/page.jade`模板就好。\n\n##### 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n\n在根目录下打开命令行窗口：\n``` bash git bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n添加`主题_config.yml`配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n#### 2.4 添加本地搜索\n默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)来创建JSON数据文件：\n``` bash git bash\n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后在`根_config.yml`添加配置：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n最后在`主题_config.yml`添加配置：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nlocal_search: true\n```\n\n#### 2.5 修改站点图标\n\n站点图标存放在主题的`Source`目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。\n您需要准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的`source`文件夹，建议大小：32px X 32px。\n您需要为苹果设备添加网站徽标，请命名为** apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。\n(有很多网站都可以在线生成ico格式的图片。)\n\n#### 2.6 添加站点关键字\n\n请在hexo目录的`根_config.yml`中添加keywords字段，如：\n``` yml 根_config.yml https://hexo.io/zh-cn/docs/configuration.html _config.yml\n# Site\ntitle: Hexo\nsubtitle: 副标题\ndescription: 网站简要描述,如：Charles·Zheng's blog.\nkeywords: 网站关键字, key, key1, key2, key3\nauthor: Charles\nlanguage: zh-CN\n```\n\n#### 2.7 其他配置\n`主题_config.yml`的其他配置\n1. `show_category_count`——是否显示分类下的文章数。\n2. `widgets_on_small_screens`——是否在小屏显示侧边栏，若`true`,则侧边栏挂件将显示在底部。\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nshow_category_count: true \nwidgets_on_small_screens: true \n```\n\n### 3.集成第三方服务\n\n#### 3.1 添加评论\n\n目前主题集成六种第三方评论，分别是[多说评论](http://duoshuo.com)、[Disqus评论](https://disqus.com)、[来必力评论](https://livere.com)、[友言评论](http://www.uyan.cc/)、[网易云跟帖评论](https://gentie.163.com/info.html)、[畅言评论](http://changyan.kuaizhan.com)，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前`网易云跟帖`和`畅言`还不错。\n1. 注册并获得代码。\n  - 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。\n  - 若使用[Disqus评论](https://disqus.com)，注册Disqus后获得short_name。\n  - 若使用[来必力评论](https://livere.com)，注册来必力,获得data-uid。\n  - 若使用[友言评论](http://www.uyan.cc/)，注册友言,获得uid。\n  - 若使用[网易云跟帖评论](https://gentie.163.com/info.html)，注册网易云跟帖,获得productKey。\n  - 若使用[畅言评论](http://changyan.kuaizhan.com)，注册畅言，获得appid，appkey。\n2. 配置`主题_config.yml`：\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\n#Cmments\ncomment:\n  duoshuo: ## duoshuo_shortname\n  disqus: ## disqus_shortname\n  livere: ## 来必力(data-uid)\n  uyan: ## 友言(uid)\n  cloudTie: ## 网易云跟帖(productKey)\n  changyan: ## 畅言需在下方配置两个参数，此处不填。\n    appid: ## 畅言(appid)\n    appkey: ##畅言(appkey)\n```\n\n#### 3.2 百度统计\n\n1. 登录[百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面。\n2. 复制`//hm.baidu.com/hm.js?`后面那串统计脚本id(假设为：8006843039519956000)\n3. 配置`主题_config.yml`:\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml \nbaidu_analytics: 8006843039519956000\n```\n> 注意： `baidu_analytics`不是你的百度`id`或者百度统计`id`\n如若使用谷歌统计，配置方法与百度统计类似。\n\n#### 3.3 卜算子阅读次数统计\n\n``` yml 主题_config.yml https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml themes/BlueLake/_config.yml\nbusuanzi: true\n```\n若设置为`true`将计算文章的阅读量(Hits)，并显示在文章标题下的`小手图标`旁。\n\n#### 3.4 微博秀\n\n微博秀挂件的代码放在`layout/_widget/weibo.jade`下，需要您去[微博开放平台](http://open.weibo.com/)获取您自己的微博秀代码来替换。\n1. 登录[微博开放平台](http://open.weibo.com/)，选择微博秀。\n2. 为了与主题风格统一，作如下配置\n  - 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`；\n  - 样式设置：主字色`#333`；链接色`#40759b`；鼠标悬停色`#f7f8f8`；\n  - 模块设置：去掉`标题`、`边框`、`粉丝`的勾选框，只留`微博`。\n3. 复制代码里`src=\"\"`里引号包裹的内容，替换到`layout/_widget/weibo.jade`\n{% codeblock weibo.jade lang:stylus mark:1,7-8,10 https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade layout/_widget/weibo.jade %}\n.widget\n  .widget-title\n    i(class='fa fa-weibo')= ' ' + __('新浪微博')\n  iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=5&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,ffffff,333,40759b,f7f8f8&dpc=1\")\n{% endcodeblock %}\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。\n> 注意：最主要是是要把`src`里`uid=`和`verifier=`后面的字段替换为您自己代码里的就好。","slug":"BlueLake博客主题的详细配置","published":1,"updated":"2017-07-30T07:21:47.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvr10001v0uijsq47a1v","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p><a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"external\">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>\n<p>在阅读本文之前，假定您已经成功安装了<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<blockquote>\n<p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>您可以直接到<a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"external\">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p>\n<h4 id=\"1-1-安装主题\"><a href=\"#1-1-安装主题\" class=\"headerlink\" title=\"1.1 安装主题\"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-安装主题渲染器\"><a href=\"#1-2-安装主题渲染器\" class=\"headerlink\" title=\"1.2 安装主题渲染器\"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-renderer-jade@0.3.0 --save</div><div class=\"line\">$ npm install hexo-renderer-stylus --save</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-启用主题\"><a href=\"#1-3-启用主题\" class=\"headerlink\" title=\"1.3 启用主题\"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">BlueLake</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4 验证\"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>\n<h4 id=\"1-5-更新主题\"><a href=\"#1-5-更新主题\" class=\"headerlink\" title=\"1.5 更新主题\"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> themes/BlueLake</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h4 id=\"2-1-配置网站头部显示文字\"><a href=\"#2-1-配置网站头部显示文字\" class=\"headerlink\" title=\"2.1 配置网站头部显示文字\"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">title:</span> </div><div class=\"line\"><span class=\"attr\">subtitle:</span> </div><div class=\"line\"><span class=\"attr\">description:</span> </div><div class=\"line\"><span class=\"attr\">author:</span></div></pre></td></tr></table></figure></p>\n<p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p>\n<h4 id=\"2-2-设置语言\"><a href=\"#2-2-设置语言\" class=\"headerlink\" title=\"2.2 设置语言\"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-设置菜单\"><a href=\"#2-3-设置菜单\" class=\"headerlink\" title=\"2.3 设置菜单\"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">home</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-home</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">archive</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">archives/</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-archive</span></div><div class=\"line\">  <span class=\"comment\"># - page: about</span></div><div class=\"line\">  <span class=\"comment\">#   directory: about/</span></div><div class=\"line\">  <span class=\"comment\">#   icon: fa-user</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">rss</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">atom.xml</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-rss</span></div></pre></td></tr></table></figure></p>\n<p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># About page </span></div><div class=\"line\"><span class=\"attr\">about:</span></div><div class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></div><div class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"2-3-1-添加about页\"><a href=\"#2-3-1-添加about页\" class=\"headerlink\" title=\"2.3.1 添加about页\"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page <span class=\"string\">'about'</span></div></pre></td></tr></table></figure></p>\n<p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># About page </span></div><div class=\"line\"><span class=\"attr\">about:</span></div><div class=\"line\"><span class=\"attr\">  photo_url:</span> <span class=\"comment\">## 头像的链接地址</span></div><div class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></div><div class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  weibo_name:</span> <span class=\"comment\">## 微博用户名 </span></div><div class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  github_name:</span> <span class=\"comment\">## github用户名</span></div></pre></td></tr></table></figure></p>\n<p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p>\n<h5 id=\"2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div><div class=\"line\">$ npm install hexo-generator-sitemap --save</div><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>\n<p>添加<code>主题_config.yml</code>配置：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Plugins:</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-feed</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-sitemap</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-baidu-sitemap</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></div><div class=\"line\"><span class=\"attr\">baidusitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-4-添加本地搜索\"><a href=\"#2-4-添加本地搜索\" class=\"headerlink\" title=\"2.4 添加本地搜索\"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure></p>\n<p>然后在<code>根_config.yml</code>添加配置：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>最后在<code>主题_config.yml</code>添加配置：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">local_search:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-5-修改站点图标\"><a href=\"#2-5-修改站点图标\" class=\"headerlink\" title=\"2.5 修改站点图标\"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p>\n<h4 id=\"2-6-添加站点关键字\"><a href=\"#2-6-添加站点关键字\" class=\"headerlink\" title=\"2.6 添加站点关键字\"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站简要描述,如：Charles·Zheng's</span> <span class=\"string\">blog.</span></div><div class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">网站关键字,</span> <span class=\"string\">key,</span> <span class=\"string\">key1,</span> <span class=\"string\">key2,</span> <span class=\"string\">key3</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Charles</span></div><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-7-其他配置\"><a href=\"#2-7-其他配置\" class=\"headerlink\" title=\"2.7 其他配置\"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p>\n<ol>\n<li><code>show_category_count</code>——是否显示分类下的文章数。</li>\n<li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">show_category_count:</span> <span class=\"literal\">true</span> </div><div class=\"line\"><span class=\"attr\">widgets_on_small_screens:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-集成第三方服务\"><a href=\"#3-集成第三方服务\" class=\"headerlink\" title=\"3.集成第三方服务\"></a>3.集成第三方服务</h3><h4 id=\"3-1-添加评论\"><a href=\"#3-1-添加评论\" class=\"headerlink\" title=\"3.1 添加评论\"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说评论</a>、<a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus评论</a>、<a href=\"https://livere.com\" target=\"_blank\" rel=\"external\">来必力评论</a>、<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言评论</a>、<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖评论</a>、<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"external\">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p>\n<ol>\n<li>注册并获得代码。<ul>\n<li>若使用<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说评论</a>，注册多说后获得short_name。</li>\n<li>若使用<a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus评论</a>，注册Disqus后获得short_name。</li>\n<li>若使用<a href=\"https://livere.com\" target=\"_blank\" rel=\"external\">来必力评论</a>，注册来必力,获得data-uid。</li>\n<li>若使用<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言评论</a>，注册友言,获得uid。</li>\n<li>若使用<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li>\n<li>若使用<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"external\">畅言评论</a>，注册畅言，获得appid，appkey。</li>\n</ul>\n</li>\n<li>配置<code>主题_config.yml</code>：<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Cmments</span></div><div class=\"line\"><span class=\"attr\">comment:</span></div><div class=\"line\"><span class=\"attr\">  duoshuo:</span> <span class=\"comment\">## duoshuo_shortname</span></div><div class=\"line\"><span class=\"attr\">  disqus:</span> <span class=\"comment\">## disqus_shortname</span></div><div class=\"line\"><span class=\"attr\">  livere:</span> <span class=\"comment\">## 来必力(data-uid)</span></div><div class=\"line\"><span class=\"attr\">  uyan:</span> <span class=\"comment\">## 友言(uid)</span></div><div class=\"line\"><span class=\"attr\">  cloudTie:</span> <span class=\"comment\">## 网易云跟帖(productKey)</span></div><div class=\"line\"><span class=\"attr\">  changyan:</span> <span class=\"comment\">## 畅言需在下方配置两个参数，此处不填。</span></div><div class=\"line\"><span class=\"attr\">    appid:</span> <span class=\"comment\">## 畅言(appid)</span></div><div class=\"line\"><span class=\"attr\">    appkey:</span> <span class=\"comment\">##畅言(appkey)</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-2-百度统计\"><a href=\"#3-2-百度统计\" class=\"headerlink\" title=\"3.2 百度统计\"></a>3.2 百度统计</h4><ol>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"external\">百度统计</a>，定位到站点的代码获取页面。</li>\n<li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li>\n<li>配置<code>主题_config.yml</code>:<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"number\">8006843039519956000</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p>\n</blockquote>\n<h4 id=\"3-3-卜算子阅读次数统计\"><a href=\"#3-3-卜算子阅读次数统计\" class=\"headerlink\" title=\"3.3 卜算子阅读次数统计\"></a>3.3 卜算子阅读次数统计</h4><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p>\n<h4 id=\"3-4-微博秀\"><a href=\"#3-4-微博秀\" class=\"headerlink\" title=\"3.4 微博秀\"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"external\">微博开放平台</a>获取您自己的微博秀代码来替换。</p>\n<ol>\n<li>登录<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"external\">微博开放平台</a>，选择微博秀。</li>\n<li>为了与主题风格统一，作如下配置<ul>\n<li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li>\n<li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li>\n<li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li>\n</ul>\n</li>\n<li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class=\"highlight stylus\"><figcaption><span>weibo.jade</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade\" target=\"_blank\" rel=\"external\">layout/_widget/weibo.jade</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line marked\">.widget</div><div class=\"line\">  .widget-title</div><div class=\"line\">    i(class=<span class=\"string\">'fa fa-weibo'</span>)= <span class=\"string\">' '</span> + __(<span class=\"string\">'新浪微博'</span>)</div><div class=\"line\">  iframe(<span class=\"attribute\">width</span>=<span class=\"string\">\"100%\"</span>,height=<span class=\"string\">\"400\"</span>,class=<span class=\"string\">\"share_self\"</span>,frameborder=<span class=\"string\">\"0\"</span>,scrolling=<span class=\"string\">\"no\"</span>,src=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1\"</span>)</div></pre></td></tr></table></figure>\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote>\n<p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p><a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"external\">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p>\n<p>在阅读本文之前，假定您已经成功安装了<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<blockquote>\n<p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><p>您可以直接到<a href=\"https://github.com/chaooo/hexo-theme-BlueLake\" target=\"_blank\" rel=\"external\">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p>\n<h4 id=\"1-1-安装主题\"><a href=\"#1-1-安装主题\" class=\"headerlink\" title=\"1.1 安装主题\"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-安装主题渲染器\"><a href=\"#1-2-安装主题渲染器\" class=\"headerlink\" title=\"1.2 安装主题渲染器\"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-renderer-jade@0.3.0 --save</div><div class=\"line\">$ npm install hexo-renderer-stylus --save</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-启用主题\"><a href=\"#1-3-启用主题\" class=\"headerlink\" title=\"1.3 启用主题\"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">BlueLake</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4 验证\"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>\n<h4 id=\"1-5-更新主题\"><a href=\"#1-5-更新主题\" class=\"headerlink\" title=\"1.5 更新主题\"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> themes/BlueLake</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h4 id=\"2-1-配置网站头部显示文字\"><a href=\"#2-1-配置网站头部显示文字\" class=\"headerlink\" title=\"2.1 配置网站头部显示文字\"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">title:</span> </div><div class=\"line\"><span class=\"attr\">subtitle:</span> </div><div class=\"line\"><span class=\"attr\">description:</span> </div><div class=\"line\"><span class=\"attr\">author:</span></div></pre></td></tr></table></figure></p>\n<p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p>\n<h4 id=\"2-2-设置语言\"><a href=\"#2-2-设置语言\" class=\"headerlink\" title=\"2.2 设置语言\"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-设置菜单\"><a href=\"#2-3-设置菜单\" class=\"headerlink\" title=\"2.3 设置菜单\"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">home</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-home</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">archive</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">archives/</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-archive</span></div><div class=\"line\">  <span class=\"comment\"># - page: about</span></div><div class=\"line\">  <span class=\"comment\">#   directory: about/</span></div><div class=\"line\">  <span class=\"comment\">#   icon: fa-user</span></div><div class=\"line\"><span class=\"attr\">  - page:</span> <span class=\"string\">rss</span></div><div class=\"line\"><span class=\"attr\">    directory:</span> <span class=\"string\">atom.xml</span></div><div class=\"line\"><span class=\"attr\">    icon:</span> <span class=\"string\">fa-rss</span></div></pre></td></tr></table></figure></p>\n<p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># About page </span></div><div class=\"line\"><span class=\"attr\">about:</span></div><div class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></div><div class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"2-3-1-添加about页\"><a href=\"#2-3-1-添加about页\" class=\"headerlink\" title=\"2.3.1 添加about页\"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page <span class=\"string\">'about'</span></div></pre></td></tr></table></figure></p>\n<p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># About page </span></div><div class=\"line\"><span class=\"attr\">about:</span></div><div class=\"line\"><span class=\"attr\">  photo_url:</span> <span class=\"comment\">## 头像的链接地址</span></div><div class=\"line\"><span class=\"attr\">  email:</span> <span class=\"comment\">## 个人邮箱 </span></div><div class=\"line\"><span class=\"attr\">  weibo_url:</span> <span class=\"comment\">## 微博主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  weibo_name:</span> <span class=\"comment\">## 微博用户名 </span></div><div class=\"line\"><span class=\"attr\">  github_url:</span> <span class=\"comment\">## github主页链接地址</span></div><div class=\"line\"><span class=\"attr\">  github_name:</span> <span class=\"comment\">## github用户名</span></div></pre></td></tr></table></figure></p>\n<p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p>\n<h5 id=\"2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div><div class=\"line\">$ npm install hexo-generator-sitemap --save</div><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>\n<p>添加<code>主题_config.yml</code>配置：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Plugins:</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-feed</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-sitemap</span></div><div class=\"line\">  <span class=\"string\">hexo-generator-baidu-sitemap</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></div><div class=\"line\"><span class=\"attr\">baidusitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-4-添加本地搜索\"><a href=\"#2-4-添加本地搜索\" class=\"headerlink\" title=\"2.4 添加本地搜索\"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class=\"highlight bash\"><figcaption><span>git bash</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure></p>\n<p>然后在<code>根_config.yml</code>添加配置：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>最后在<code>主题_config.yml</code>添加配置：<br><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">local_search:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-5-修改站点图标\"><a href=\"#2-5-修改站点图标\" class=\"headerlink\" title=\"2.5 修改站点图标\"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p>\n<h4 id=\"2-6-添加站点关键字\"><a href=\"#2-6-添加站点关键字\" class=\"headerlink\" title=\"2.6 添加站点关键字\"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class=\"highlight yml\"><figcaption><span>根_config.yml</span><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hexo</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">网站简要描述,如：Charles·Zheng's</span> <span class=\"string\">blog.</span></div><div class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">网站关键字,</span> <span class=\"string\">key,</span> <span class=\"string\">key1,</span> <span class=\"string\">key2,</span> <span class=\"string\">key3</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Charles</span></div><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-7-其他配置\"><a href=\"#2-7-其他配置\" class=\"headerlink\" title=\"2.7 其他配置\"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p>\n<ol>\n<li><code>show_category_count</code>——是否显示分类下的文章数。</li>\n<li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">show_category_count:</span> <span class=\"literal\">true</span> </div><div class=\"line\"><span class=\"attr\">widgets_on_small_screens:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3-集成第三方服务\"><a href=\"#3-集成第三方服务\" class=\"headerlink\" title=\"3.集成第三方服务\"></a>3.集成第三方服务</h3><h4 id=\"3-1-添加评论\"><a href=\"#3-1-添加评论\" class=\"headerlink\" title=\"3.1 添加评论\"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说评论</a>、<a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus评论</a>、<a href=\"https://livere.com\" target=\"_blank\" rel=\"external\">来必力评论</a>、<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言评论</a>、<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖评论</a>、<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"external\">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p>\n<ol>\n<li>注册并获得代码。<ul>\n<li>若使用<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说评论</a>，注册多说后获得short_name。</li>\n<li>若使用<a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus评论</a>，注册Disqus后获得short_name。</li>\n<li>若使用<a href=\"https://livere.com\" target=\"_blank\" rel=\"external\">来必力评论</a>，注册来必力,获得data-uid。</li>\n<li>若使用<a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言评论</a>，注册友言,获得uid。</li>\n<li>若使用<a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li>\n<li>若使用<a href=\"http://changyan.kuaizhan.com\" target=\"_blank\" rel=\"external\">畅言评论</a>，注册畅言，获得appid，appkey。</li>\n</ul>\n</li>\n<li>配置<code>主题_config.yml</code>：<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Cmments</span></div><div class=\"line\"><span class=\"attr\">comment:</span></div><div class=\"line\"><span class=\"attr\">  duoshuo:</span> <span class=\"comment\">## duoshuo_shortname</span></div><div class=\"line\"><span class=\"attr\">  disqus:</span> <span class=\"comment\">## disqus_shortname</span></div><div class=\"line\"><span class=\"attr\">  livere:</span> <span class=\"comment\">## 来必力(data-uid)</span></div><div class=\"line\"><span class=\"attr\">  uyan:</span> <span class=\"comment\">## 友言(uid)</span></div><div class=\"line\"><span class=\"attr\">  cloudTie:</span> <span class=\"comment\">## 网易云跟帖(productKey)</span></div><div class=\"line\"><span class=\"attr\">  changyan:</span> <span class=\"comment\">## 畅言需在下方配置两个参数，此处不填。</span></div><div class=\"line\"><span class=\"attr\">    appid:</span> <span class=\"comment\">## 畅言(appid)</span></div><div class=\"line\"><span class=\"attr\">    appkey:</span> <span class=\"comment\">##畅言(appkey)</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-2-百度统计\"><a href=\"#3-2-百度统计\" class=\"headerlink\" title=\"3.2 百度统计\"></a>3.2 百度统计</h4><ol>\n<li>登录<a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"external\">百度统计</a>，定位到站点的代码获取页面。</li>\n<li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li>\n<li>配置<code>主题_config.yml</code>:<figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"number\">8006843039519956000</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p>\n</blockquote>\n<h4 id=\"3-3-卜算子阅读次数统计\"><a href=\"#3-3-卜算子阅读次数统计\" class=\"headerlink\" title=\"3.3 卜算子阅读次数统计\"></a>3.3 卜算子阅读次数统计</h4><figure class=\"highlight yml\"><figcaption><span>主题_config.yml</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p>\n<h4 id=\"3-4-微博秀\"><a href=\"#3-4-微博秀\" class=\"headerlink\" title=\"3.4 微博秀\"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"external\">微博开放平台</a>获取您自己的微博秀代码来替换。</p>\n<ol>\n<li>登录<a href=\"http://open.weibo.com/\" target=\"_blank\" rel=\"external\">微博开放平台</a>，选择微博秀。</li>\n<li>为了与主题风格统一，作如下配置<ul>\n<li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li>\n<li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li>\n<li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li>\n</ul>\n</li>\n<li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class=\"highlight stylus\"><figcaption><span>weibo.jade</span><a href=\"https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade\" target=\"_blank\" rel=\"external\">layout/_widget/weibo.jade</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line marked\">.widget</div><div class=\"line\">  .widget-title</div><div class=\"line\">    i(class=<span class=\"string\">'fa fa-weibo'</span>)= <span class=\"string\">' '</span> + __(<span class=\"string\">'新浪微博'</span>)</div><div class=\"line\">  iframe(<span class=\"attribute\">width</span>=<span class=\"string\">\"100%\"</span>,height=<span class=\"string\">\"400\"</span>,class=<span class=\"string\">\"share_self\"</span>,frameborder=<span class=\"string\">\"0\"</span>,scrolling=<span class=\"string\">\"no\"</span>,src=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1\"</span>)</div></pre></td></tr></table></figure>\n这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote>\n<p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Hexo3.2+GitHub搭建静态博客","date":"2016-05-23T03:16:51.000Z","_content":"\n### 开始之前\n\n在安装[hexo](https://hexo.io/zh-cn/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n<!-- more --> \n#### 1.创建GitHub仓库\n注册[GitHub](https://github.com/)账号，创建一个以\"用户名.github.io\"命名的仓库，如我的用户名为chaooo,那我的仓库名为：[chaooo.github.io](https://github.com/chaooo/chaooo.github.io)，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n#### 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n#### 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH\n``` bash\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。\n输入以下指令后，一路回车就好：\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n然后键入以下指令：\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n如果出现这个错误:`Could not open a connection to your authentication agent`，则先执行如下命令即可：\n``` bash\n$ ssh-agent bash\n```\n再重新输入指令：\n``` bash\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n``` bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github上点击你的头像-->Your profile-->Edit profile-->SSH and GPG keys-->New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。\n最后还是测试一下吧，键入以下命令：\n``` bash\n$ ssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好。\n#### 4.初始化hexo文件夹\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。\n在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop <刚复制的地址>\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n### Hexo安装配置\n\n#### 1.Hexo初始化\n进入Hexo-admin文件夹\n``` bash\n$ cd Hexo-admin\n```\n接下来只需要使用 npm 即可完成 Hexo 的安装:\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:\n``` bash\n$ hexo init\n$ npm install\n```\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。\n``` bash\n$ hexo generate\n$ hexo server\n```\n输入Ctrl+C停止服务。\n#### 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: \n  repository:\n```\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n#### 3.完成部署\n最后一步，快要成功了，键入指令：\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n输入弹出框的用户名与密码(首次使用git会弹出)。\nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[chaooo.github.io/](http://chaooo.github.io/)\n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：\n``` bash\n    To https://github.com/chaooo/chaooo.github.io.git\n       7f3b50a..128a10d  HEAD -> master\n    INFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n### 日常操作\n\n#### 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source\\_posts\\文章标题.md 。 \n``` bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n然后用编辑器打开“文章标题.md”按照[Markdown语法](http://www.appinn.com/markdown/)书写文章。\n 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，\n 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md\n``` bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：\n``` bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用\"将其包围。\n`请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。`\n#### 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n``` bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n然后才执行hexo generate -d发布网站到master分支上。\n``` bash\n$ hexo generate -d\n```\n#### 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n##### 3.1拷贝仓库\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git \n```\n##### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:\n``` bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n##### 小Tips:hexo 命令\n``` bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","source":"_posts/Hexo3-2-github搭建静态博客.md","raw":"---\ntitle: Hexo3.2+GitHub搭建静态博客\ndate: 2016-05-23 11:16:51\ntags: hexo\ncategories: hexo博客折腾\n---\n\n### 开始之前\n\n在安装[hexo](https://hexo.io/zh-cn/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n<!-- more --> \n#### 1.创建GitHub仓库\n注册[GitHub](https://github.com/)账号，创建一个以\"用户名.github.io\"命名的仓库，如我的用户名为chaooo,那我的仓库名为：[chaooo.github.io](https://github.com/chaooo/chaooo.github.io)，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。\n#### 2.配置Git\n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：\n``` bash\n$ git config --global user.name \"username\"\n$ git config --global user.email \"email@example.com\"\n```\n#### 3.本地Git与GitHub建立联系\n这里介绍SSH的配置，先检查电脑是否已经有SSH\n``` bash\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。\n输入以下指令后，一路回车就好：\n``` bash\n$ ssh-keygen -t rsa -C \"emailt@example.com\"\n```\n然后键入以下指令：\n``` bash\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n如果出现这个错误:`Could not open a connection to your authentication agent`，则先执行如下命令即可：\n``` bash\n$ ssh-agent bash\n```\n再重新输入指令：\n``` bash\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n``` bash\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github上点击你的头像-->Your profile-->Edit profile-->SSH and GPG keys-->New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。\n最后还是测试一下吧，键入以下命令：\n``` bash\n$ ssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好。\n#### 4.初始化hexo文件夹\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。\n在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop <刚复制的地址>\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git\n$ mkdir Hexo-admin\n```\n\n### Hexo安装配置\n\n#### 1.Hexo初始化\n进入Hexo-admin文件夹\n``` bash\n$ cd Hexo-admin\n```\n接下来只需要使用 npm 即可完成 Hexo 的安装:\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:\n``` bash\n$ hexo init\n$ npm install\n```\n接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。\n``` bash\n$ hexo generate\n$ hexo server\n```\n输入Ctrl+C停止服务。\n#### 2.Hexo配置\n用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: \n  repository:\n```\n到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。\n``` bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n#### 3.完成部署\n最后一步，快要成功了，键入指令：\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n输入弹出框的用户名与密码(首次使用git会弹出)。\nOK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：[chaooo.github.io/](http://chaooo.github.io/)\n每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：\n``` bash\n    To https://github.com/chaooo/chaooo.github.io.git\n       7f3b50a..128a10d  HEAD -> master\n    INFO  Deploy done: git\n```\n当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。\n\n### 日常操作\n\n#### 1.写文章\n执行new命令，生成指定名称的文章至 Admin-blog\\source\\_posts\\文章标题.md 。 \n``` bash\n$ hexo new [layout] \"文章标题\" #新建文章\n```\n然后用编辑器打开“文章标题.md”按照[Markdown语法](http://www.appinn.com/markdown/)书写文章。\n 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，\n 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md\n``` bash\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：\n``` bash\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用\"将其包围。\n`请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件\"：\"后面都必须有个空格，不然会报错。`\n#### 2.提交\n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n``` bash\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n然后才执行hexo generate -d发布网站到master分支上。\n``` bash\n$ hexo generate -d\n```\n#### 3.本地仓库丢失\n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n##### 3.1拷贝仓库\n``` bash\n$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git \n```\n##### 3.2配置Hexo\n在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:\n``` bash\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n##### 小Tips:hexo 命令\n``` bash\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\nhexo deploy -g  #生成加部署\nhexo server -g  #生成加预览\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","slug":"Hexo3-2-github搭建静态博客","published":1,"updated":"2017-07-30T07:21:47.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvrb0003v0uird124777","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">hexo</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>。<br><a id=\"more\"></a> </p>\n<h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h4><p>注册<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href=\"https://github.com/chaooo/chaooo.github.io\" target=\"_blank\" rel=\"external\">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h4 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></div></pre></td></tr></table></figure></p>\n<p>然后键入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash</div></pre></td></tr></table></figure></p>\n<p>再重新输入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h4 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">$ mkdir Hexo-admin</div></pre></td></tr></table></figure></p>\n<h3 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h3><h4 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</div></pre></td></tr></table></figure></p>\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure></p>\n<p>输入Ctrl+C停止服务。</p>\n<h4 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: </div><div class=\"line\">  repository:</div></pre></td></tr></table></figure></p>\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure></p>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://chaooo.github.io/\" target=\"_blank\" rel=\"external\">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">   7f3b50a..128a10d  HEAD -&gt; master</div><div class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</div></pre></td></tr></table></figure></p>\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<h3 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h3><h4 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></div></pre></td></tr></table></figure></p>\n<p>然后用编辑器打开“文章标题.md”按照<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p>\n<h4 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></div><div class=\"line\">$ git push origin develop</div></pre></td></tr></table></figure></p>\n<p>然后才执行hexo generate -d发布网站到master分支上。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate -d</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h5 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div></pre></td></tr></table></figure>\n<h5 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h5 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></div><div class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></div><div class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></div><div class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></div><div class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></div><div class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></div><div class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></div><div class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></div><div class=\"line\"><span class=\"comment\">#命令的简写</span></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">hexo</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>。<br>","more":"</p>\n<h4 id=\"1-创建GitHub仓库\"><a href=\"#1-创建GitHub仓库\" class=\"headerlink\" title=\"1.创建GitHub仓库\"></a>1.创建GitHub仓库</h4><p>注册<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href=\"https://github.com/chaooo/chaooo.github.io\" target=\"_blank\" rel=\"external\">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p>\n<h4 id=\"2-配置Git\"><a href=\"#2-配置Git\" class=\"headerlink\" title=\"2.配置Git\"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-本地Git与GitHub建立联系\"><a href=\"#3-本地Git与GitHub建立联系\" class=\"headerlink\" title=\"3.本地Git与GitHub建立联系\"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"emailt@example.com\"</span></div></pre></td></tr></table></figure></p>\n<p>然后键入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash</div></pre></td></tr></table></figure></p>\n<p>再重新输入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>你可能会看到有警告，没事，输入“yes”就好。</p>\n<h4 id=\"4-初始化hexo文件夹\"><a href=\"#4-初始化hexo文件夹\" class=\"headerlink\" title=\"4.初始化hexo文件夹\"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">$ mkdir Hexo-admin</div></pre></td></tr></table></figure></p>\n<h3 id=\"Hexo安装配置\"><a href=\"#Hexo安装配置\" class=\"headerlink\" title=\"Hexo安装配置\"></a>Hexo安装配置</h3><h4 id=\"1-Hexo初始化\"><a href=\"#1-Hexo初始化\" class=\"headerlink\" title=\"1.Hexo初始化\"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> Hexo-admin</div></pre></td></tr></table></figure></p>\n<p>接下来只需要使用 npm 即可完成 Hexo 的安装:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure></p>\n<p>输入Ctrl+C停止服务。</p>\n<h4 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2.Hexo配置\"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: </div><div class=\"line\">  repository:</div></pre></td></tr></table></figure></p>\n<p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-完成部署\"><a href=\"#3-完成部署\" class=\"headerlink\" title=\"3.完成部署\"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure></p>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href=\"http://chaooo.github.io/\" target=\"_blank\" rel=\"external\">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">To https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">   7f3b50a..128a10d  HEAD -&gt; master</div><div class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</div></pre></td></tr></table></figure></p>\n<p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p>\n<h3 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h3><h4 id=\"1-写文章\"><a href=\"#1-写文章\" class=\"headerlink\" title=\"1.写文章\"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] <span class=\"string\">\"文章标题\"</span> <span class=\"comment\">#新建文章</span></div></pre></td></tr></table></figure></p>\n<p>然后用编辑器打开“文章标题.md”按照<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p>\n<h4 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">\"...\"</span></div><div class=\"line\">$ git push origin develop</div></pre></td></tr></table></figure></p>\n<p>然后才执行hexo generate -d发布网站到master分支上。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate -d</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-本地仓库丢失\"><a href=\"#3-本地仓库丢失\" class=\"headerlink\" title=\"3.本地仓库丢失\"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p>\n<h5 id=\"3-1拷贝仓库\"><a href=\"#3-1拷贝仓库\" class=\"headerlink\" title=\"3.1拷贝仓库\"></a>3.1拷贝仓库</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div></pre></td></tr></table></figure>\n<h5 id=\"3-2配置Hexo\"><a href=\"#3-2配置Hexo\" class=\"headerlink\" title=\"3.2配置Hexo\"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h5 id=\"小Tips-hexo-命令\"><a href=\"#小Tips-hexo-命令\" class=\"headerlink\" title=\"小Tips:hexo 命令\"></a>小Tips:hexo 命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span></div><div class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></div><div class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></div><div class=\"line\">hexo server <span class=\"comment\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class=\"line\">hexo deploy <span class=\"comment\">#将.deploy目录部署到GitHub</span></div><div class=\"line\">hexo <span class=\"built_in\">help</span>  <span class=\"comment\"># 查看帮助</span></div><div class=\"line\">hexo version  <span class=\"comment\">#查看Hexo的版本</span></div><div class=\"line\">hexo deploy -g  <span class=\"comment\">#生成加部署</span></div><div class=\"line\">hexo server -g  <span class=\"comment\">#生成加预览</span></div><div class=\"line\"><span class=\"comment\">#命令的简写</span></div><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>"},{"title":"Hexo博客优化——主题、分享、评论、微博秀","date":"2016-05-23T06:30:13.000Z","_content":"\n继上一篇[Hexo3.2+GitHub搭建静态博客](Hexo3-2-github搭建静态博客.html)。\n\n### 1.主题\nHexo提供了很多主题，具体可参见[Themes|Hexo](https://hexo.io/themes/)，这里我选择默认主题[landscape](https://github.com/hexojs/hexo-theme-landscape)(此主题默认已安装)。\n<!-- more --> \n#### 1.1安装主题\n将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：\n``` bash\n$ git clone https://github.com/hexojs/hexo-theme-landscape.git themes/landscape\n```\n获取landscape主题的最新版本：\n``` bash\n$ cd themes/landscape\n$ git pull\n```\n修改在根目录下_config.yml 配置：\n``` bash\ntheme: landscape\n```\n\n### 2.修改添加分享链接\n#### 2.1原生分享的修改\n在`themes\\landscape\\source\\js\\script.js`中，57行 `<div class=\"article-share-links\">`下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：\n``` javascript\n'<a href=\"http://service.weibo.com/share/share.php?&title=好东西就要一起分享&language=zh_cn&url=' + encodedUrl + '\" class=\"article-share-sina\" target=\"_blank\" title=\"微博\"></a>',\n'<a href=\"http://share.renren.com/share/buttonshare.do?link=' + encodedUrl + '\" class=\"article-share-renren\" target=\"_blank\" title=\"人人\"></a>',\n'<a href=\"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=' + encodedUrl + '\" class=\"article-share-qq\" target=\"_blank\" title=\"QQ空间\"></a>',\n'<a href=\"http://qr.liantu.com/api.php?text=' + encodedUrl + '\" class=\"article-share-wechat\" target=\"_blank\" title=\"微信\"></a>',\n```\n同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 [Font Awesome](http://fontawesome.io/)，替换掉 `themes\\landscape\\source\\css\\fonts`中相关文件，并在`themes\\landscape\\source\\css\\_variables.styl `中27行的 `font-icon-version` 修改为最新的 Font Awesome 版本号。\n\n然后，在 `themes\\landscape\\source\\css\\_partial\\article.styl` 中，找到四段以 `.article-share-*** `开头的代码（273行起），添加如下内容：\n``` stylus\n.article-share-sina\n  @extend $article-share-link\n  &:before\n    content: \"\\f18a\"\n  &:hover\n    background: color-sina\n    text-shadow: 0 1px darken(color-sina, 20%)\n\n.article-share-qq\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d6\"\n  &:hover\n    background: color-qq\n    text-shadow: 0 1px darken(color-qq, 20%)\n\n.article-share-renren\n  @extend $article-share-link\n  &:before\n    content: \"\\f18b\"\n  &:hover\n    background: color-renren\n    text-shadow: 0 1px darken(color-renren, 20%)\n\n.article-share-wechat\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d7\"\n  &:hover\n    background: color-wechat\n    text-shadow: 0 1px darken(color-wechat, 20%)\n```\n\n最后，找到 `themes\\landscape\\source\\css\\_variables.styl` 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。\n``` stylus\ncolor-sina = #ff8140\ncolor-qq = #ffcc33\ncolor-renren = #227dc5\ncolor-wechat = #44b549\n```\n\n#### 2.2加入百度分享\n首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。\n``` bash\nbdshare_shortname: http://chaooo.github.io/\n```\n在百度分享获取代码后，代码可分为两部分。\n在`themes\\landscape\\layout\\_partial\\article.ejs`中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：\n``` html\n<% if ((page.layout == 'post'|| page.layout == 'page')){ %>\n<div class=\"bdsharebuttonbox\"><span style=\"float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;\">分享到：</span><a title=\"分享到新浪微博\" href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\"></a><a title=\"分享到QQ空间\" href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\"></a><a title=\"分享到微信\" href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\"></a><a title=\"分享到人人网\" href=\"#\" class=\"bds_renren\" data-cmd=\"renren\"></a><a title=\"分享到Facebook\" href=\"#\" class=\"bds_fbook\" data-cmd=\"fbook\"></a><a title=\"分享到一键分享\" href=\"#\" class=\"bds_mshare\" data-cmd=\"mshare\"></a><a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a></div>\n<% } else { %>\n<a data-url=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" class=\"article-share-link\"><%= __('share') %></a>\n<% } %>\n<!-- Baidu Share Start -->\n<script>window._bd_share_config={\"common\":{\"bdSnsKey\":{},\"bdText\":\"好东西就要一起分享~\",\"bdMini\":\"2\",\"bdMiniList\":[\"mshare\",\"qzone\",\"tsina\",\"weixin\",\"sqq\",\"douban\",\"tqq\",\"renren\",\"kaixin001\",\"tqf\",\"linkedin\",\"ty\",\"fbook\",\"twi\",\"copy\",\"print\"],\"bdPic\":\"\",\"bdStyle\":\"1\",\"bdSize\":\"16\"},\"share\":{},\"image\":{\"viewList\":[\"mshare\",\"weixin\",\"qzone\",\"tsina\"],\"viewText\":\"分享到：\",\"viewSize\":\"16\"},\"selectShare\":{\"bdContainerClass\":null,\"bdSelectMiniList\":[\"mshare\",\"weixin\",\"qzone\",\"tsina\"]}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>\n<!-- Baidu Share End -->\n```\n\n### 3.加入多说评论\n首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。\n``` bash\nduoshuo_shortname: http://chaooo.github.io/\n```\n如果使用的是默认的landscape主题只需要修改`themes\\landscape\\layout\\_partial\\article.ejs`中的disqus评论：\n``` html\n<% if (!index && post.comments && config.disqus_shortname){ %>\n <section id=\"comments\">\n   <div id=\"disqus_thread\">\n     <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n   </div>\n </section>\n <% } %>\n```\n改为多说评论：\n``` html\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n<section id=\"comments\">\n<!-- 多说评论框 start -->\n  <div class=\"ds-thread\" data-thread-key=\"<%= post.path %>\" data-title=\"<%= post.title %>\" data-url=\"<%= post.url %>\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"chaooo\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0] \n     || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n  </script>\n<!-- 多说公共JS代码 end -->\n</section>\n<% } %>\n```\n如果是其他主题，也只需要修改主题\\layout\\_partial\\comment.ejs\n注意`多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。`\n\n### 4. 侧栏微博秀\n\n登录[新浪微博开放平台](http://app.weibo.com/tool/weiboshow)来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。\n``` html\n<div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">微博</h3>\n    <div class=\"widget\" style=\"padding: 0\">\n        <iframe width=\"100%\" height=\"400\" class=\"share_self\"  frameborder=\"0\" scrolling=\"no\" src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=2&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,dddddd,555555,837f86,cccccc&dpc=1\"></iframe>\n    </div>\n</div>\n```\n其中，`<iframe...></iframe>`为获取微博秀的代码。","source":"_posts/Hexo博客优化--主题、分享、评论、微博秀.md","raw":"---\ntitle: Hexo博客优化——主题、分享、评论、微博秀\ndate: 2016-05-23 14:30:13\ntags: hexo\ncategories: hexo博客折腾\n---\n\n继上一篇[Hexo3.2+GitHub搭建静态博客](Hexo3-2-github搭建静态博客.html)。\n\n### 1.主题\nHexo提供了很多主题，具体可参见[Themes|Hexo](https://hexo.io/themes/)，这里我选择默认主题[landscape](https://github.com/hexojs/hexo-theme-landscape)(此主题默认已安装)。\n<!-- more --> \n#### 1.1安装主题\n将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：\n``` bash\n$ git clone https://github.com/hexojs/hexo-theme-landscape.git themes/landscape\n```\n获取landscape主题的最新版本：\n``` bash\n$ cd themes/landscape\n$ git pull\n```\n修改在根目录下_config.yml 配置：\n``` bash\ntheme: landscape\n```\n\n### 2.修改添加分享链接\n#### 2.1原生分享的修改\n在`themes\\landscape\\source\\js\\script.js`中，57行 `<div class=\"article-share-links\">`下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：\n``` javascript\n'<a href=\"http://service.weibo.com/share/share.php?&title=好东西就要一起分享&language=zh_cn&url=' + encodedUrl + '\" class=\"article-share-sina\" target=\"_blank\" title=\"微博\"></a>',\n'<a href=\"http://share.renren.com/share/buttonshare.do?link=' + encodedUrl + '\" class=\"article-share-renren\" target=\"_blank\" title=\"人人\"></a>',\n'<a href=\"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=' + encodedUrl + '\" class=\"article-share-qq\" target=\"_blank\" title=\"QQ空间\"></a>',\n'<a href=\"http://qr.liantu.com/api.php?text=' + encodedUrl + '\" class=\"article-share-wechat\" target=\"_blank\" title=\"微信\"></a>',\n```\n同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 [Font Awesome](http://fontawesome.io/)，替换掉 `themes\\landscape\\source\\css\\fonts`中相关文件，并在`themes\\landscape\\source\\css\\_variables.styl `中27行的 `font-icon-version` 修改为最新的 Font Awesome 版本号。\n\n然后，在 `themes\\landscape\\source\\css\\_partial\\article.styl` 中，找到四段以 `.article-share-*** `开头的代码（273行起），添加如下内容：\n``` stylus\n.article-share-sina\n  @extend $article-share-link\n  &:before\n    content: \"\\f18a\"\n  &:hover\n    background: color-sina\n    text-shadow: 0 1px darken(color-sina, 20%)\n\n.article-share-qq\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d6\"\n  &:hover\n    background: color-qq\n    text-shadow: 0 1px darken(color-qq, 20%)\n\n.article-share-renren\n  @extend $article-share-link\n  &:before\n    content: \"\\f18b\"\n  &:hover\n    background: color-renren\n    text-shadow: 0 1px darken(color-renren, 20%)\n\n.article-share-wechat\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d7\"\n  &:hover\n    background: color-wechat\n    text-shadow: 0 1px darken(color-wechat, 20%)\n```\n\n最后，找到 `themes\\landscape\\source\\css\\_variables.styl` 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。\n``` stylus\ncolor-sina = #ff8140\ncolor-qq = #ffcc33\ncolor-renren = #227dc5\ncolor-wechat = #44b549\n```\n\n#### 2.2加入百度分享\n首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。\n``` bash\nbdshare_shortname: http://chaooo.github.io/\n```\n在百度分享获取代码后，代码可分为两部分。\n在`themes\\landscape\\layout\\_partial\\article.ejs`中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：\n``` html\n<% if ((page.layout == 'post'|| page.layout == 'page')){ %>\n<div class=\"bdsharebuttonbox\"><span style=\"float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;\">分享到：</span><a title=\"分享到新浪微博\" href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\"></a><a title=\"分享到QQ空间\" href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\"></a><a title=\"分享到微信\" href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\"></a><a title=\"分享到人人网\" href=\"#\" class=\"bds_renren\" data-cmd=\"renren\"></a><a title=\"分享到Facebook\" href=\"#\" class=\"bds_fbook\" data-cmd=\"fbook\"></a><a title=\"分享到一键分享\" href=\"#\" class=\"bds_mshare\" data-cmd=\"mshare\"></a><a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a></div>\n<% } else { %>\n<a data-url=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" class=\"article-share-link\"><%= __('share') %></a>\n<% } %>\n<!-- Baidu Share Start -->\n<script>window._bd_share_config={\"common\":{\"bdSnsKey\":{},\"bdText\":\"好东西就要一起分享~\",\"bdMini\":\"2\",\"bdMiniList\":[\"mshare\",\"qzone\",\"tsina\",\"weixin\",\"sqq\",\"douban\",\"tqq\",\"renren\",\"kaixin001\",\"tqf\",\"linkedin\",\"ty\",\"fbook\",\"twi\",\"copy\",\"print\"],\"bdPic\":\"\",\"bdStyle\":\"1\",\"bdSize\":\"16\"},\"share\":{},\"image\":{\"viewList\":[\"mshare\",\"weixin\",\"qzone\",\"tsina\"],\"viewText\":\"分享到：\",\"viewSize\":\"16\"},\"selectShare\":{\"bdContainerClass\":null,\"bdSelectMiniList\":[\"mshare\",\"weixin\",\"qzone\",\"tsina\"]}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>\n<!-- Baidu Share End -->\n```\n\n### 3.加入多说评论\n首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。\n``` bash\nduoshuo_shortname: http://chaooo.github.io/\n```\n如果使用的是默认的landscape主题只需要修改`themes\\landscape\\layout\\_partial\\article.ejs`中的disqus评论：\n``` html\n<% if (!index && post.comments && config.disqus_shortname){ %>\n <section id=\"comments\">\n   <div id=\"disqus_thread\">\n     <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n   </div>\n </section>\n <% } %>\n```\n改为多说评论：\n``` html\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n<section id=\"comments\">\n<!-- 多说评论框 start -->\n  <div class=\"ds-thread\" data-thread-key=\"<%= post.path %>\" data-title=\"<%= post.title %>\" data-url=\"<%= post.url %>\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"chaooo\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0] \n     || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n  </script>\n<!-- 多说公共JS代码 end -->\n</section>\n<% } %>\n```\n如果是其他主题，也只需要修改主题\\layout\\_partial\\comment.ejs\n注意`多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。`\n\n### 4. 侧栏微博秀\n\n登录[新浪微博开放平台](http://app.weibo.com/tool/weiboshow)来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。\n``` html\n<div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">微博</h3>\n    <div class=\"widget\" style=\"padding: 0\">\n        <iframe width=\"100%\" height=\"400\" class=\"share_self\"  frameborder=\"0\" scrolling=\"no\" src=\"http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=400&fansRow=2&ptype=1&speed=0&skin=2&isTitle=0&noborder=0&isWeibo=1&isFans=0&uid=1700139362&verifier=85be6061&colors=d6f3f7,dddddd,555555,837f86,cccccc&dpc=1\"></iframe>\n    </div>\n</div>\n```\n其中，`<iframe...></iframe>`为获取微博秀的代码。","slug":"Hexo博客优化--主题、分享、评论、微博秀","published":1,"updated":"2017-07-30T07:21:47.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvrn0006v0uicspknpko","content":"<p>继上一篇<a href=\"Hexo3-2-github搭建静态博客.html\">Hexo3.2+GitHub搭建静态博客</a>。</p>\n<h3 id=\"1-主题\"><a href=\"#1-主题\" class=\"headerlink\" title=\"1.主题\"></a>1.主题</h3><p>Hexo提供了很多主题，具体可参见<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">Themes|Hexo</a>，这里我选择默认主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"external\">landscape</a>(此主题默认已安装)。<br><a id=\"more\"></a> </p>\n<h4 id=\"1-1安装主题\"><a href=\"#1-1安装主题\" class=\"headerlink\" title=\"1.1安装主题\"></a>1.1安装主题</h4><p>将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/hexojs/hexo-theme-landscape.git themes/landscape</div></pre></td></tr></table></figure></p>\n<p>获取landscape主题的最新版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes/landscape</div><div class=\"line\">$ git pull</div></pre></td></tr></table></figure></p>\n<p>修改在根目录下_config.yml 配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: landscape</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-修改添加分享链接\"><a href=\"#2-修改添加分享链接\" class=\"headerlink\" title=\"2.修改添加分享链接\"></a>2.修改添加分享链接</h3><h4 id=\"2-1原生分享的修改\"><a href=\"#2-1原生分享的修改\" class=\"headerlink\" title=\"2.1原生分享的修改\"></a>2.1原生分享的修改</h4><p>在<code>themes\\landscape\\source\\js\\script.js</code>中，57行 <code>&lt;div class=&quot;article-share-links&quot;&gt;</code>下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://service.weibo.com/share/share.php?&amp;title=好东西就要一起分享&amp;language=zh_cn&amp;url='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-sina\" target=\"_blank\" title=\"微博\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://share.renren.com/share/buttonshare.do?link='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-renren\" target=\"_blank\" title=\"人人\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-qq\" target=\"_blank\" title=\"QQ空间\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://qr.liantu.com/api.php?text='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-wechat\" target=\"_blank\" title=\"微信\"&gt;&lt;/a&gt;'</span>,</div></pre></td></tr></table></figure></p>\n<p>同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，替换掉 <code>themes\\landscape\\source\\css\\fonts</code>中相关文件，并在<code>themes\\landscape\\source\\css\\_variables.styl</code>中27行的 <code>font-icon-version</code> 修改为最新的 Font Awesome 版本号。</p>\n<p>然后，在 <code>themes\\landscape\\source\\css\\_partial\\article.styl</code> 中，找到四段以 <code>.article-share-***</code>开头的代码（273行起），添加如下内容：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">.article-share-sina</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f18a\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-sina</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-sina, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-qq</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f1d6\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-qq</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-qq, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-renren</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f18b\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-renren</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-renren, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-wechat</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f1d7\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-wechat</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-wechat, <span class=\"number\">20%</span>)</div></pre></td></tr></table></figure></p>\n<p>最后，找到 <code>themes\\landscape\\source\\css\\_variables.styl</code> 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">color</span>-sina = <span class=\"number\">#ff8140</span></div><div class=\"line\"><span class=\"attribute\">color</span>-qq = <span class=\"number\">#ffcc33</span></div><div class=\"line\"><span class=\"attribute\">color</span>-renren = <span class=\"number\">#227dc5</span></div><div class=\"line\"><span class=\"attribute\">color</span>-wechat = <span class=\"number\">#44b549</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2加入百度分享\"><a href=\"#2-2加入百度分享\" class=\"headerlink\" title=\"2.2加入百度分享\"></a>2.2加入百度分享</h4><p>首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bdshare_shortname: http://chaooo.github.io/</div></pre></td></tr></table></figure></p>\n<p>在百度分享获取代码后，代码可分为两部分。<br>在<code>themes\\landscape\\layout\\_partial\\article.ejs</code>中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> ((<span class=\"attr\">page.layout</span> == <span class=\"string\">'post'</span>|| <span class=\"attr\">page.layout</span> == <span class=\"string\">'page'</span>))&#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bdsharebuttonbox\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;\"</span>&gt;</span>分享到：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到新浪微博\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_tsina\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"tsina\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到QQ空间\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_qzone\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"qzone\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到微信\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_weixin\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"weixin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到人人网\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_renren\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"renren\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到Facebook\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_fbook\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"fbook\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到一键分享\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_mshare\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"mshare\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_more\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"more\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%- post.permalink %&gt;\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"&lt;%= post._id %&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-share-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">share</span>') %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Baidu Share Start --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>._bd_share_config=&#123;<span class=\"string\">\"common\"</span>:&#123;<span class=\"string\">\"bdSnsKey\"</span>:&#123;&#125;,<span class=\"string\">\"bdText\"</span>:<span class=\"string\">\"好东西就要一起分享~\"</span>,<span class=\"string\">\"bdMini\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"bdMiniList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"sqq\"</span>,<span class=\"string\">\"douban\"</span>,<span class=\"string\">\"tqq\"</span>,<span class=\"string\">\"renren\"</span>,<span class=\"string\">\"kaixin001\"</span>,<span class=\"string\">\"tqf\"</span>,<span class=\"string\">\"linkedin\"</span>,<span class=\"string\">\"ty\"</span>,<span class=\"string\">\"fbook\"</span>,<span class=\"string\">\"twi\"</span>,<span class=\"string\">\"copy\"</span>,<span class=\"string\">\"print\"</span>],<span class=\"string\">\"bdPic\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"bdStyle\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"bdSize\"</span>:<span class=\"string\">\"16\"</span>&#125;,<span class=\"string\">\"share\"</span>:&#123;&#125;,<span class=\"string\">\"image\"</span>:&#123;<span class=\"string\">\"viewList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>],<span class=\"string\">\"viewText\"</span>:<span class=\"string\">\"分享到：\"</span>,<span class=\"string\">\"viewSize\"</span>:<span class=\"string\">\"16\"</span>&#125;,<span class=\"string\">\"selectShare\"</span>:&#123;<span class=\"string\">\"bdContainerClass\"</span>:<span class=\"literal\">null</span>,<span class=\"string\">\"bdSelectMiniList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>]&#125;&#125;;<span class=\"keyword\">with</span>(<span class=\"built_in\">document</span>)<span class=\"number\">0</span>[(getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]||body).appendChild(createElement(<span class=\"string\">'script'</span>)).src=<span class=\"string\">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span>+~(-<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()/<span class=\"number\">36e5</span>)];</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Baidu Share End --&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-加入多说评论\"><a href=\"#3-加入多说评论\" class=\"headerlink\" title=\"3.加入多说评论\"></a>3.加入多说评论</h3><p>首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: http://chaooo.github.io/</div></pre></td></tr></table></figure></p>\n<p>如果使用的是默认的landscape主题只需要修改<code>themes\\landscape\\layout\\_partial\\article.ejs</code>中的disqus评论：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; <span class=\"attr\">config.disqus_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"disqus_thread\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>Please enable JavaScript to view the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//disqus.com/?ref_noscript\"</span>&gt;</span>comments powered by Disqus.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>改为多说评论：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; <span class=\"attr\">config.duoshuo_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= post.path %&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%= post.title %&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%= post.url %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> duoshuoQuery = &#123;<span class=\"attr\">short_name</span>:<span class=\"string\">\"chaooo\"</span>&#125;;</span></div><div class=\"line\"><span class=\"javascript\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></div><div class=\"line\"><span class=\"javascript\">    ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</span></div><div class=\"line\"><span class=\"javascript\">    ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</span></div><div class=\"line\"><span class=\"javascript\">    ds.charset = <span class=\"string\">'UTF-8'</span>;</span></div><div class=\"line\"><span class=\"javascript\">    (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>] </span></div><div class=\"line\"><span class=\"javascript\">     || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</span></div><div class=\"line\"><span class=\"undefined\">  &#125;)();</span></div><div class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果是其他主题，也只需要修改主题\\layout_partial\\comment.ejs<br>注意<code>多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。</code></p>\n<h3 id=\"4-侧栏微博秀\"><a href=\"#4-侧栏微博秀\" class=\"headerlink\" title=\"4. 侧栏微博秀\"></a>4. 侧栏微博秀</h3><p>登录<a href=\"http://app.weibo.com/tool/weiboshow\" target=\"_blank\" rel=\"external\">新浪微博开放平台</a>来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget-title\"</span>&gt;</span>微博<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding: 0\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"share_self\"</span>  <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,dddddd,555555,837f86,cccccc&amp;dpc=1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中，<code>&lt;iframe...&gt;&lt;/iframe&gt;</code>为获取微博秀的代码。</p>\n","site":{"data":{}},"excerpt":"<p>继上一篇<a href=\"Hexo3-2-github搭建静态博客.html\">Hexo3.2+GitHub搭建静态博客</a>。</p>\n<h3 id=\"1-主题\"><a href=\"#1-主题\" class=\"headerlink\" title=\"1.主题\"></a>1.主题</h3><p>Hexo提供了很多主题，具体可参见<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">Themes|Hexo</a>，这里我选择默认主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"external\">landscape</a>(此主题默认已安装)。<br>","more":"</p>\n<h4 id=\"1-1安装主题\"><a href=\"#1-1安装主题\" class=\"headerlink\" title=\"1.1安装主题\"></a>1.1安装主题</h4><p>将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/hexojs/hexo-theme-landscape.git themes/landscape</div></pre></td></tr></table></figure></p>\n<p>获取landscape主题的最新版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> themes/landscape</div><div class=\"line\">$ git pull</div></pre></td></tr></table></figure></p>\n<p>修改在根目录下_config.yml 配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: landscape</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-修改添加分享链接\"><a href=\"#2-修改添加分享链接\" class=\"headerlink\" title=\"2.修改添加分享链接\"></a>2.修改添加分享链接</h3><h4 id=\"2-1原生分享的修改\"><a href=\"#2-1原生分享的修改\" class=\"headerlink\" title=\"2.1原生分享的修改\"></a>2.1原生分享的修改</h4><p>在<code>themes\\landscape\\source\\js\\script.js</code>中，57行 <code>&lt;div class=&quot;article-share-links&quot;&gt;</code>下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://service.weibo.com/share/share.php?&amp;title=好东西就要一起分享&amp;language=zh_cn&amp;url='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-sina\" target=\"_blank\" title=\"微博\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://share.renren.com/share/buttonshare.do?link='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-renren\" target=\"_blank\" title=\"人人\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-qq\" target=\"_blank\" title=\"QQ空间\"&gt;&lt;/a&gt;'</span>,</div><div class=\"line\"><span class=\"string\">'&lt;a href=\"http://qr.liantu.com/api.php?text='</span> + encodedUrl + <span class=\"string\">'\" class=\"article-share-wechat\" target=\"_blank\" title=\"微信\"&gt;&lt;/a&gt;'</span>,</div></pre></td></tr></table></figure></p>\n<p>同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，替换掉 <code>themes\\landscape\\source\\css\\fonts</code>中相关文件，并在<code>themes\\landscape\\source\\css\\_variables.styl</code>中27行的 <code>font-icon-version</code> 修改为最新的 Font Awesome 版本号。</p>\n<p>然后，在 <code>themes\\landscape\\source\\css\\_partial\\article.styl</code> 中，找到四段以 <code>.article-share-***</code>开头的代码（273行起），添加如下内容：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">.article-share-sina</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f18a\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-sina</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-sina, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-qq</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f1d6\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-qq</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-qq, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-renren</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f18b\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-renren</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-renren, <span class=\"number\">20%</span>)</div><div class=\"line\"></div><div class=\"line\">.article-share-wechat</div><div class=\"line\">  @extend <span class=\"variable\">$article</span>-share-link</div><div class=\"line\">  &amp;:before</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\f1d7\"</span></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    <span class=\"attribute\">background</span>: color-wechat</div><div class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span> darken(color-wechat, <span class=\"number\">20%</span>)</div></pre></td></tr></table></figure></p>\n<p>最后，找到 <code>themes\\landscape\\source\\css\\_variables.styl</code> 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">color</span>-sina = <span class=\"number\">#ff8140</span></div><div class=\"line\"><span class=\"attribute\">color</span>-qq = <span class=\"number\">#ffcc33</span></div><div class=\"line\"><span class=\"attribute\">color</span>-renren = <span class=\"number\">#227dc5</span></div><div class=\"line\"><span class=\"attribute\">color</span>-wechat = <span class=\"number\">#44b549</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2加入百度分享\"><a href=\"#2-2加入百度分享\" class=\"headerlink\" title=\"2.2加入百度分享\"></a>2.2加入百度分享</h4><p>首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bdshare_shortname: http://chaooo.github.io/</div></pre></td></tr></table></figure></p>\n<p>在百度分享获取代码后，代码可分为两部分。<br>在<code>themes\\landscape\\layout\\_partial\\article.ejs</code>中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> ((<span class=\"attr\">page.layout</span> == <span class=\"string\">'post'</span>|| <span class=\"attr\">page.layout</span> == <span class=\"string\">'page'</span>))&#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bdsharebuttonbox\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;\"</span>&gt;</span>分享到：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到新浪微博\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_tsina\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"tsina\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到QQ空间\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_qzone\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"qzone\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到微信\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_weixin\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"weixin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到人人网\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_renren\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"renren\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到Facebook\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_fbook\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"fbook\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"分享到一键分享\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_mshare\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"mshare\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bds_more\"</span> <span class=\"attr\">data-cmd</span>=<span class=\"string\">\"more\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%- post.permalink %&gt;\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"&lt;%= post._id %&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-share-link\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">share</span>') %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Baidu Share Start --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>._bd_share_config=&#123;<span class=\"string\">\"common\"</span>:&#123;<span class=\"string\">\"bdSnsKey\"</span>:&#123;&#125;,<span class=\"string\">\"bdText\"</span>:<span class=\"string\">\"好东西就要一起分享~\"</span>,<span class=\"string\">\"bdMini\"</span>:<span class=\"string\">\"2\"</span>,<span class=\"string\">\"bdMiniList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"sqq\"</span>,<span class=\"string\">\"douban\"</span>,<span class=\"string\">\"tqq\"</span>,<span class=\"string\">\"renren\"</span>,<span class=\"string\">\"kaixin001\"</span>,<span class=\"string\">\"tqf\"</span>,<span class=\"string\">\"linkedin\"</span>,<span class=\"string\">\"ty\"</span>,<span class=\"string\">\"fbook\"</span>,<span class=\"string\">\"twi\"</span>,<span class=\"string\">\"copy\"</span>,<span class=\"string\">\"print\"</span>],<span class=\"string\">\"bdPic\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"bdStyle\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"bdSize\"</span>:<span class=\"string\">\"16\"</span>&#125;,<span class=\"string\">\"share\"</span>:&#123;&#125;,<span class=\"string\">\"image\"</span>:&#123;<span class=\"string\">\"viewList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>],<span class=\"string\">\"viewText\"</span>:<span class=\"string\">\"分享到：\"</span>,<span class=\"string\">\"viewSize\"</span>:<span class=\"string\">\"16\"</span>&#125;,<span class=\"string\">\"selectShare\"</span>:&#123;<span class=\"string\">\"bdContainerClass\"</span>:<span class=\"literal\">null</span>,<span class=\"string\">\"bdSelectMiniList\"</span>:[<span class=\"string\">\"mshare\"</span>,<span class=\"string\">\"weixin\"</span>,<span class=\"string\">\"qzone\"</span>,<span class=\"string\">\"tsina\"</span>]&#125;&#125;;<span class=\"keyword\">with</span>(<span class=\"built_in\">document</span>)<span class=\"number\">0</span>[(getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]||body).appendChild(createElement(<span class=\"string\">'script'</span>)).src=<span class=\"string\">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span>+~(-<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()/<span class=\"number\">36e5</span>)];</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Baidu Share End --&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-加入多说评论\"><a href=\"#3-加入多说评论\" class=\"headerlink\" title=\"3.加入多说评论\"></a>3.加入多说评论</h3><p>首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname: http://chaooo.github.io/</div></pre></td></tr></table></figure></p>\n<p>如果使用的是默认的landscape主题只需要修改<code>themes\\landscape\\layout\\_partial\\article.ejs</code>中的disqus评论：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; <span class=\"attr\">config.disqus_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"disqus_thread\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>Please enable JavaScript to view the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//disqus.com/?ref_noscript\"</span>&gt;</span>comments powered by Disqus.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>改为多说评论：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (!<span class=\"attr\">index</span> &amp;&amp; <span class=\"attr\">post.comments</span> &amp;&amp; <span class=\"attr\">config.duoshuo_shortname</span>)&#123; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= post.path %&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%= post.title %&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%= post.url %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> duoshuoQuery = &#123;<span class=\"attr\">short_name</span>:<span class=\"string\">\"chaooo\"</span>&#125;;</span></div><div class=\"line\"><span class=\"javascript\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></div><div class=\"line\"><span class=\"javascript\">    ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</span></div><div class=\"line\"><span class=\"javascript\">    ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</span></div><div class=\"line\"><span class=\"javascript\">    ds.charset = <span class=\"string\">'UTF-8'</span>;</span></div><div class=\"line\"><span class=\"javascript\">    (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>] </span></div><div class=\"line\"><span class=\"javascript\">     || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</span></div><div class=\"line\"><span class=\"undefined\">  &#125;)();</span></div><div class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果是其他主题，也只需要修改主题\\layout_partial\\comment.ejs<br>注意<code>多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。</code></p>\n<h3 id=\"4-侧栏微博秀\"><a href=\"#4-侧栏微博秀\" class=\"headerlink\" title=\"4. 侧栏微博秀\"></a>4. 侧栏微博秀</h3><p>登录<a href=\"http://app.weibo.com/tool/weiboshow\" target=\"_blank\" rel=\"external\">新浪微博开放平台</a>来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget-title\"</span>&gt;</span>微博<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding: 0\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"share_self\"</span>  <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,dddddd,555555,837f86,cccccc&amp;dpc=1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中，<code>&lt;iframe...&gt;&lt;/iframe&gt;</code>为获取微博秀的代码。</p>"},{"title":"Hexo博客优化——库、字体、收录、统计","date":"2016-05-24T03:22:56.000Z","_content":"\n### 1. jQuery 库的优化\nlandscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在`themes\\landscape\\layout\\_partial\\after-footer.ejs`17行：\n<!-- more --> \n``` bash\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n```\n替换为如下代码：\n``` bash\n<script src=\"http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\nif (typeof jQuery == 'undefined') {\n  document.write(unescape(\"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E\"));\n}\n// ]]>\n</script>\n```\n这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 `themes/landscape/source/js/`目录下，命名为 `jquery-2.0.3.min.js`。\n还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。\n\n### 2. 字体优化\n#### 2.1跨平台字体优化\n为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是`themes/landscape/source/css/_variables.styl`这一文件，将其中第22行:\n``` css\nfont-sans = \"Helvetica Neue\", Helvetica, Arial, sans-serif\n```\n改成如下内容：\n``` bash\nfont-sans = Tahoma, \"Helvetica Neue\", Helvetica, \"Hiragino Sans GB\", \"Microsoft YaHei Light\", \"Microsoft YaHei\", \"Source Han Sans CN\", \"WenQuanYi Micro Hei\", Arial, sans-serif\n```\n其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。\n\n#### 2.2代码等宽字体优化\n\nHexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在`themes/landscape/layout\\_partial\\head.ejs` 第31行:\n``` html\n<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=\"stylesheet\" type=\"text/css\">\n```\n改成如下内容：\n``` html\n<link href=\"http://fonts.useso.com/css?family=Source+Code+Pro\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n### 3. hexo提交搜索引擎（百度+谷歌）\n\n#### 3.1 确认博客是否被收录\n在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io\n``` bash\n    site:chaooo.github.io\n```\n#### 3.2 验证网站\n两个搜索引擎入口：\n[Google搜索引擎提交入口](https://www.google.com/webmasters/tools/home?hl=zh-CN)、[百度搜索引擎入口](http://zhanzhang.baidu.com/linksubmit/url)。\n不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的`source/`下面 。\n然后部署到服务器,输入地址：`http://chaooo.github.io/google4cc3eef6ff5975bf.html`和`http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html`能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。\n注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。\n则需要在Github里手动修改验证HTML文件，或者不编译。\n我的做法是，删除根目录`source/`下面刚拷贝的两个文件，和编译后生成的`public/`下的两个同名文件（若细心会注意到`source/`和`public/`下的两个同名文件大小不一样）。\n然后重新执行：\n``` bash\n    hexo generate -d\n```\n现在重新验证就通过了。\n\n#### 3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n``` bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n修改 hexo\\_config.yml 站点配置，添加：\n``` bash\n#Extensions\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\n#Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\n#sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n部署后,访问 `chaooo.github.io/sitemap.xml` 和 `chaooo.github.io/baidusitemap.xml `,就能看到有内容且第一行为:`该 XML 文件并未包含任何关联的样式信息。文档树显示如下。`,就说明成功了。\nRSS 也差不多，访问 `chaooo.github.io/atom.xml` ，能看到订阅信息。\n注意：把`chaooo.github.io`换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。\n\n#### 3.4 让谷歌收录我们的博客\n谷歌操作比较简单，就是向[Google站长工具](https://www.google.com/webmasters/tools/home?hl=zh-CN)提交sitemap。\n登录Google账号，添加了站点验证通过后，选择站点，之后在`抓取——站点地图`中就能看到`添加/测试站点地图`,然后输入`sitemap.xml`点击提交。\n\n#### 3.5 让百度收录我们的博客\n正常情况，是要等百度爬虫来爬到你的网站，才会被收录。\n但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。\n这就要使用到[百度站长平台](http://zhanzhang.baidu.com)。\n1.进入站点管理，找到`网页抓取——链接提交——详情`点进去。\n一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法\n\n##### 3.5.1 sitemap提交\n直接点击`sitemap`填写数据文件地址：`chaooo.github.io/baidusitemap.xml`,输入验证码提交。\n##### 3.5.2 自动推送\n自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到`\\themes\\landscape\\layout\\_partial\\after_footer.ejs`中的最下面就行。\n代码如下：\n``` javascript\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n[百度链接提交主动推送后不收录的原因](http://tengj.top/2016/03/14/baidunoshouluresson/)\n\n### 4. 开启谷歌统计(google analysis)\n\n先到[google analysis](https://analytics.google.com/)注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。\n``` javascript\n// 跟踪 ID\n// UA-58387143-1\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-58387143-1', 'auto');\n  ga('send', 'pageview');\n</script>\n```\n到`\\themes\\landscape\\layout\\_config.yml`中,将google analysis打开：\n``` bash\ngoogle_analytics:\n  enable: true\n  id: UA-58387143-1 #刚注册获取的ID\n```\n如果设置不起作用，检查在`themes\\pacman\\layout\\_partial\\`下有没有google_analytics.ejs ，有的话就在`\\themes\\landscape\\layout\\_partial\\head.ejs`的`</head>`之前，添加下面代码试试：\n``` php\n<%- partial('google_analytics') %>\n```\n若`themes\\pacman\\layout\\_partial\\`不存在google_analytics.ejs 文件，就手动创建：\n``` javascript\n<% if (theme.google_analytics){ %>\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n<!-- End Google Analytics -->\n<% } %>\n```\n最笨的方法就是删除`google_analytics.ejs`和刚在`_config.yml`配置google analysis的几行代码，直接从注册来的代码拷贝到`\\themes\\landscape\\layout\\_partial\\head.ejs`的`</head>`之前。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 5. 文章永久链接\n\n默认文章链结是以: `http://chaooo.github.io/2016/05/24/文章标题/` 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 `_config.yml` 文件里:\n``` bash\npermalink: :year/:month/:day/:title/\n```\n改为：\n``` bash\npermalink: :year/:month/:day/:title.html\n```\n最后浏览器访问就是`http://chaooo.github.io/2016/05/24/文章标题.html` 的格式了。\n\n","source":"_posts/Hexo博客优化--库、字体、收录、统计.md","raw":"---\ntitle: Hexo博客优化——库、字体、收录、统计\ndate: 2016-05-24 11:22:56\ntags: hexo\ncategories: hexo博客折腾\n---\n\n### 1. jQuery 库的优化\nlandscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在`themes\\landscape\\layout\\_partial\\after-footer.ejs`17行：\n<!-- more --> \n``` bash\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"></script>\n```\n替换为如下代码：\n``` bash\n<script src=\"http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\nif (typeof jQuery == 'undefined') {\n  document.write(unescape(\"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E\"));\n}\n// ]]>\n</script>\n```\n这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 `themes/landscape/source/js/`目录下，命名为 `jquery-2.0.3.min.js`。\n还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。\n\n### 2. 字体优化\n#### 2.1跨平台字体优化\n为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是`themes/landscape/source/css/_variables.styl`这一文件，将其中第22行:\n``` css\nfont-sans = \"Helvetica Neue\", Helvetica, Arial, sans-serif\n```\n改成如下内容：\n``` bash\nfont-sans = Tahoma, \"Helvetica Neue\", Helvetica, \"Hiragino Sans GB\", \"Microsoft YaHei Light\", \"Microsoft YaHei\", \"Source Han Sans CN\", \"WenQuanYi Micro Hei\", Arial, sans-serif\n```\n其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。\n\n#### 2.2代码等宽字体优化\n\nHexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在`themes/landscape/layout\\_partial\\head.ejs` 第31行:\n``` html\n<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=\"stylesheet\" type=\"text/css\">\n```\n改成如下内容：\n``` html\n<link href=\"http://fonts.useso.com/css?family=Source+Code+Pro\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n### 3. hexo提交搜索引擎（百度+谷歌）\n\n#### 3.1 确认博客是否被收录\n在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io\n``` bash\n    site:chaooo.github.io\n```\n#### 3.2 验证网站\n两个搜索引擎入口：\n[Google搜索引擎提交入口](https://www.google.com/webmasters/tools/home?hl=zh-CN)、[百度搜索引擎入口](http://zhanzhang.baidu.com/linksubmit/url)。\n不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的`source/`下面 。\n然后部署到服务器,输入地址：`http://chaooo.github.io/google4cc3eef6ff5975bf.html`和`http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html`能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。\n注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。\n则需要在Github里手动修改验证HTML文件，或者不编译。\n我的做法是，删除根目录`source/`下面刚拷贝的两个文件，和编译后生成的`public/`下的两个同名文件（若细心会注意到`source/`和`public/`下的两个同名文件大小不一样）。\n然后重新执行：\n``` bash\n    hexo generate -d\n```\n现在重新验证就通过了。\n\n#### 3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件\n``` bash\n$ npm install hexo-generator-feed --save\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap --save\n```\n修改 hexo\\_config.yml 站点配置，添加：\n``` bash\n#Extensions\nPlugins:\n  hexo-generator-feed\n  hexo-generator-sitemap\n  hexo-generator-baidu-sitemap\n\n#Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\n#sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n部署后,访问 `chaooo.github.io/sitemap.xml` 和 `chaooo.github.io/baidusitemap.xml `,就能看到有内容且第一行为:`该 XML 文件并未包含任何关联的样式信息。文档树显示如下。`,就说明成功了。\nRSS 也差不多，访问 `chaooo.github.io/atom.xml` ，能看到订阅信息。\n注意：把`chaooo.github.io`换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。\n\n#### 3.4 让谷歌收录我们的博客\n谷歌操作比较简单，就是向[Google站长工具](https://www.google.com/webmasters/tools/home?hl=zh-CN)提交sitemap。\n登录Google账号，添加了站点验证通过后，选择站点，之后在`抓取——站点地图`中就能看到`添加/测试站点地图`,然后输入`sitemap.xml`点击提交。\n\n#### 3.5 让百度收录我们的博客\n正常情况，是要等百度爬虫来爬到你的网站，才会被收录。\n但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。\n这就要使用到[百度站长平台](http://zhanzhang.baidu.com)。\n1.进入站点管理，找到`网页抓取——链接提交——详情`点进去。\n一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法\n\n##### 3.5.1 sitemap提交\n直接点击`sitemap`填写数据文件地址：`chaooo.github.io/baidusitemap.xml`,输入验证码提交。\n##### 3.5.2 自动推送\n自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到`\\themes\\landscape\\layout\\_partial\\after_footer.ejs`中的最下面就行。\n代码如下：\n``` javascript\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n[百度链接提交主动推送后不收录的原因](http://tengj.top/2016/03/14/baidunoshouluresson/)\n\n### 4. 开启谷歌统计(google analysis)\n\n先到[google analysis](https://analytics.google.com/)注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。\n``` javascript\n// 跟踪 ID\n// UA-58387143-1\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  ga('create', 'UA-58387143-1', 'auto');\n  ga('send', 'pageview');\n</script>\n```\n到`\\themes\\landscape\\layout\\_config.yml`中,将google analysis打开：\n``` bash\ngoogle_analytics:\n  enable: true\n  id: UA-58387143-1 #刚注册获取的ID\n```\n如果设置不起作用，检查在`themes\\pacman\\layout\\_partial\\`下有没有google_analytics.ejs ，有的话就在`\\themes\\landscape\\layout\\_partial\\head.ejs`的`</head>`之前，添加下面代码试试：\n``` php\n<%- partial('google_analytics') %>\n```\n若`themes\\pacman\\layout\\_partial\\`不存在google_analytics.ejs 文件，就手动创建：\n``` javascript\n<% if (theme.google_analytics){ %>\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n<!-- End Google Analytics -->\n<% } %>\n```\n最笨的方法就是删除`google_analytics.ejs`和刚在`_config.yml`配置google analysis的几行代码，直接从注册来的代码拷贝到`\\themes\\landscape\\layout\\_partial\\head.ejs`的`</head>`之前。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 5. 文章永久链接\n\n默认文章链结是以: `http://chaooo.github.io/2016/05/24/文章标题/` 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 `_config.yml` 文件里:\n``` bash\npermalink: :year/:month/:day/:title/\n```\n改为：\n``` bash\npermalink: :year/:month/:day/:title.html\n```\n最后浏览器访问就是`http://chaooo.github.io/2016/05/24/文章标题.html` 的格式了。\n\n","slug":"Hexo博客优化--库、字体、收录、统计","published":1,"updated":"2017-07-30T07:21:47.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvru0007v0ui1jm16zlz","content":"<h3 id=\"1-jQuery-库的优化\"><a href=\"#1-jQuery-库的优化\" class=\"headerlink\" title=\"1. jQuery 库的优化\"></a>1. jQuery 库的优化</h3><p>landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>17行：<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">//&lt;![CDATA[</div><div class=\"line\"><span class=\"keyword\">if</span> (typeof jQuery == <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">  document.write(unescape(<span class=\"string\">\"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E\"</span>));</div><div class=\"line\">&#125;</div><div class=\"line\">// ]]&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 <code>themes/landscape/source/js/</code>目录下，命名为 <code>jquery-2.0.3.min.js</code>。<br>还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。</p>\n<h3 id=\"2-字体优化\"><a href=\"#2-字体优化\" class=\"headerlink\" title=\"2. 字体优化\"></a>2. 字体优化</h3><h4 id=\"2-1跨平台字体优化\"><a href=\"#2-1跨平台字体优化\" class=\"headerlink\" title=\"2.1跨平台字体优化\"></a>2.1跨平台字体优化</h4><p>为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是<code>themes/landscape/source/css/_variables.styl</code>这一文件，将其中第22行:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = \"Helvetica Neue\", Helvetica, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>改成如下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = Tahoma, <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"Microsoft YaHei Light\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, <span class=\"string\">\"Source Han Sans CN\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span>, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。</p>\n<h4 id=\"2-2代码等宽字体优化\"><a href=\"#2-2代码等宽字体优化\" class=\"headerlink\" title=\"2.2代码等宽字体优化\"></a>2.2代码等宽字体优化</h4><p>Hexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在<code>themes/landscape/layout\\_partial\\head.ejs</code> 第31行:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//fonts.googleapis.com/css?family=Source+Code+Pro\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>改成如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://fonts.useso.com/css?family=Source+Code+Pro\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-hexo提交搜索引擎（百度-谷歌）\"><a href=\"#3-hexo提交搜索引擎（百度-谷歌）\" class=\"headerlink\" title=\"3. hexo提交搜索引擎（百度+谷歌）\"></a>3. hexo提交搜索引擎（百度+谷歌）</h3><h4 id=\"3-1-确认博客是否被收录\"><a href=\"#3-1-确认博客是否被收录\" class=\"headerlink\" title=\"3.1 确认博客是否被收录\"></a>3.1 确认博客是否被收录</h4><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">site:chaooo.github.io</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-2-验证网站\"><a href=\"#3-2-验证网站\" class=\"headerlink\" title=\"3.2 验证网站\"></a>3.2 验证网站</h4><p>两个搜索引擎入口：<br><a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"external\">Google搜索引擎提交入口</a>、<a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"external\">百度搜索引擎入口</a>。<br>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>source/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaooo.github.io/google4cc3eef6ff5975bf.html</code>和<code>http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。<br>注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。<br>则需要在Github里手动修改验证HTML文件，或者不编译。<br>我的做法是，删除根目录<code>source/</code>下面刚拷贝的两个文件，和编译后生成的<code>public/</code>下的两个同名文件（若细心会注意到<code>source/</code>和<code>public/</code>下的两个同名文件大小不一样）。<br>然后重新执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate -d</div></pre></td></tr></table></figure></p>\n<p>现在重新验证就通过了。</p>\n<h4 id=\"3-3-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#3-3-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div><div class=\"line\">$ npm install hexo-generator-sitemap --save</div><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<p>修改 hexo_config.yml 站点配置，添加：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Extensions</span></div><div class=\"line\">Plugins:</div><div class=\"line\">  hexo-generator-feed</div><div class=\"line\">  hexo-generator-sitemap</div><div class=\"line\">  hexo-generator-baidu-sitemap</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Feed Atom</span></div><div class=\"line\">feed:</div><div class=\"line\">  <span class=\"built_in\">type</span>: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  <span class=\"built_in\">limit</span>: 20</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#sitemap</span></div><div class=\"line\">sitemap:</div><div class=\"line\">  path: sitemap.xml</div><div class=\"line\">baidusitemap:</div><div class=\"line\">  path: baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<p>部署后,访问 <code>chaooo.github.io/sitemap.xml</code> 和 <code>chaooo.github.io/baidusitemap.xml</code>,就能看到有内容且第一行为:<code>该 XML 文件并未包含任何关联的样式信息。文档树显示如下。</code>,就说明成功了。<br>RSS 也差不多，访问 <code>chaooo.github.io/atom.xml</code> ，能看到订阅信息。<br>注意：把<code>chaooo.github.io</code>换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。</p>\n<h4 id=\"3-4-让谷歌收录我们的博客\"><a href=\"#3-4-让谷歌收录我们的博客\" class=\"headerlink\" title=\"3.4 让谷歌收录我们的博客\"></a>3.4 让谷歌收录我们的博客</h4><p>谷歌操作比较简单，就是向<a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"external\">Google站长工具</a>提交sitemap。<br>登录Google账号，添加了站点验证通过后，选择站点，之后在<code>抓取——站点地图</code>中就能看到<code>添加/测试站点地图</code>,然后输入<code>sitemap.xml</code>点击提交。</p>\n<h4 id=\"3-5-让百度收录我们的博客\"><a href=\"#3-5-让百度收录我们的博客\" class=\"headerlink\" title=\"3.5 让百度收录我们的博客\"></a>3.5 让百度收录我们的博客</h4><p>正常情况，是要等百度爬虫来爬到你的网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。<br>这就要使用到<a href=\"http://zhanzhang.baidu.com\" target=\"_blank\" rel=\"external\">百度站长平台</a>。<br>1.进入站点管理，找到<code>网页抓取——链接提交——详情</code>点进去。<br>一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法</p>\n<h5 id=\"3-5-1-sitemap提交\"><a href=\"#3-5-1-sitemap提交\" class=\"headerlink\" title=\"3.5.1 sitemap提交\"></a>3.5.1 sitemap提交</h5><p>直接点击<code>sitemap</code>填写数据文件地址：<code>chaooo.github.io/baidusitemap.xml</code>,输入验证码提交。</p>\n<h5 id=\"3-5-2-自动推送\"><a href=\"#3-5-2-自动推送\" class=\"headerlink\" title=\"3.5.2 自动推送\"></a>3.5.2 自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\\themes\\landscape\\layout\\_partial\\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"built_in\">window</span>.location.protocol.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">'https'</span>) &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://tengj.top/2016/03/14/baidunoshouluresson/\" target=\"_blank\" rel=\"external\">百度链接提交主动推送后不收录的原因</a></p>\n<h3 id=\"4-开启谷歌统计-google-analysis\"><a href=\"#4-开启谷歌统计-google-analysis\" class=\"headerlink\" title=\"4. 开启谷歌统计(google analysis)\"></a>4. 开启谷歌统计(google analysis)</h3><p>先到<a href=\"https://analytics.google.com/\" target=\"_blank\" rel=\"external\">google analysis</a>注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 跟踪 ID</span></div><div class=\"line\"><span class=\"comment\">// UA-58387143-1</span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  (i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),</div><div class=\"line\">  m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"string\">'ga'</span>);</div><div class=\"line\">  ga(<span class=\"string\">'create'</span>, <span class=\"string\">'UA-58387143-1'</span>, <span class=\"string\">'auto'</span>);</div><div class=\"line\">  ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>到<code>\\themes\\landscape\\layout\\_config.yml</code>中,将google analysis打开：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">google_analytics:</div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  id: UA-58387143-1 <span class=\"comment\">#刚注册获取的ID</span></div></pre></td></tr></table></figure></p>\n<p>如果设置不起作用，检查在<code>themes\\pacman\\layout\\_partial\\</code>下有没有google_analytics.ejs ，有的话就在<code>\\themes\\landscape\\layout\\_partial\\head.ejs</code>的<code>&lt;/head&gt;</code>之前，添加下面代码试试：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(<span class=\"string\">'google_analytics'</span>) %&gt;</div></pre></td></tr></table></figure></p>\n<p>若<code>themes\\pacman\\layout\\_partial\\</code>不存在google_analytics.ejs 文件，就手动创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.google_analytics)&#123; %&gt;</div><div class=\"line\">&lt;!-- Google Analytics --&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">(i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),</div><div class=\"line\">m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'//www.google-analytics.com/analytics.js'</span>,<span class=\"string\">'ga'</span>);</div><div class=\"line\">ga(<span class=\"string\">'create'</span>, <span class=\"string\">'&lt;%= theme.google_analytics %&gt;'</span>, <span class=\"string\">'auto'</span>);</div><div class=\"line\">ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;!-- End Google Analytics --&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;% &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>最笨的方法就是删除<code>google_analytics.ejs</code>和刚在<code>_config.yml</code>配置google analysis的几行代码，直接从注册来的代码拷贝到<code>\\themes\\landscape\\layout\\_partial\\head.ejs</code>的<code>&lt;/head&gt;</code>之前。</p>\n<h3 id=\"5-文章永久链接\"><a href=\"#5-文章永久链接\" class=\"headerlink\" title=\"5. 文章永久链接\"></a>5. 文章永久链接</h3><p>默认文章链结是以: <code>http://chaooo.github.io/2016/05/24/文章标题/</code> 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 <code>_config.yml</code> 文件里:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:title/</div></pre></td></tr></table></figure></p>\n<p>改为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:title.html</div></pre></td></tr></table></figure></p>\n<p>最后浏览器访问就是<code>http://chaooo.github.io/2016/05/24/文章标题.html</code> 的格式了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-jQuery-库的优化\"><a href=\"#1-jQuery-库的优化\" class=\"headerlink\" title=\"1. jQuery 库的优化\"></a>1. jQuery 库的优化</h3><p>landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>17行：<br>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">//&lt;![CDATA[</div><div class=\"line\"><span class=\"keyword\">if</span> (typeof jQuery == <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">  document.write(unescape(<span class=\"string\">\"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E\"</span>));</div><div class=\"line\">&#125;</div><div class=\"line\">// ]]&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 <code>themes/landscape/source/js/</code>目录下，命名为 <code>jquery-2.0.3.min.js</code>。<br>还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。</p>\n<h3 id=\"2-字体优化\"><a href=\"#2-字体优化\" class=\"headerlink\" title=\"2. 字体优化\"></a>2. 字体优化</h3><h4 id=\"2-1跨平台字体优化\"><a href=\"#2-1跨平台字体优化\" class=\"headerlink\" title=\"2.1跨平台字体优化\"></a>2.1跨平台字体优化</h4><p>为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是<code>themes/landscape/source/css/_variables.styl</code>这一文件，将其中第22行:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = \"Helvetica Neue\", Helvetica, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>改成如下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">font-sans = Tahoma, <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"Microsoft YaHei Light\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, <span class=\"string\">\"Source Han Sans CN\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span>, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。</p>\n<h4 id=\"2-2代码等宽字体优化\"><a href=\"#2-2代码等宽字体优化\" class=\"headerlink\" title=\"2.2代码等宽字体优化\"></a>2.2代码等宽字体优化</h4><p>Hexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在<code>themes/landscape/layout\\_partial\\head.ejs</code> 第31行:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//fonts.googleapis.com/css?family=Source+Code+Pro\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>改成如下内容：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://fonts.useso.com/css?family=Source+Code+Pro\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-hexo提交搜索引擎（百度-谷歌）\"><a href=\"#3-hexo提交搜索引擎（百度-谷歌）\" class=\"headerlink\" title=\"3. hexo提交搜索引擎（百度+谷歌）\"></a>3. hexo提交搜索引擎（百度+谷歌）</h3><h4 id=\"3-1-确认博客是否被收录\"><a href=\"#3-1-确认博客是否被收录\" class=\"headerlink\" title=\"3.1 确认博客是否被收录\"></a>3.1 确认博客是否被收录</h4><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">site:chaooo.github.io</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-2-验证网站\"><a href=\"#3-2-验证网站\" class=\"headerlink\" title=\"3.2 验证网站\"></a>3.2 验证网站</h4><p>两个搜索引擎入口：<br><a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"external\">Google搜索引擎提交入口</a>、<a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"external\">百度搜索引擎入口</a>。<br>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>source/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaooo.github.io/google4cc3eef6ff5975bf.html</code>和<code>http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。<br>注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。<br>则需要在Github里手动修改验证HTML文件，或者不编译。<br>我的做法是，删除根目录<code>source/</code>下面刚拷贝的两个文件，和编译后生成的<code>public/</code>下的两个同名文件（若细心会注意到<code>source/</code>和<code>public/</code>下的两个同名文件大小不一样）。<br>然后重新执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate -d</div></pre></td></tr></table></figure></p>\n<p>现在重新验证就通过了。</p>\n<h4 id=\"3-3-安装-RSS-订阅-和-sitemap-网站地图-插件\"><a href=\"#3-3-安装-RSS-订阅-和-sitemap-网站地图-插件\" class=\"headerlink\" title=\"3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件\"></a>3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-feed --save</div><div class=\"line\">$ npm install hexo-generator-sitemap --save</div><div class=\"line\">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<p>修改 hexo_config.yml 站点配置，添加：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Extensions</span></div><div class=\"line\">Plugins:</div><div class=\"line\">  hexo-generator-feed</div><div class=\"line\">  hexo-generator-sitemap</div><div class=\"line\">  hexo-generator-baidu-sitemap</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Feed Atom</span></div><div class=\"line\">feed:</div><div class=\"line\">  <span class=\"built_in\">type</span>: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  <span class=\"built_in\">limit</span>: 20</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#sitemap</span></div><div class=\"line\">sitemap:</div><div class=\"line\">  path: sitemap.xml</div><div class=\"line\">baidusitemap:</div><div class=\"line\">  path: baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<p>部署后,访问 <code>chaooo.github.io/sitemap.xml</code> 和 <code>chaooo.github.io/baidusitemap.xml</code>,就能看到有内容且第一行为:<code>该 XML 文件并未包含任何关联的样式信息。文档树显示如下。</code>,就说明成功了。<br>RSS 也差不多，访问 <code>chaooo.github.io/atom.xml</code> ，能看到订阅信息。<br>注意：把<code>chaooo.github.io</code>换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。</p>\n<h4 id=\"3-4-让谷歌收录我们的博客\"><a href=\"#3-4-让谷歌收录我们的博客\" class=\"headerlink\" title=\"3.4 让谷歌收录我们的博客\"></a>3.4 让谷歌收录我们的博客</h4><p>谷歌操作比较简单，就是向<a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\" target=\"_blank\" rel=\"external\">Google站长工具</a>提交sitemap。<br>登录Google账号，添加了站点验证通过后，选择站点，之后在<code>抓取——站点地图</code>中就能看到<code>添加/测试站点地图</code>,然后输入<code>sitemap.xml</code>点击提交。</p>\n<h4 id=\"3-5-让百度收录我们的博客\"><a href=\"#3-5-让百度收录我们的博客\" class=\"headerlink\" title=\"3.5 让百度收录我们的博客\"></a>3.5 让百度收录我们的博客</h4><p>正常情况，是要等百度爬虫来爬到你的网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。<br>这就要使用到<a href=\"http://zhanzhang.baidu.com\" target=\"_blank\" rel=\"external\">百度站长平台</a>。<br>1.进入站点管理，找到<code>网页抓取——链接提交——详情</code>点进去。<br>一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法</p>\n<h5 id=\"3-5-1-sitemap提交\"><a href=\"#3-5-1-sitemap提交\" class=\"headerlink\" title=\"3.5.1 sitemap提交\"></a>3.5.1 sitemap提交</h5><p>直接点击<code>sitemap</code>填写数据文件地址：<code>chaooo.github.io/baidusitemap.xml</code>,输入验证码提交。</p>\n<h5 id=\"3-5-2-自动推送\"><a href=\"#3-5-2-自动推送\" class=\"headerlink\" title=\"3.5.2 自动推送\"></a>3.5.2 自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\\themes\\landscape\\layout\\_partial\\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"built_in\">window</span>.location.protocol.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">'https'</span>) &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://tengj.top/2016/03/14/baidunoshouluresson/\" target=\"_blank\" rel=\"external\">百度链接提交主动推送后不收录的原因</a></p>\n<h3 id=\"4-开启谷歌统计-google-analysis\"><a href=\"#4-开启谷歌统计-google-analysis\" class=\"headerlink\" title=\"4. 开启谷歌统计(google analysis)\"></a>4. 开启谷歌统计(google analysis)</h3><p>先到<a href=\"https://analytics.google.com/\" target=\"_blank\" rel=\"external\">google analysis</a>注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 跟踪 ID</span></div><div class=\"line\"><span class=\"comment\">// UA-58387143-1</span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  (i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),</div><div class=\"line\">  m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"string\">'ga'</span>);</div><div class=\"line\">  ga(<span class=\"string\">'create'</span>, <span class=\"string\">'UA-58387143-1'</span>, <span class=\"string\">'auto'</span>);</div><div class=\"line\">  ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>到<code>\\themes\\landscape\\layout\\_config.yml</code>中,将google analysis打开：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">google_analytics:</div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  id: UA-58387143-1 <span class=\"comment\">#刚注册获取的ID</span></div></pre></td></tr></table></figure></p>\n<p>如果设置不起作用，检查在<code>themes\\pacman\\layout\\_partial\\</code>下有没有google_analytics.ejs ，有的话就在<code>\\themes\\landscape\\layout\\_partial\\head.ejs</code>的<code>&lt;/head&gt;</code>之前，添加下面代码试试：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(<span class=\"string\">'google_analytics'</span>) %&gt;</div></pre></td></tr></table></figure></p>\n<p>若<code>themes\\pacman\\layout\\_partial\\</code>不存在google_analytics.ejs 文件，就手动创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.google_analytics)&#123; %&gt;</div><div class=\"line\">&lt;!-- Google Analytics --&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class=\"string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">(i[r].q=i[r].q||[]).push(<span class=\"built_in\">arguments</span>)&#125;,i[r].l=<span class=\"number\">1</span>*<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();a=s.createElement(o),</div><div class=\"line\">m=s.getElementsByTagName(o)[<span class=\"number\">0</span>];a.async=<span class=\"number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'//www.google-analytics.com/analytics.js'</span>,<span class=\"string\">'ga'</span>);</div><div class=\"line\">ga(<span class=\"string\">'create'</span>, <span class=\"string\">'&lt;%= theme.google_analytics %&gt;'</span>, <span class=\"string\">'auto'</span>);</div><div class=\"line\">ga(<span class=\"string\">'send'</span>, <span class=\"string\">'pageview'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;!-- End Google Analytics --&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;% &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>最笨的方法就是删除<code>google_analytics.ejs</code>和刚在<code>_config.yml</code>配置google analysis的几行代码，直接从注册来的代码拷贝到<code>\\themes\\landscape\\layout\\_partial\\head.ejs</code>的<code>&lt;/head&gt;</code>之前。</p>\n<h3 id=\"5-文章永久链接\"><a href=\"#5-文章永久链接\" class=\"headerlink\" title=\"5. 文章永久链接\"></a>5. 文章永久链接</h3><p>默认文章链结是以: <code>http://chaooo.github.io/2016/05/24/文章标题/</code> 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 <code>_config.yml</code> 文件里:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:title/</div></pre></td></tr></table></figure></p>\n<p>改为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink: :year/:month/:day/:title.html</div></pre></td></tr></table></figure></p>\n<p>最后浏览器访问就是<code>http://chaooo.github.io/2016/05/24/文章标题.html</code> 的格式了。</p>"},{"title":"Hexo博客优化——站内搜索、版权、IE8兼容","date":"2016-05-25T02:03:15.000Z","_content":"\n### 1.添加Hexo的swiftype站内搜索\n先去[swiftype官网](https://swiftype.com)注册一个账号,然后根据指引建立好自己网站对应的索引。\n<!-- more --> \n步骤：\n     `Create an engine` \n---> `Create a search engine >(standard web crawler)` \n---> `WEBSITE URL`下填写你的网站地址：如：[http://chaooo.github.io](http://chaooo.github.io)\n---> `ENGINE NAME`自己取一个名字：如：chaooo\n---> 然后他开始抓取你网站的数据。\n---> 完成后，可以点击`Content`去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）\n---> 点击`Install Search`复制里面的代码：\n\n然后在`themes\\landscape\\layout\\_partial\\after-footer.ejs`在最后加上刚复制的代码：\n``` js\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st'); \n\n  _st('install','Hvy4-e-Ew4x8PR6Let84','2.0.0');\n</script>\n```\n在`themes\\landscape\\_config.yml`末尾添加如下代码：\n``` bash\n  swift_search:\n    enable: true\n```\n\n然后到`themes\\landscape\\layout\\_partial\\header.ejs`中找到：`<div id=\"search-form-wrap\">...</div>`刪除里面的內容，插入如下代码：\n``` html\n<div id=\"search-form-wrap\">\n  <form action=\"\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\">\n    <input autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" name=\"q\" results=\"0\" id=\"search\" maxlength=\"20\" placeholder=\"Search\" style=\"border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;\" class=\"st-default-search-input search-form-input\" type=\"text\">\n    <button type=\"submit\" class=\"search-form-submit\"></button>\n  </form>\n</div>\n```\n\n然后到`themes\\landscape\\source\\css\\_partial\\header.styl`找到`#search-form-wrap`对其样式微调，大概在118行，修改后的值：\n``` css\n#search-form-wrap\n  position: absolute\n  top: 14px\n  width: 200px\n  height: 30px\n  right: 35px\n  opacity: 0\n  visibility: hidden\n  transition: 0.2s ease-out\n  transform: scale(.5) translate(94px, 0)\n  &.on\n    opacity: 1\n    visibility: visible\n    transform: scale(1) translate(0, 0)\n  @media mq-mobile\n    width: 80%\n    right: -80%\n```\n然后到`themes\\landscape\\source\\css\\_partial\\header.styl`找到`.nav-icon`，大概在81行，在其后面添加(z-index: 1)：\n``` css\n.nav-icon\n  @extend $nav-link\n  font-family: font-icon\n  text-align: center\n  font-size: font-size\n  width: font-size\n  height: font-size\n  padding: 20px 15px\n  position: relative\n  cursor: pointer\n  z-index: 1\n```\n\n注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome--v49，Firefox Developer Edition--v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）\n\n### 2. 页尾版权信息修改\n\n在`themes\\landscape\\layout\\_partial\\footer.ejs`中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：\n``` html\n<div id=\"footer-info\" class=\"inner\" style=\"text-align:center;\">\n  Copyright &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %><br>\n  <%= __('powered_by') %> <a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a><br>\n    <a href=\"/baidusitemap.xml\">网站地图</a>&nbsp; &nbsp;|&nbsp; &nbsp;<a href=\"/atom.xml\">订阅本站</a>&nbsp; &nbsp;|&nbsp; &nbsp;<a href=\"mailto:zhenggchaoo@gmail.com\" target=\"_blank\">联系博主</a>           \n</div>\n```\n\n### 3. 对于低版本IE布局微调\n#### 3.1 加入低版本IE浏览器提醒\n\nHexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在`themes\\landscape\\layout\\_partial\\header.ejs`中找到`<div id=\"header-outer\" class=\"outer\"></div>`以其为父元素添加：\n``` html\n<!--[if lt IE 9]>\n  <style>    \n    .hid-ltIE9{position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;}\n    .hid-ltIE9 a{color:#258fb8;text-decoration:none;}\n    .hid-ltIE9 a:hover{text-decoration:underline;}\n    .hid-exclamation-triangle,.hid-chrome,.hid-firefox{font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;}\n    .hid-exclamation-triangle:before{content:\"\\f071\";}\n    .hid-chrome:before{content:\"\\f268\";}\n    .hid-firefox:before{content:\"\\f269\";}\n  </style>\n  <p class=\"hid-ltIE9\">\n    <i class=\"hid-exclamation-triangle\" aria-hidden=\"true\"></i>重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：\n    <a href=\"https://www.google.cn/intl/zh-CN/chrome/browser/desktop/\" title=\"谷歌Chrome浏览器\"><i class=\"hid-chrome\" aria-hidden=\"true\"></i>\n  Chrome</a>、\n    <a href=\"http://www.firefox.com.cn/download/\"title=\"火狐Firefox浏览器\"><i class=\"hid-firefox\" aria-hidden=\"true\"></i>Firefox</a>\n  </p>\n<![endif]-->\n```\n这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。\n\n#### 3.2 (对于旧IE)header与footer布局微调\n发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。\n在`themes\\landscape\\layout\\_partial\\header.ejs`中，把`<header id=\"header\"></div>`用下面的代码包起来：\n``` html\n    <!--[if lt IE 9]><div id=\"header\"><![endif]-->\n    <header id=\"header\">\n       //....其他代码\n    </header>\n    <!--[if lt IE 9]></div><![endif]-->\n```\n在`themes\\landscape\\layout\\_partial\\footer.ejs`中，把`<header id=\"footer\"></div>`用下面的代码包起来：\n``` html\n<!--[if lt IE 9]><div id=\"footer\"><![endif]-->\n<footer id=\"footer\">\n   //....其他代码\n</footer>\n<!--[if lt IE 9]></div><![endif]-->\n```\n虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。","source":"_posts/Hexo博客优化--站内搜索、版权、IE8兼容.md","raw":"---\ntitle: Hexo博客优化——站内搜索、版权、IE8兼容\ndate: 2016-05-25 10:03:15\ntags: hexo\ncategories: hexo博客折腾\n---\n\n### 1.添加Hexo的swiftype站内搜索\n先去[swiftype官网](https://swiftype.com)注册一个账号,然后根据指引建立好自己网站对应的索引。\n<!-- more --> \n步骤：\n     `Create an engine` \n---> `Create a search engine >(standard web crawler)` \n---> `WEBSITE URL`下填写你的网站地址：如：[http://chaooo.github.io](http://chaooo.github.io)\n---> `ENGINE NAME`自己取一个名字：如：chaooo\n---> 然后他开始抓取你网站的数据。\n---> 完成后，可以点击`Content`去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）\n---> 点击`Install Search`复制里面的代码：\n\n然后在`themes\\landscape\\layout\\_partial\\after-footer.ejs`在最后加上刚复制的代码：\n``` js\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st'); \n\n  _st('install','Hvy4-e-Ew4x8PR6Let84','2.0.0');\n</script>\n```\n在`themes\\landscape\\_config.yml`末尾添加如下代码：\n``` bash\n  swift_search:\n    enable: true\n```\n\n然后到`themes\\landscape\\layout\\_partial\\header.ejs`中找到：`<div id=\"search-form-wrap\">...</div>`刪除里面的內容，插入如下代码：\n``` html\n<div id=\"search-form-wrap\">\n  <form action=\"\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\">\n    <input autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" name=\"q\" results=\"0\" id=\"search\" maxlength=\"20\" placeholder=\"Search\" style=\"border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;\" class=\"st-default-search-input search-form-input\" type=\"text\">\n    <button type=\"submit\" class=\"search-form-submit\"></button>\n  </form>\n</div>\n```\n\n然后到`themes\\landscape\\source\\css\\_partial\\header.styl`找到`#search-form-wrap`对其样式微调，大概在118行，修改后的值：\n``` css\n#search-form-wrap\n  position: absolute\n  top: 14px\n  width: 200px\n  height: 30px\n  right: 35px\n  opacity: 0\n  visibility: hidden\n  transition: 0.2s ease-out\n  transform: scale(.5) translate(94px, 0)\n  &.on\n    opacity: 1\n    visibility: visible\n    transform: scale(1) translate(0, 0)\n  @media mq-mobile\n    width: 80%\n    right: -80%\n```\n然后到`themes\\landscape\\source\\css\\_partial\\header.styl`找到`.nav-icon`，大概在81行，在其后面添加(z-index: 1)：\n``` css\n.nav-icon\n  @extend $nav-link\n  font-family: font-icon\n  text-align: center\n  font-size: font-size\n  width: font-size\n  height: font-size\n  padding: 20px 15px\n  position: relative\n  cursor: pointer\n  z-index: 1\n```\n\n注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome--v49，Firefox Developer Edition--v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）\n\n### 2. 页尾版权信息修改\n\n在`themes\\landscape\\layout\\_partial\\footer.ejs`中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：\n``` html\n<div id=\"footer-info\" class=\"inner\" style=\"text-align:center;\">\n  Copyright &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %><br>\n  <%= __('powered_by') %> <a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a><br>\n    <a href=\"/baidusitemap.xml\">网站地图</a>&nbsp; &nbsp;|&nbsp; &nbsp;<a href=\"/atom.xml\">订阅本站</a>&nbsp; &nbsp;|&nbsp; &nbsp;<a href=\"mailto:zhenggchaoo@gmail.com\" target=\"_blank\">联系博主</a>           \n</div>\n```\n\n### 3. 对于低版本IE布局微调\n#### 3.1 加入低版本IE浏览器提醒\n\nHexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在`themes\\landscape\\layout\\_partial\\header.ejs`中找到`<div id=\"header-outer\" class=\"outer\"></div>`以其为父元素添加：\n``` html\n<!--[if lt IE 9]>\n  <style>    \n    .hid-ltIE9{position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;}\n    .hid-ltIE9 a{color:#258fb8;text-decoration:none;}\n    .hid-ltIE9 a:hover{text-decoration:underline;}\n    .hid-exclamation-triangle,.hid-chrome,.hid-firefox{font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;}\n    .hid-exclamation-triangle:before{content:\"\\f071\";}\n    .hid-chrome:before{content:\"\\f268\";}\n    .hid-firefox:before{content:\"\\f269\";}\n  </style>\n  <p class=\"hid-ltIE9\">\n    <i class=\"hid-exclamation-triangle\" aria-hidden=\"true\"></i>重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：\n    <a href=\"https://www.google.cn/intl/zh-CN/chrome/browser/desktop/\" title=\"谷歌Chrome浏览器\"><i class=\"hid-chrome\" aria-hidden=\"true\"></i>\n  Chrome</a>、\n    <a href=\"http://www.firefox.com.cn/download/\"title=\"火狐Firefox浏览器\"><i class=\"hid-firefox\" aria-hidden=\"true\"></i>Firefox</a>\n  </p>\n<![endif]-->\n```\n这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。\n\n#### 3.2 (对于旧IE)header与footer布局微调\n发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。\n在`themes\\landscape\\layout\\_partial\\header.ejs`中，把`<header id=\"header\"></div>`用下面的代码包起来：\n``` html\n    <!--[if lt IE 9]><div id=\"header\"><![endif]-->\n    <header id=\"header\">\n       //....其他代码\n    </header>\n    <!--[if lt IE 9]></div><![endif]-->\n```\n在`themes\\landscape\\layout\\_partial\\footer.ejs`中，把`<header id=\"footer\"></div>`用下面的代码包起来：\n``` html\n<!--[if lt IE 9]><div id=\"footer\"><![endif]-->\n<footer id=\"footer\">\n   //....其他代码\n</footer>\n<!--[if lt IE 9]></div><![endif]-->\n```\n虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。","slug":"Hexo博客优化--站内搜索、版权、IE8兼容","published":1,"updated":"2017-07-30T07:21:47.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvs10008v0uicn4i3rws","content":"<h3 id=\"1-添加Hexo的swiftype站内搜索\"><a href=\"#1-添加Hexo的swiftype站内搜索\" class=\"headerlink\" title=\"1.添加Hexo的swiftype站内搜索\"></a>1.添加Hexo的swiftype站内搜索</h3><p>先去<a href=\"https://swiftype.com\" target=\"_blank\" rel=\"external\">swiftype官网</a>注册一个账号,然后根据指引建立好自己网站对应的索引。<br><a id=\"more\"></a><br>步骤：<br>     <code>Create an engine</code><br>—&gt; <code>Create a search engine &gt;(standard web crawler)</code><br>—&gt; <code>WEBSITE URL</code>下填写你的网站地址：如：<a href=\"http://chaooo.github.io\" target=\"_blank\" rel=\"external\">http://chaooo.github.io</a><br>—&gt; <code>ENGINE NAME</code>自己取一个名字：如：chaooo<br>—&gt; 然后他开始抓取你网站的数据。<br>—&gt; 完成后，可以点击<code>Content</code>去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）<br>—&gt; 点击<code>Install Search</code>复制里面的代码：</p>\n<p>然后在<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>在最后加上刚复制的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class=\"string\">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(<span class=\"built_in\">arguments</span>);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[<span class=\"number\">0</span>];s.async=<span class=\"number\">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class=\"string\">'_st'</span>); </div><div class=\"line\"></div><div class=\"line\">  _st(<span class=\"string\">'install'</span>,<span class=\"string\">'Hvy4-e-Ew4x8PR6Let84'</span>,<span class=\"string\">'2.0.0'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在<code>themes\\landscape\\_config.yml</code>末尾添加如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">swift_search:</div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中找到：<code>&lt;div id=&quot;search-form-wrap&quot;&gt;...&lt;/div&gt;</code>刪除里面的內容，插入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search-form-wrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">accept-charset</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"q\"</span> <span class=\"attr\">results</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"st-default-search-input search-form-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form-submit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\source\\css\\_partial\\header.styl</code>找到<code>#search-form-wrap</code>对其样式微调，大概在118行，修改后的值：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#search-form-wrap</span></div><div class=\"line\">  <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span></div><div class=\"line\">  <span class=\"selector-tag\">top</span>: 14<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">width</span>: 200<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">height</span>: 30<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">right</span>: 35<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">opacity</span>: 0</div><div class=\"line\">  <span class=\"selector-tag\">visibility</span>: <span class=\"selector-tag\">hidden</span></div><div class=\"line\">  <span class=\"selector-tag\">transition</span>: 0<span class=\"selector-class\">.2s</span> <span class=\"selector-tag\">ease-out</span></div><div class=\"line\">  <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(<span class=\"selector-class\">.5</span>) <span class=\"selector-tag\">translate</span>(94<span class=\"selector-tag\">px</span>, 0)</div><div class=\"line\">  &amp;<span class=\"selector-class\">.on</span></div><div class=\"line\">    <span class=\"selector-tag\">opacity</span>: 1</div><div class=\"line\">    <span class=\"selector-tag\">visibility</span>: <span class=\"selector-tag\">visible</span></div><div class=\"line\">    <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(1) <span class=\"selector-tag\">translate</span>(0, 0)</div><div class=\"line\">  @<span class=\"keyword\">media</span> mq-mobile</div><div class=\"line\">    width: <span class=\"number\">80%</span></div><div class=\"line\">    right: -<span class=\"number\">80%</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\source\\css\\_partial\\header.styl</code>找到<code>.nav-icon</code>，大概在81行，在其后面添加(z-index: 1)：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav-icon</span></div><div class=\"line\">  @<span class=\"keyword\">extend</span> $nav-link</div><div class=\"line\">  font-family: font-icon</div><div class=\"line\">  text-align: center</div><div class=\"line\">  font-size: font-size</div><div class=\"line\">  width: font-size</div><div class=\"line\">  height: font-size</div><div class=\"line\">  padding: <span class=\"number\">20px</span> <span class=\"number\">15px</span></div><div class=\"line\">  position: relative</div><div class=\"line\">  cursor: pointer</div><div class=\"line\">  z-index: <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome–v49，Firefox Developer Edition–v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）</p>\n<h3 id=\"2-页尾版权信息修改\"><a href=\"#2-页尾版权信息修改\" class=\"headerlink\" title=\"2. 页尾版权信息修改\"></a>2. 页尾版权信息修改</h3><p>在<code>themes\\landscape\\layout\\_partial\\footer.ejs</code>中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer-info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;\"</span>&gt;</span></div><div class=\"line\">  Copyright &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">date</span>(<span class=\"attr\">new</span> <span class=\"attr\">Date</span>(), '<span class=\"attr\">YYYY</span>') %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span> || <span class=\"attr\">config.title</span> %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">powered_by</span>') %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hexo.io/\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>Hexo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/baidusitemap.xml\"</span>&gt;</span>网站地图<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/atom.xml\"</span>&gt;</span>订阅本站<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:zhenggchaoo@gmail.com\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>联系博主<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>           </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-对于低版本IE布局微调\"><a href=\"#3-对于低版本IE布局微调\" class=\"headerlink\" title=\"3. 对于低版本IE布局微调\"></a>3. 对于低版本IE布局微调</h3><h4 id=\"3-1-加入低版本IE浏览器提醒\"><a href=\"#3-1-加入低版本IE浏览器提醒\" class=\"headerlink\" title=\"3.1 加入低版本IE浏览器提醒\"></a>3.1 加入低版本IE浏览器提醒</h4><p>Hexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中找到<code>&lt;div id=&quot;header-outer&quot; class=&quot;outer&quot;&gt;&lt;/div&gt;</code>以其为父元素添加：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;style&gt;    </span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9&#123;position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9 a&#123;color:#258fb8;text-decoration:none;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9 a:hover&#123;text-decoration:underline;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-exclamation-triangle,.hid-chrome,.hid-firefox&#123;font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-exclamation-triangle:before&#123;content:\"\\f071\";&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-chrome:before&#123;content:\"\\f268\";&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-firefox:before&#123;content:\"\\f269\";&#125;</span></div><div class=\"line\"><span class=\"comment\">  &lt;/style&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;p class=\"hid-ltIE9\"&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;i class=\"hid-exclamation-triangle\" aria-hidden=\"true\"&gt;&lt;/i&gt;重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：</span></div><div class=\"line\"><span class=\"comment\">    &lt;a href=\"https://www.google.cn/intl/zh-CN/chrome/browser/desktop/\" title=\"谷歌Chrome浏览器\"&gt;&lt;i class=\"hid-chrome\" aria-hidden=\"true\"&gt;&lt;/i&gt;</span></div><div class=\"line\"><span class=\"comment\">  Chrome&lt;/a&gt;、</span></div><div class=\"line\"><span class=\"comment\">    &lt;a href=\"http://www.firefox.com.cn/download/\"title=\"火狐Firefox浏览器\"&gt;&lt;i class=\"hid-firefox\" aria-hidden=\"true\"&gt;&lt;/i&gt;Firefox&lt;/a&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;/p&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。</p>\n<h4 id=\"3-2-对于旧IE-header与footer布局微调\"><a href=\"#3-2-对于旧IE-header与footer布局微调\" class=\"headerlink\" title=\"3.2 (对于旧IE)header与footer布局微调\"></a>3.2 (对于旧IE)header与footer布局微调</h4><p>发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。<br>在<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中，把<code>&lt;header id=&quot;header&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;div id=\"header\"&gt;&lt;![endif]--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">   //....其他代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在<code>themes\\landscape\\layout\\_partial\\footer.ejs</code>中，把<code>&lt;header id=&quot;footer&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;div id=\"footer\"&gt;&lt;![endif]--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">   //....其他代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-添加Hexo的swiftype站内搜索\"><a href=\"#1-添加Hexo的swiftype站内搜索\" class=\"headerlink\" title=\"1.添加Hexo的swiftype站内搜索\"></a>1.添加Hexo的swiftype站内搜索</h3><p>先去<a href=\"https://swiftype.com\" target=\"_blank\" rel=\"external\">swiftype官网</a>注册一个账号,然后根据指引建立好自己网站对应的索引。<br>","more":"<br>步骤：<br>     <code>Create an engine</code><br>—&gt; <code>Create a search engine &gt;(standard web crawler)</code><br>—&gt; <code>WEBSITE URL</code>下填写你的网站地址：如：<a href=\"http://chaooo.github.io\" target=\"_blank\" rel=\"external\">http://chaooo.github.io</a><br>—&gt; <code>ENGINE NAME</code>自己取一个名字：如：chaooo<br>—&gt; 然后他开始抓取你网站的数据。<br>—&gt; 完成后，可以点击<code>Content</code>去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）<br>—&gt; 点击<code>Install Search</code>复制里面的代码：</p>\n<p>然后在<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>在最后加上刚复制的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class=\"string\">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(<span class=\"built_in\">arguments</span>);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[<span class=\"number\">0</span>];s.async=<span class=\"number\">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(<span class=\"built_in\">window</span>,<span class=\"built_in\">document</span>,<span class=\"string\">'script'</span>,<span class=\"string\">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class=\"string\">'_st'</span>); </div><div class=\"line\"></div><div class=\"line\">  _st(<span class=\"string\">'install'</span>,<span class=\"string\">'Hvy4-e-Ew4x8PR6Let84'</span>,<span class=\"string\">'2.0.0'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在<code>themes\\landscape\\_config.yml</code>末尾添加如下代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">swift_search:</div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中找到：<code>&lt;div id=&quot;search-form-wrap&quot;&gt;...&lt;/div&gt;</code>刪除里面的內容，插入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search-form-wrap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">accept-charset</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">autocapitalize</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocorrect</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"q\"</span> <span class=\"attr\">results</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"st-default-search-input search-form-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form-submit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\source\\css\\_partial\\header.styl</code>找到<code>#search-form-wrap</code>对其样式微调，大概在118行，修改后的值：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#search-form-wrap</span></div><div class=\"line\">  <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span></div><div class=\"line\">  <span class=\"selector-tag\">top</span>: 14<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">width</span>: 200<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">height</span>: 30<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">right</span>: 35<span class=\"selector-tag\">px</span></div><div class=\"line\">  <span class=\"selector-tag\">opacity</span>: 0</div><div class=\"line\">  <span class=\"selector-tag\">visibility</span>: <span class=\"selector-tag\">hidden</span></div><div class=\"line\">  <span class=\"selector-tag\">transition</span>: 0<span class=\"selector-class\">.2s</span> <span class=\"selector-tag\">ease-out</span></div><div class=\"line\">  <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(<span class=\"selector-class\">.5</span>) <span class=\"selector-tag\">translate</span>(94<span class=\"selector-tag\">px</span>, 0)</div><div class=\"line\">  &amp;<span class=\"selector-class\">.on</span></div><div class=\"line\">    <span class=\"selector-tag\">opacity</span>: 1</div><div class=\"line\">    <span class=\"selector-tag\">visibility</span>: <span class=\"selector-tag\">visible</span></div><div class=\"line\">    <span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">scale</span>(1) <span class=\"selector-tag\">translate</span>(0, 0)</div><div class=\"line\">  @<span class=\"keyword\">media</span> mq-mobile</div><div class=\"line\">    width: <span class=\"number\">80%</span></div><div class=\"line\">    right: -<span class=\"number\">80%</span></div></pre></td></tr></table></figure></p>\n<p>然后到<code>themes\\landscape\\source\\css\\_partial\\header.styl</code>找到<code>.nav-icon</code>，大概在81行，在其后面添加(z-index: 1)：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav-icon</span></div><div class=\"line\">  @<span class=\"keyword\">extend</span> $nav-link</div><div class=\"line\">  font-family: font-icon</div><div class=\"line\">  text-align: center</div><div class=\"line\">  font-size: font-size</div><div class=\"line\">  width: font-size</div><div class=\"line\">  height: font-size</div><div class=\"line\">  padding: <span class=\"number\">20px</span> <span class=\"number\">15px</span></div><div class=\"line\">  position: relative</div><div class=\"line\">  cursor: pointer</div><div class=\"line\">  z-index: <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome–v49，Firefox Developer Edition–v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）</p>\n<h3 id=\"2-页尾版权信息修改\"><a href=\"#2-页尾版权信息修改\" class=\"headerlink\" title=\"2. 页尾版权信息修改\"></a>2. 页尾版权信息修改</h3><p>在<code>themes\\landscape\\layout\\_partial\\footer.ejs</code>中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer-info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inner\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;\"</span>&gt;</span></div><div class=\"line\">  Copyright &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">date</span>(<span class=\"attr\">new</span> <span class=\"attr\">Date</span>(), '<span class=\"attr\">YYYY</span>') %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span> || <span class=\"attr\">config.title</span> %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">__</span>('<span class=\"attr\">powered_by</span>') %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hexo.io/\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>Hexo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/baidusitemap.xml\"</span>&gt;</span>网站地图<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/atom.xml\"</span>&gt;</span>订阅本站<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:zhenggchaoo@gmail.com\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>联系博主<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>           </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-对于低版本IE布局微调\"><a href=\"#3-对于低版本IE布局微调\" class=\"headerlink\" title=\"3. 对于低版本IE布局微调\"></a>3. 对于低版本IE布局微调</h3><h4 id=\"3-1-加入低版本IE浏览器提醒\"><a href=\"#3-1-加入低版本IE浏览器提醒\" class=\"headerlink\" title=\"3.1 加入低版本IE浏览器提醒\"></a>3.1 加入低版本IE浏览器提醒</h4><p>Hexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中找到<code>&lt;div id=&quot;header-outer&quot; class=&quot;outer&quot;&gt;&lt;/div&gt;</code>以其为父元素添加：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;style&gt;    </span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9&#123;position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9 a&#123;color:#258fb8;text-decoration:none;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-ltIE9 a:hover&#123;text-decoration:underline;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-exclamation-triangle,.hid-chrome,.hid-firefox&#123;font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-exclamation-triangle:before&#123;content:\"\\f071\";&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-chrome:before&#123;content:\"\\f268\";&#125;</span></div><div class=\"line\"><span class=\"comment\">    .hid-firefox:before&#123;content:\"\\f269\";&#125;</span></div><div class=\"line\"><span class=\"comment\">  &lt;/style&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;p class=\"hid-ltIE9\"&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;i class=\"hid-exclamation-triangle\" aria-hidden=\"true\"&gt;&lt;/i&gt;重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：</span></div><div class=\"line\"><span class=\"comment\">    &lt;a href=\"https://www.google.cn/intl/zh-CN/chrome/browser/desktop/\" title=\"谷歌Chrome浏览器\"&gt;&lt;i class=\"hid-chrome\" aria-hidden=\"true\"&gt;&lt;/i&gt;</span></div><div class=\"line\"><span class=\"comment\">  Chrome&lt;/a&gt;、</span></div><div class=\"line\"><span class=\"comment\">    &lt;a href=\"http://www.firefox.com.cn/download/\"title=\"火狐Firefox浏览器\"&gt;&lt;i class=\"hid-firefox\" aria-hidden=\"true\"&gt;&lt;/i&gt;Firefox&lt;/a&gt;</span></div><div class=\"line\"><span class=\"comment\">  &lt;/p&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。</p>\n<h4 id=\"3-2-对于旧IE-header与footer布局微调\"><a href=\"#3-2-对于旧IE-header与footer布局微调\" class=\"headerlink\" title=\"3.2 (对于旧IE)header与footer布局微调\"></a>3.2 (对于旧IE)header与footer布局微调</h4><p>发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。<br>在<code>themes\\landscape\\layout\\_partial\\header.ejs</code>中，把<code>&lt;header id=&quot;header&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;div id=\"header\"&gt;&lt;![endif]--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">   //....其他代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在<code>themes\\landscape\\layout\\_partial\\footer.ejs</code>中，把<code>&lt;header id=&quot;footer&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;div id=\"footer\"&gt;&lt;![endif]--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">   //....其他代码</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></p>\n<p>虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。</p>"},{"title":"Linq.js使用笔记","date":"2016-05-14T04:25:50.000Z","_content":"\n### 开始之前\nLINQ (Language-Integrated Query)，语言集成查询是一组用于c#和Visual Basic语言的扩展。它允许编写C#或者Visual Basic代码以查询数据库相同的方式操作内存数据。\nLINQ to JavaScript（简称JSLINQ）是以JavaScript语言实现的LINQ to Objects。它是构建在JavaScript数组对象上的一组扩展方法，使用JSLINQ很简单：在页面上引入它的js文件即可。","source":"_posts/Linq-js使用笔记.md","raw":"---\ntitle: Linq.js使用笔记\ndate: 2016-05-14 12:25:50\ntags: [javascript,linq,语言集成查询]\ncategories: 语言集成查询\n---\n\n### 开始之前\nLINQ (Language-Integrated Query)，语言集成查询是一组用于c#和Visual Basic语言的扩展。它允许编写C#或者Visual Basic代码以查询数据库相同的方式操作内存数据。\nLINQ to JavaScript（简称JSLINQ）是以JavaScript语言实现的LINQ to Objects。它是构建在JavaScript数组对象上的一组扩展方法，使用JSLINQ很简单：在页面上引入它的js文件即可。","slug":"Linq-js使用笔记","published":1,"updated":"2017-07-30T07:21:47.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvsd000cv0uip82hsfep","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>LINQ (Language-Integrated Query)，语言集成查询是一组用于c#和Visual Basic语言的扩展。它允许编写C#或者Visual Basic代码以查询数据库相同的方式操作内存数据。<br>LINQ to JavaScript（简称JSLINQ）是以JavaScript语言实现的LINQ to Objects。它是构建在JavaScript数组对象上的一组扩展方法，使用JSLINQ很简单：在页面上引入它的js文件即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>LINQ (Language-Integrated Query)，语言集成查询是一组用于c#和Visual Basic语言的扩展。它允许编写C#或者Visual Basic代码以查询数据库相同的方式操作内存数据。<br>LINQ to JavaScript（简称JSLINQ）是以JavaScript语言实现的LINQ to Objects。它是构建在JavaScript数组对象上的一组扩展方法，使用JSLINQ很简单：在页面上引入它的js文件即可。</p>\n"},{"title":"MongoDB学习笔记","date":"2016-07-29T02:22:14.000Z","_content":"\n## part1 安装配置\n\n### 一、安装：\n\n在mongodb官网下载对应自己电脑系统的安装包，地址为： [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)。\n<!-- more --> \n1、以Windows64bit为例，下载.msi文件双击安装。\n2、安装过程中，点击 \"Custom(自定义)\" 按钮来设置安装目录(D:\\MongoDB\\bin)。\n3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。\n4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod --dbpath D:\\MongoDB\\data\\db)\n``` bash\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --dbpath D:\\MongoDB\\data\\db\n```\n5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)\n``` bash\n  MongoDB shell version: 3.2.4  //mongodb版本\n  connecting to: test  //默认shell连接的是本机localhost 上面的test库\n```\n此时就可以操作数据库了。\n\n### 二、将MongoDB服务器作为Windows服务运行\n\n1、在D:\\MongoDB目录下创建mongodb.config,写入如下：\n``` bash\n  ## 数据库文件目录\n  dbpath=D:/MongoDB/data\n  ## 日志目录\n  logpath=D:/MongoDB/log/mongo.log\n  diaglog=3\n```\n2、常规命令(cmd管理员):\n```\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --config D:\\MongoDB\\mongodb.config \n```\n3、若常规方式失败，则sc方式(cmd管理员)：\n```\n  D:\n  cd D:\\MongoDB\\bin\n  sc create mongodb binPath= \"D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config\" \n```\n访问地址：localhost:27017测试是否启动成功","source":"_posts/MongoDB学习笔记(1).md","raw":"---\ntitle: MongoDB学习笔记\ndate: 2016-07-29 10:22:14\ntags: mongodb\ncategories: 数据库\n---\n\n## part1 安装配置\n\n### 一、安装：\n\n在mongodb官网下载对应自己电脑系统的安装包，地址为： [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)。\n<!-- more --> \n1、以Windows64bit为例，下载.msi文件双击安装。\n2、安装过程中，点击 \"Custom(自定义)\" 按钮来设置安装目录(D:\\MongoDB\\bin)。\n3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。\n4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod --dbpath D:\\MongoDB\\data\\db)\n``` bash\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --dbpath D:\\MongoDB\\data\\db\n```\n5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)\n``` bash\n  MongoDB shell version: 3.2.4  //mongodb版本\n  connecting to: test  //默认shell连接的是本机localhost 上面的test库\n```\n此时就可以操作数据库了。\n\n### 二、将MongoDB服务器作为Windows服务运行\n\n1、在D:\\MongoDB目录下创建mongodb.config,写入如下：\n``` bash\n  ## 数据库文件目录\n  dbpath=D:/MongoDB/data\n  ## 日志目录\n  logpath=D:/MongoDB/log/mongo.log\n  diaglog=3\n```\n2、常规命令(cmd管理员):\n```\n  D:\n  cd D:\\MongoDB\\bin\n  mongod --config D:\\MongoDB\\mongodb.config \n```\n3、若常规方式失败，则sc方式(cmd管理员)：\n```\n  D:\n  cd D:\\MongoDB\\bin\n  sc create mongodb binPath= \"D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config\" \n```\n访问地址：localhost:27017测试是否启动成功","slug":"MongoDB学习笔记(1)","published":1,"updated":"2017-07-30T07:21:47.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvsi000fv0uic7vf1vvq","content":"<h2 id=\"part1-安装配置\"><a href=\"#part1-安装配置\" class=\"headerlink\" title=\"part1 安装配置\"></a>part1 安装配置</h2><h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><p>在mongodb官网下载对应自己电脑系统的安装包，地址为： <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"external\">http://www.mongodb.org/downloads</a>。<br><a id=\"more\"></a><br>1、以Windows64bit为例，下载.msi文件双击安装。<br>2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\\MongoDB\\bin)。<br>3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。<br>4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod –dbpath D:\\MongoDB\\data\\db)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\"><span class=\"built_in\">cd</span> D:\\MongoDB\\bin</div><div class=\"line\">mongod --dbpath D:\\MongoDB\\data\\db</div></pre></td></tr></table></figure></p>\n<p>5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MongoDB shell version: 3.2.4  //mongodb版本</div><div class=\"line\">connecting to: <span class=\"built_in\">test</span>  //默认shell连接的是本机localhost 上面的<span class=\"built_in\">test</span>库</div></pre></td></tr></table></figure></p>\n<p>此时就可以操作数据库了。</p>\n<h3 id=\"二、将MongoDB服务器作为Windows服务运行\"><a href=\"#二、将MongoDB服务器作为Windows服务运行\" class=\"headerlink\" title=\"二、将MongoDB服务器作为Windows服务运行\"></a>二、将MongoDB服务器作为Windows服务运行</h3><p>1、在D:\\MongoDB目录下创建mongodb.config,写入如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 数据库文件目录</span></div><div class=\"line\">dbpath=D:/MongoDB/data</div><div class=\"line\"><span class=\"comment\">## 日志目录</span></div><div class=\"line\">logpath=D:/MongoDB/<span class=\"built_in\">log</span>/mongo.log</div><div class=\"line\">diaglog=3</div></pre></td></tr></table></figure></p>\n<p>2、常规命令(cmd管理员):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\">cd D:\\MongoDB\\bin</div><div class=\"line\">mongod --config D:\\MongoDB\\mongodb.config</div></pre></td></tr></table></figure></p>\n<p>3、若常规方式失败，则sc方式(cmd管理员)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\">cd D:\\MongoDB\\bin</div><div class=\"line\">sc create mongodb binPath= &quot;D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config&quot;</div></pre></td></tr></table></figure></p>\n<p>访问地址：localhost:27017测试是否启动成功</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"part1-安装配置\"><a href=\"#part1-安装配置\" class=\"headerlink\" title=\"part1 安装配置\"></a>part1 安装配置</h2><h3 id=\"一、安装：\"><a href=\"#一、安装：\" class=\"headerlink\" title=\"一、安装：\"></a>一、安装：</h3><p>在mongodb官网下载对应自己电脑系统的安装包，地址为： <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"external\">http://www.mongodb.org/downloads</a>。<br>","more":"<br>1、以Windows64bit为例，下载.msi文件双击安装。<br>2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\\MongoDB\\bin)。<br>3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。<br>4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod –dbpath D:\\MongoDB\\data\\db)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\"><span class=\"built_in\">cd</span> D:\\MongoDB\\bin</div><div class=\"line\">mongod --dbpath D:\\MongoDB\\data\\db</div></pre></td></tr></table></figure></p>\n<p>5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MongoDB shell version: 3.2.4  //mongodb版本</div><div class=\"line\">connecting to: <span class=\"built_in\">test</span>  //默认shell连接的是本机localhost 上面的<span class=\"built_in\">test</span>库</div></pre></td></tr></table></figure></p>\n<p>此时就可以操作数据库了。</p>\n<h3 id=\"二、将MongoDB服务器作为Windows服务运行\"><a href=\"#二、将MongoDB服务器作为Windows服务运行\" class=\"headerlink\" title=\"二、将MongoDB服务器作为Windows服务运行\"></a>二、将MongoDB服务器作为Windows服务运行</h3><p>1、在D:\\MongoDB目录下创建mongodb.config,写入如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 数据库文件目录</span></div><div class=\"line\">dbpath=D:/MongoDB/data</div><div class=\"line\"><span class=\"comment\">## 日志目录</span></div><div class=\"line\">logpath=D:/MongoDB/<span class=\"built_in\">log</span>/mongo.log</div><div class=\"line\">diaglog=3</div></pre></td></tr></table></figure></p>\n<p>2、常规命令(cmd管理员):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\">cd D:\\MongoDB\\bin</div><div class=\"line\">mongod --config D:\\MongoDB\\mongodb.config</div></pre></td></tr></table></figure></p>\n<p>3、若常规方式失败，则sc方式(cmd管理员)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">D:</div><div class=\"line\">cd D:\\MongoDB\\bin</div><div class=\"line\">sc create mongodb binPath= &quot;D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config&quot;</div></pre></td></tr></table></figure></p>\n<p>访问地址：localhost:27017测试是否启动成功</p>"},{"title":"MongoDB学习笔记(2)","date":"2016-07-30T00:20:16.000Z","_content":"\n## part2 CRUD操作(Creat,Read,Update,Delete)\n\n### 一、基础：\n\n1、document(文档)\n\nMongoDB把所有数据存放在类似于JSON数据结构的文档内：\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.2\" }\n```\n<!-- more -->\n2、collection(集合)\n\n集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.1\" }\n  { \"item\": \"pencil2\", \"qty\": 550, \"type\": \"no.2\" }\n  { \"item\": \"pencil3\", \"qty\": 800, \"type\": \"no.3\" }\n```\n\n3、database(数据库)\n\nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。\n\n### 二、数据库操作：\n\n连接及运行mongoDB\n\"`show dbs`\"命令可以显示所有的数据的列表\n\"`db`\"命令可以显示当前数据库对象或集合\n\"`use`\"命令可以连接到一个指定的数据库\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n  1.不能是空字符串（\"\")。\n  2.不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n  3.应全部小写。\n  4.最多64字节。\n\n1、创建数据库：`use Database_Name`\n``` bash\n  use test  ##创建名为test的数据库\n```\n2、删除当前数据库：\n``` bash\n  db.dropDatabase()\n```\n\n### 三、文档操作（以 Collection_Name = col 为例）\n\n#### 1、插入：\n``` bash\n  db.col.insert(Document)     ##插入一条或多组数据\n  db.col.insertOne(Document)  ##插入一条数据\n  db.col.insertMany(Document) ##插入多条数据\n  ##例如：\n      db.col.insertOne({ \"item\": \"pencil\", \"type\": \"no.1\" })\n      db.col.insertMany([\n      { \"item\": \"dog\", \"type\": \"no.2\" },\n      { \"item\": \"apple\", \"type\": \"no.3\" },\n      { \"item\": \"orange\", \"type\": \"no.4\" }\n      ])\n```\n\n#### 2、删除：\n``` bash\n  db.col.remove({})                    ##删除所有数据\n  db.col.remove(query <,options>)\n      #  query: 查询条件(数据索引或名字)\n      #  ptions:两个可选参数\n      #      {justOne: <boolean>,     //默认false，删除所有匹配到的。\n      #       writeConcern: <document>//抛出异常的级别。\n      #      }\n  db.col.deleteOne(query <,options>)   ##同上，无justOne参数，只删除第一条\n  db.col.deleteMany(query <,options>)  ##同上，无justOne参数，只删除多条\n```\n\n### 3、更新：\n``` bash\n  db.col.update(query, update <,options>)\n      #  query:  查询条件(数据索引或名字)\n      #  update: 更新的内容，语法：{$set:query}\n      #  options:三个可选参数\n      #      {upsert: <boolean>,      //如果不存在update的记录，是否插入新数据，默认:false。\n      #       multi: <boolean>,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。\n      #       writeConcern: <document>//#抛出异常的级别。\n      #      }\n  ##例如：\n      db.col.update(\n          {\"type\": \"no.1\"}, \n          {$set: {\"item\": \"human\"}}, \n          {upsert: true, multi: true}\n          )\n  db.col.updateOne()                    ##同上，无multi参数，只更新第一条\n  db.col.updateMany()                   ##同上，无multi参数\n  db.col.replaceOne()                   ##同updateOne\n  db.col.save(document <,writeConcern>) ##通过传入的文档整个替换\n```\n##### insert 与 save的区别\n如果插入的数据的_id相同,save将会更新该文档,而insert将会报错\n\n##### update常用操作符\n``` bash\n  $set         ##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.\n  $unset       ##删除文档中的一个字段.\n  $rename      ##重命名某个列\n  $inc         ##增长某个列\n  $setOnInsert ##当upsert为true时,并且发生了insert操作时,可以补充的字段\n  $push        ##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.\n  $pushAll     ##将多个数值一次存入数组.上面的push只能一个一个的存入\n  $addToSet    ##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.\n  $pop         ##删除数组最后一个元素\n  $pull        ##删除数组中的指定的元素,如果删除的字段不是数组,会报错\n  $pullAll     ##删除数组中的多个值,跟pushAll与push的关系类似.\n```\n\n### 4、查询\n``` bash\n  db.col.find({})          ##查询所有文档\n  db.col.find().pretty()   ##以易读的方式来读取数据\n  db.collection.find(query, projection)\n      #  query：查询条件(数据索引或名字)\n      #  projection：可选。指定返回的字段。\n```\n\n#### 4.1、深入查询表达式\n``` bash\n  db.col.find()##查询所有\n  db.col.find({filed: value})                              ##等值查询\n  db.col.find({filed: {$ne: value}})                       ##不等于 $ne\n  db.col.find({filed: {$nin: [value1, value2, ...]}})      ##不能包含给定的值 $nin\n  db.col.find({filed: {$all: [value1, value2, ...]}})      ##必须包含所有给定的值 $all\n  db.col.find({filed: {$in: [value1, value2, ...]}})       ##只要包含一个或多个给定的值 $in\n  db.col.find({filed: {$exists:1}})                        ##存在filed字段的\n  db.col.find({filed: {$exists:0}})                        ##不存在filed字段的\n  db.col.find({filed: {$mod:[3,1]}})                       ##模三余一，$mod(取模操作)\n  db.col.find({$or: [{filed1: vulue1}, {filed2: vulue2}]}) ##或 $or\n  db.col.find({$nor: [{filed1: vulue1}, {filed2: vulue2}]})##排除 $nor\n  db.col.find({filed: {$size: 3}})                         ##返回值得数组是给定的长度(3) $size\n  db.col.find({$where: function(){return ...}})            ##回调，隐式迭代，符合条件才返回\n  db.col.find({$where: '...'}})                            ##同上\n  db.col.find({age: {$lt: 5}}).limit(3)                    ##查询age的值小于5，限制3条\n      #范围查询：\n      #    $lt  （小于）\n      #    $gt  （大于）\n      #    $lte （小于等于）\n      #    $gte （大于等于）\n      #    limit（限制显示）\n  db.col.find().skip(2).limit(3)                           ##跳过前两个文档查询后面三个\n      #  skip(num):表示跳过前面num个文档\n  db.col.find().sort({age: 1})                             ##查询后以age升序排列显示\n      #  sort():排序，这里 1 代表升序, -1 代表降序.\n  db.col.find({filed: /user.*/i})                          ##正则，查询filed以user开头不区分大小写（正则效率低）\n  db.col.find({filed: {$type: 1}})                         ##查找filed为双精度的文档\n      # 根据数据类型查询 $type\n      #      |类型　　　　　　　　|编号|\n      #      |双精度　　　　　　　|1 　|\n      #      |字符串　　　　　　　|2 　|\n      #      |对象　　　　　　　　|3   |\n      #      |数组　　　　　　　　|4   |\n      #      |二进制数据　　　　　|5   |\n      #      |对象ID　　　　　　　|7   |\n      #      |布尔值　　　　　　　|8   |\n      #      |日期　　　　　　　　|9   |\n      #      |空　　　　　　　　　|10  |\n      #      |正则表达式　　　　　|11  |\n      #      |JavaScript　　　　|13  |\n      #      |符号　　　　　　　　|14  |\n      #      |JavaScript(带范围)|15  |\n      #      |32位整数　　　　　　|16  |\n      #      |时间戳　　　　　　　|17  |\n      #      |64位整数　　　　　　|18  |\n      #      |最小键　　　　　　　|255 |\n      #      |最大键　　　　　　　|127 |\n```\n\n#### 4.2、group分组查询\ngroup做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。\n``` bash\n  group({\n    key:{字段:1},\n    initial:{变量:初始值},\n    $reduce:function(doc,prev){函数代码}\n  })\n```\n其中key下的字段代表,需要按哪个字段分组.\ninitial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.\n$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.\n\n栗子：如下我们按年龄分组,同级不同年龄的用户的多少:\n``` bash\n  db.user.find()\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.group({\n      key:{age:1},\n      initial:{count:0},\n      $reduce:function(doc,prev){\n          prev.count++\n      }\n  }); \n      [\n          {\"age\": 0, \"count\": 1},\n          {\"age\": 1, \"count\": 3},\n          {\"age\": 2, \"count\": 2}\n      ]\n\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      }\n  });\n    [\n        {\"age\": 0, \"users\": [\"user0\"]},\n        {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n        {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n    ]\n```\n\n另外本函数还有两个可选参数 condition 和 finalize\ncondition就是分组的条件筛选类似mysql中的having\n``` bash\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      $reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      },\n      condition:{age:{$gt:0}}})\n　##筛选出age大于0的:\n  [\n      {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n      {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n  ]\n```\n\n#### 4.3、count统计\n``` bash\n  db.goods.count()            ##统计该集合总数\n  db.goods.count({cat_id: 3}) ##统计cat_id=3的总数\n```\n\n#### 4.4、distinct排重\n``` bash\n db.user.find()\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.distinct(\"age\") ## 特殊,传入的参数直接是字符串,而不是对象;\n      [0, 1, 2]\n```\n#### 4.5、子文档查询$elemMatch\n\nelemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。\n注意：\n(1)数组中元素是内嵌文档。\n(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。\n假设集合school有如下数据：\n``` bash\n{\n _id: 1,\n zipcode: 63109,\n students: [\n              { name: \"john\", school: 102, age: 10 },\n              { name: \"jess\", school: 102, age: 11 },\n              { name: \"jeff\", school: 108, age: 15 }\n           ]\n}\n{\n _id: 2,\n zipcode: 63110,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 3,\n zipcode: 63109,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 4,\n zipcode: 63109,\n students: [\n              { name: \"barney\", school: 102, age: 7 },\n           ]\n}\n```\n下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。\n``` bash\n  db.school.find({zipcode: 63109 },{ students: { $elemMatch: { school: 102 } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"john\", \"school\":102, \"age\":10}]}\n  {\"_id\": 3}\n  {\"_id\": 4, \"students\": [{\"name\":\"barney\", \"school\":102, \"age\":7}]}\n```\n查询结果说明：\n`_id为1的文档`，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。\n`_id为3的文档`，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含\"students\"字段。\n\n$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。\n``` bash\ndb.school.find( { zipcode: 63109 },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"jess\", \"school\":102, \"age\":11}]}\n  {\"_id\": 3}\n  {\"_id\": 4}\n```\n","source":"_posts/MongoDB学习笔记(2).md","raw":"---\ntitle: MongoDB学习笔记(2)\ndate: 2016-07-30 8:20:16\ntags: mongodb\ncategories: 数据库\n---\n\n## part2 CRUD操作(Creat,Read,Update,Delete)\n\n### 一、基础：\n\n1、document(文档)\n\nMongoDB把所有数据存放在类似于JSON数据结构的文档内：\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.2\" }\n```\n<!-- more -->\n2、collection(集合)\n\n集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。\n``` json\n  { \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.1\" }\n  { \"item\": \"pencil2\", \"qty\": 550, \"type\": \"no.2\" }\n  { \"item\": \"pencil3\", \"qty\": 800, \"type\": \"no.3\" }\n```\n\n3、database(数据库)\n\nMongoDB的默认数据库为\"db\"，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。\n\n### 二、数据库操作：\n\n连接及运行mongoDB\n\"`show dbs`\"命令可以显示所有的数据的列表\n\"`db`\"命令可以显示当前数据库对象或集合\n\"`use`\"命令可以连接到一个指定的数据库\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n  1.不能是空字符串（\"\")。\n  2.不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n  3.应全部小写。\n  4.最多64字节。\n\n1、创建数据库：`use Database_Name`\n``` bash\n  use test  ##创建名为test的数据库\n```\n2、删除当前数据库：\n``` bash\n  db.dropDatabase()\n```\n\n### 三、文档操作（以 Collection_Name = col 为例）\n\n#### 1、插入：\n``` bash\n  db.col.insert(Document)     ##插入一条或多组数据\n  db.col.insertOne(Document)  ##插入一条数据\n  db.col.insertMany(Document) ##插入多条数据\n  ##例如：\n      db.col.insertOne({ \"item\": \"pencil\", \"type\": \"no.1\" })\n      db.col.insertMany([\n      { \"item\": \"dog\", \"type\": \"no.2\" },\n      { \"item\": \"apple\", \"type\": \"no.3\" },\n      { \"item\": \"orange\", \"type\": \"no.4\" }\n      ])\n```\n\n#### 2、删除：\n``` bash\n  db.col.remove({})                    ##删除所有数据\n  db.col.remove(query <,options>)\n      #  query: 查询条件(数据索引或名字)\n      #  ptions:两个可选参数\n      #      {justOne: <boolean>,     //默认false，删除所有匹配到的。\n      #       writeConcern: <document>//抛出异常的级别。\n      #      }\n  db.col.deleteOne(query <,options>)   ##同上，无justOne参数，只删除第一条\n  db.col.deleteMany(query <,options>)  ##同上，无justOne参数，只删除多条\n```\n\n### 3、更新：\n``` bash\n  db.col.update(query, update <,options>)\n      #  query:  查询条件(数据索引或名字)\n      #  update: 更新的内容，语法：{$set:query}\n      #  options:三个可选参数\n      #      {upsert: <boolean>,      //如果不存在update的记录，是否插入新数据，默认:false。\n      #       multi: <boolean>,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。\n      #       writeConcern: <document>//#抛出异常的级别。\n      #      }\n  ##例如：\n      db.col.update(\n          {\"type\": \"no.1\"}, \n          {$set: {\"item\": \"human\"}}, \n          {upsert: true, multi: true}\n          )\n  db.col.updateOne()                    ##同上，无multi参数，只更新第一条\n  db.col.updateMany()                   ##同上，无multi参数\n  db.col.replaceOne()                   ##同updateOne\n  db.col.save(document <,writeConcern>) ##通过传入的文档整个替换\n```\n##### insert 与 save的区别\n如果插入的数据的_id相同,save将会更新该文档,而insert将会报错\n\n##### update常用操作符\n``` bash\n  $set         ##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.\n  $unset       ##删除文档中的一个字段.\n  $rename      ##重命名某个列\n  $inc         ##增长某个列\n  $setOnInsert ##当upsert为true时,并且发生了insert操作时,可以补充的字段\n  $push        ##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.\n  $pushAll     ##将多个数值一次存入数组.上面的push只能一个一个的存入\n  $addToSet    ##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.\n  $pop         ##删除数组最后一个元素\n  $pull        ##删除数组中的指定的元素,如果删除的字段不是数组,会报错\n  $pullAll     ##删除数组中的多个值,跟pushAll与push的关系类似.\n```\n\n### 4、查询\n``` bash\n  db.col.find({})          ##查询所有文档\n  db.col.find().pretty()   ##以易读的方式来读取数据\n  db.collection.find(query, projection)\n      #  query：查询条件(数据索引或名字)\n      #  projection：可选。指定返回的字段。\n```\n\n#### 4.1、深入查询表达式\n``` bash\n  db.col.find()##查询所有\n  db.col.find({filed: value})                              ##等值查询\n  db.col.find({filed: {$ne: value}})                       ##不等于 $ne\n  db.col.find({filed: {$nin: [value1, value2, ...]}})      ##不能包含给定的值 $nin\n  db.col.find({filed: {$all: [value1, value2, ...]}})      ##必须包含所有给定的值 $all\n  db.col.find({filed: {$in: [value1, value2, ...]}})       ##只要包含一个或多个给定的值 $in\n  db.col.find({filed: {$exists:1}})                        ##存在filed字段的\n  db.col.find({filed: {$exists:0}})                        ##不存在filed字段的\n  db.col.find({filed: {$mod:[3,1]}})                       ##模三余一，$mod(取模操作)\n  db.col.find({$or: [{filed1: vulue1}, {filed2: vulue2}]}) ##或 $or\n  db.col.find({$nor: [{filed1: vulue1}, {filed2: vulue2}]})##排除 $nor\n  db.col.find({filed: {$size: 3}})                         ##返回值得数组是给定的长度(3) $size\n  db.col.find({$where: function(){return ...}})            ##回调，隐式迭代，符合条件才返回\n  db.col.find({$where: '...'}})                            ##同上\n  db.col.find({age: {$lt: 5}}).limit(3)                    ##查询age的值小于5，限制3条\n      #范围查询：\n      #    $lt  （小于）\n      #    $gt  （大于）\n      #    $lte （小于等于）\n      #    $gte （大于等于）\n      #    limit（限制显示）\n  db.col.find().skip(2).limit(3)                           ##跳过前两个文档查询后面三个\n      #  skip(num):表示跳过前面num个文档\n  db.col.find().sort({age: 1})                             ##查询后以age升序排列显示\n      #  sort():排序，这里 1 代表升序, -1 代表降序.\n  db.col.find({filed: /user.*/i})                          ##正则，查询filed以user开头不区分大小写（正则效率低）\n  db.col.find({filed: {$type: 1}})                         ##查找filed为双精度的文档\n      # 根据数据类型查询 $type\n      #      |类型　　　　　　　　|编号|\n      #      |双精度　　　　　　　|1 　|\n      #      |字符串　　　　　　　|2 　|\n      #      |对象　　　　　　　　|3   |\n      #      |数组　　　　　　　　|4   |\n      #      |二进制数据　　　　　|5   |\n      #      |对象ID　　　　　　　|7   |\n      #      |布尔值　　　　　　　|8   |\n      #      |日期　　　　　　　　|9   |\n      #      |空　　　　　　　　　|10  |\n      #      |正则表达式　　　　　|11  |\n      #      |JavaScript　　　　|13  |\n      #      |符号　　　　　　　　|14  |\n      #      |JavaScript(带范围)|15  |\n      #      |32位整数　　　　　　|16  |\n      #      |时间戳　　　　　　　|17  |\n      #      |64位整数　　　　　　|18  |\n      #      |最小键　　　　　　　|255 |\n      #      |最大键　　　　　　　|127 |\n```\n\n#### 4.2、group分组查询\ngroup做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。\n``` bash\n  group({\n    key:{字段:1},\n    initial:{变量:初始值},\n    $reduce:function(doc,prev){函数代码}\n  })\n```\n其中key下的字段代表,需要按哪个字段分组.\ninitial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.\n$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.\n\n栗子：如下我们按年龄分组,同级不同年龄的用户的多少:\n``` bash\n  db.user.find()\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n      { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.group({\n      key:{age:1},\n      initial:{count:0},\n      $reduce:function(doc,prev){\n          prev.count++\n      }\n  }); \n      [\n          {\"age\": 0, \"count\": 1},\n          {\"age\": 1, \"count\": 3},\n          {\"age\": 2, \"count\": 2}\n      ]\n\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      }\n  });\n    [\n        {\"age\": 0, \"users\": [\"user0\"]},\n        {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n        {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n    ]\n```\n\n另外本函数还有两个可选参数 condition 和 finalize\ncondition就是分组的条件筛选类似mysql中的having\n``` bash\n  db.user.group({\n      key:{age:1},\n      initial:{users:[]},\n      $reduce:function(doc,prev){\n          prev.users.push(doc.name)\n      },\n      condition:{age:{$gt:0}}})\n　##筛选出age大于0的:\n  [\n      {\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]},\n      {\"age\": 2, \"users\": [\"user2\", \"user5\"]}\n  ]\n```\n\n#### 4.3、count统计\n``` bash\n  db.goods.count()            ##统计该集合总数\n  db.goods.count({cat_id: 3}) ##统计cat_id=3的总数\n```\n\n#### 4.4、distinct排重\n``` bash\n db.user.find()\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 }\n    { \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 }\n\n  db.user.distinct(\"age\") ## 特殊,传入的参数直接是字符串,而不是对象;\n      [0, 1, 2]\n```\n#### 4.5、子文档查询$elemMatch\n\nelemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。\n注意：\n(1)数组中元素是内嵌文档。\n(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。\n假设集合school有如下数据：\n``` bash\n{\n _id: 1,\n zipcode: 63109,\n students: [\n              { name: \"john\", school: 102, age: 10 },\n              { name: \"jess\", school: 102, age: 11 },\n              { name: \"jeff\", school: 108, age: 15 }\n           ]\n}\n{\n _id: 2,\n zipcode: 63110,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 3,\n zipcode: 63109,\n students: [\n              { name: \"ajax\", school: 100, age: 7 },\n              { name: \"achilles\", school: 100, age: 8 },\n           ]\n}\n{\n _id: 4,\n zipcode: 63109,\n students: [\n              { name: \"barney\", school: 102, age: 7 },\n           ]\n}\n```\n下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。\n``` bash\n  db.school.find({zipcode: 63109 },{ students: { $elemMatch: { school: 102 } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"john\", \"school\":102, \"age\":10}]}\n  {\"_id\": 3}\n  {\"_id\": 4, \"students\": [{\"name\":\"barney\", \"school\":102, \"age\":7}]}\n```\n查询结果说明：\n`_id为1的文档`，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。\n`_id为3的文档`，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含\"students\"字段。\n\n$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。\n``` bash\ndb.school.find( { zipcode: 63109 },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } );\n\n  {\"_id\": 1, \"students\": [{\"name\":\"jess\", \"school\":102, \"age\":11}]}\n  {\"_id\": 3}\n  {\"_id\": 4}\n```\n","slug":"MongoDB学习笔记(2)","published":1,"updated":"2017-07-30T07:21:47.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvso000jv0ui4din0lwx","content":"<h2 id=\"part2-CRUD操作-Creat-Read-Update-Delete\"><a href=\"#part2-CRUD操作-Creat-Read-Update-Delete\" class=\"headerlink\" title=\"part2 CRUD操作(Creat,Read,Update,Delete)\"></a>part2 CRUD操作(Creat,Read,Update,Delete)</h2><h3 id=\"一、基础：\"><a href=\"#一、基础：\" class=\"headerlink\" title=\"一、基础：\"></a>一、基础：</h3><p>1、document(文档)</p>\n<p>MongoDB把所有数据存放在类似于JSON数据结构的文档内：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2、collection(集合)</p>\n<p>集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;</div><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil2\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">550</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</div><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil3\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">800</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>3、database(数据库)</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。</p>\n<h3 id=\"二、数据库操作：\"><a href=\"#二、数据库操作：\" class=\"headerlink\" title=\"二、数据库操作：\"></a>二、数据库操作：</h3><p>连接及运行mongoDB<br>“<code>show dbs</code>“命令可以显示所有的数据的列表<br>“<code>db</code>“命令可以显示当前数据库对象或集合<br>“<code>use</code>“命令可以连接到一个指定的数据库<br>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。<br>  1.不能是空字符串（””)。<br>  2.不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。<br>  3.应全部小写。<br>  4.最多64字节。</p>\n<p>1、创建数据库：<code>use Database_Name</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use <span class=\"built_in\">test</span>  <span class=\"comment\">##创建名为test的数据库</span></div></pre></td></tr></table></figure></p>\n<p>2、删除当前数据库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase()</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、文档操作（以-Collection-Name-col-为例）\"><a href=\"#三、文档操作（以-Collection-Name-col-为例）\" class=\"headerlink\" title=\"三、文档操作（以 Collection_Name = col 为例）\"></a>三、文档操作（以 Collection_Name = col 为例）</h3><h4 id=\"1、插入：\"><a href=\"#1、插入：\" class=\"headerlink\" title=\"1、插入：\"></a>1、插入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.insert(Document)     <span class=\"comment\">##插入一条或多组数据</span></div><div class=\"line\">db.col.insertOne(Document)  <span class=\"comment\">##插入一条数据</span></div><div class=\"line\">db.col.insertMany(Document) <span class=\"comment\">##插入多条数据</span></div><div class=\"line\"><span class=\"comment\">##例如：</span></div><div class=\"line\">    db.col.insertOne(&#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;)</div><div class=\"line\">    db.col.insertMany([</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.4\"</span> &#125;</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<h4 id=\"2、删除：\"><a href=\"#2、删除：\" class=\"headerlink\" title=\"2、删除：\"></a>2、删除：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.remove(&#123;&#125;)                    <span class=\"comment\">##删除所有数据</span></div><div class=\"line\">db.col.remove(query &lt;,options&gt;)</div><div class=\"line\">    <span class=\"comment\">#  query: 查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  ptions:两个可选参数</span></div><div class=\"line\">    <span class=\"comment\">#      &#123;justOne: &lt;boolean&gt;,     //默认false，删除所有匹配到的。</span></div><div class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//抛出异常的级别。</span></div><div class=\"line\">    <span class=\"comment\">#      &#125;</span></div><div class=\"line\">db.col.deleteOne(query &lt;,options&gt;)   <span class=\"comment\">##同上，无justOne参数，只删除第一条</span></div><div class=\"line\">db.col.deleteMany(query &lt;,options&gt;)  <span class=\"comment\">##同上，无justOne参数，只删除多条</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、更新：\"><a href=\"#3、更新：\" class=\"headerlink\" title=\"3、更新：\"></a>3、更新：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.update(query, update &lt;,options&gt;)</div><div class=\"line\">    <span class=\"comment\">#  query:  查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  update: 更新的内容，语法：&#123;$set:query&#125;</span></div><div class=\"line\">    <span class=\"comment\">#  options:三个可选参数</span></div><div class=\"line\">    <span class=\"comment\">#      &#123;upsert: &lt;boolean&gt;,      //如果不存在update的记录，是否插入新数据，默认:false。</span></div><div class=\"line\">    <span class=\"comment\">#       multi: &lt;boolean&gt;,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。</span></div><div class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//#抛出异常的级别。</span></div><div class=\"line\">    <span class=\"comment\">#      &#125;</span></div><div class=\"line\"><span class=\"comment\">##例如：</span></div><div class=\"line\">    db.col.update(</div><div class=\"line\">        &#123;<span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span>&#125;, </div><div class=\"line\">        &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"item\"</span>: <span class=\"string\">\"human\"</span>&#125;&#125;, </div><div class=\"line\">        &#123;upsert: <span class=\"literal\">true</span>, multi: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">        )</div><div class=\"line\">db.col.updateOne()                    <span class=\"comment\">##同上，无multi参数，只更新第一条</span></div><div class=\"line\">db.col.updateMany()                   <span class=\"comment\">##同上，无multi参数</span></div><div class=\"line\">db.col.replaceOne()                   <span class=\"comment\">##同updateOne</span></div><div class=\"line\">db.col.save(document &lt;,writeConcern&gt;) <span class=\"comment\">##通过传入的文档整个替换</span></div></pre></td></tr></table></figure>\n<h5 id=\"insert-与-save的区别\"><a href=\"#insert-与-save的区别\" class=\"headerlink\" title=\"insert 与 save的区别\"></a>insert 与 save的区别</h5><p>如果插入的数据的_id相同,save将会更新该文档,而insert将会报错</p>\n<h5 id=\"update常用操作符\"><a href=\"#update常用操作符\" class=\"headerlink\" title=\"update常用操作符\"></a>update常用操作符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$set</span>         <span class=\"comment\">##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.</span></div><div class=\"line\"><span class=\"variable\">$unset</span>       <span class=\"comment\">##删除文档中的一个字段.</span></div><div class=\"line\"><span class=\"variable\">$rename</span>      <span class=\"comment\">##重命名某个列</span></div><div class=\"line\"><span class=\"variable\">$inc</span>         <span class=\"comment\">##增长某个列</span></div><div class=\"line\"><span class=\"variable\">$setOnInsert</span> <span class=\"comment\">##当upsert为true时,并且发生了insert操作时,可以补充的字段</span></div><div class=\"line\"><span class=\"variable\">$push</span>        <span class=\"comment\">##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.</span></div><div class=\"line\"><span class=\"variable\">$pushAll</span>     <span class=\"comment\">##将多个数值一次存入数组.上面的push只能一个一个的存入</span></div><div class=\"line\"><span class=\"variable\">$addToSet</span>    <span class=\"comment\">##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.</span></div><div class=\"line\"><span class=\"variable\">$pop</span>         <span class=\"comment\">##删除数组最后一个元素</span></div><div class=\"line\"><span class=\"variable\">$pull</span>        <span class=\"comment\">##删除数组中的指定的元素,如果删除的字段不是数组,会报错</span></div><div class=\"line\"><span class=\"variable\">$pullAll</span>     <span class=\"comment\">##删除数组中的多个值,跟pushAll与push的关系类似.</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、查询\"><a href=\"#4、查询\" class=\"headerlink\" title=\"4、查询\"></a>4、查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.find(&#123;&#125;)          <span class=\"comment\">##查询所有文档</span></div><div class=\"line\">db.col.find().pretty()   <span class=\"comment\">##以易读的方式来读取数据</span></div><div class=\"line\">db.collection.find(query, projection)</div><div class=\"line\">    <span class=\"comment\">#  query：查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  projection：可选。指定返回的字段。</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-1、深入查询表达式\"><a href=\"#4-1、深入查询表达式\" class=\"headerlink\" title=\"4.1、深入查询表达式\"></a>4.1、深入查询表达式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.find()<span class=\"comment\">##查询所有</span></div><div class=\"line\">db.col.find(&#123;filed: value&#125;)                              <span class=\"comment\">##等值查询</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$ne</span>: value&#125;&#125;)                       <span class=\"comment\">##不等于 $ne</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$nin</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##不能包含给定的值 $nin</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$all</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##必须包含所有给定的值 $all</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$in</span>: [value1, value2, ...]&#125;&#125;)       <span class=\"comment\">##只要包含一个或多个给定的值 $in</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:1&#125;&#125;)                        <span class=\"comment\">##存在filed字段的</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:0&#125;&#125;)                        <span class=\"comment\">##不存在filed字段的</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$mod</span>:[3,1]&#125;&#125;)                       <span class=\"comment\">##模三余一，$mod(取模操作)</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$or</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) <span class=\"comment\">##或 $or</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$nor</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)<span class=\"comment\">##排除 $nor</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$size</span>: 3&#125;&#125;)                         <span class=\"comment\">##返回值得数组是给定的长度(3) $size</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> ...&#125;&#125;)            <span class=\"comment\">##回调，隐式迭代，符合条件才返回</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"string\">'...'</span>&#125;&#125;)                            <span class=\"comment\">##同上</span></div><div class=\"line\">db.col.find(&#123;age: &#123;<span class=\"variable\">$lt</span>: 5&#125;&#125;).<span class=\"built_in\">limit</span>(3)                    <span class=\"comment\">##查询age的值小于5，限制3条</span></div><div class=\"line\">    <span class=\"comment\">#范围查询：</span></div><div class=\"line\">    <span class=\"comment\">#    $lt  （小于）</span></div><div class=\"line\">    <span class=\"comment\">#    $gt  （大于）</span></div><div class=\"line\">    <span class=\"comment\">#    $lte （小于等于）</span></div><div class=\"line\">    <span class=\"comment\">#    $gte （大于等于）</span></div><div class=\"line\">    <span class=\"comment\">#    limit（限制显示）</span></div><div class=\"line\">db.col.find().skip(2).<span class=\"built_in\">limit</span>(3)                           <span class=\"comment\">##跳过前两个文档查询后面三个</span></div><div class=\"line\">    <span class=\"comment\">#  skip(num):表示跳过前面num个文档</span></div><div class=\"line\">db.col.find().sort(&#123;age: 1&#125;)                             <span class=\"comment\">##查询后以age升序排列显示</span></div><div class=\"line\">    <span class=\"comment\">#  sort():排序，这里 1 代表升序, -1 代表降序.</span></div><div class=\"line\">db.col.find(&#123;filed: /user.*/i&#125;)                          <span class=\"comment\">##正则，查询filed以user开头不区分大小写（正则效率低）</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$type</span>: 1&#125;&#125;)                         <span class=\"comment\">##查找filed为双精度的文档</span></div><div class=\"line\">    <span class=\"comment\"># 根据数据类型查询 $type</span></div><div class=\"line\">    <span class=\"comment\">#      |类型　　　　　　　　|编号|</span></div><div class=\"line\">    <span class=\"comment\">#      |双精度　　　　　　　|1 　|</span></div><div class=\"line\">    <span class=\"comment\">#      |字符串　　　　　　　|2 　|</span></div><div class=\"line\">    <span class=\"comment\">#      |对象　　　　　　　　|3   |</span></div><div class=\"line\">    <span class=\"comment\">#      |数组　　　　　　　　|4   |</span></div><div class=\"line\">    <span class=\"comment\">#      |二进制数据　　　　　|5   |</span></div><div class=\"line\">    <span class=\"comment\">#      |对象ID　　　　　　　|7   |</span></div><div class=\"line\">    <span class=\"comment\">#      |布尔值　　　　　　　|8   |</span></div><div class=\"line\">    <span class=\"comment\">#      |日期　　　　　　　　|9   |</span></div><div class=\"line\">    <span class=\"comment\">#      |空　　　　　　　　　|10  |</span></div><div class=\"line\">    <span class=\"comment\">#      |正则表达式　　　　　|11  |</span></div><div class=\"line\">    <span class=\"comment\">#      |JavaScript　　　　|13  |</span></div><div class=\"line\">    <span class=\"comment\">#      |符号　　　　　　　　|14  |</span></div><div class=\"line\">    <span class=\"comment\">#      |JavaScript(带范围)|15  |</span></div><div class=\"line\">    <span class=\"comment\">#      |32位整数　　　　　　|16  |</span></div><div class=\"line\">    <span class=\"comment\">#      |时间戳　　　　　　　|17  |</span></div><div class=\"line\">    <span class=\"comment\">#      |64位整数　　　　　　|18  |</span></div><div class=\"line\">    <span class=\"comment\">#      |最小键　　　　　　　|255 |</span></div><div class=\"line\">    <span class=\"comment\">#      |最大键　　　　　　　|127 |</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-2、group分组查询\"><a href=\"#4-2、group分组查询\" class=\"headerlink\" title=\"4.2、group分组查询\"></a>4.2、group分组查询</h4><p>group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">group(&#123;</div><div class=\"line\">  key:&#123;字段:1&#125;,</div><div class=\"line\">  initial:&#123;变量:初始值&#125;,</div><div class=\"line\">  <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;函数代码&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其中key下的字段代表,需要按哪个字段分组.<br>initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.<br>$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.</p>\n<p>栗子：如下我们按年龄分组,同级不同年龄的用户的多少:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\"></div><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;count:0&#125;,</div><div class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.count++</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;); </div><div class=\"line\">    [</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"count\"</span>: 1&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"count\"</span>: 3&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"count\"</span>: 2&#125;</div><div class=\"line\">    ]</div><div class=\"line\"></div><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;users:[]&#125;,</div><div class=\"line\">    reduce:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.users.push(doc.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">  [</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user0\"</span>]&#125;,</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</div><div class=\"line\">  ]</div></pre></td></tr></table></figure></p>\n<p>另外本函数还有两个可选参数 condition 和 finalize<br>condition就是分组的条件筛选类似mysql中的having<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;users:[]&#125;,</div><div class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.users.push(doc.name)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    condition:&#123;age:&#123;<span class=\"variable\">$gt</span>:0&#125;&#125;&#125;)</div><div class=\"line\">　<span class=\"comment\">##筛选出age大于0的:</span></div><div class=\"line\">[</div><div class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-3、count统计\"><a href=\"#4-3、count统计\" class=\"headerlink\" title=\"4.3、count统计\"></a>4.3、count统计</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.goods.count()            <span class=\"comment\">##统计该集合总数</span></div><div class=\"line\">db.goods.count(&#123;cat_id: 3&#125;) <span class=\"comment\">##统计cat_id=3的总数</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-4、distinct排重\"><a href=\"#4-4、distinct排重\" class=\"headerlink\" title=\"4.4、distinct排重\"></a>4.4、distinct排重</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\"></div><div class=\"line\"> db.user.distinct(<span class=\"string\">\"age\"</span>) <span class=\"comment\">## 特殊,传入的参数直接是字符串,而不是对象;</span></div><div class=\"line\">     [0, 1, 2]</div></pre></td></tr></table></figure>\n<h4 id=\"4-5、子文档查询-elemMatch\"><a href=\"#4-5、子文档查询-elemMatch\" class=\"headerlink\" title=\"4.5、子文档查询$elemMatch\"></a>4.5、子文档查询$elemMatch</h4><p>elemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。<br>注意：<br>(1)数组中元素是内嵌文档。<br>(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。<br>假设集合school有如下数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> _id: 1,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"john\"</span>, school: 102, age: 10 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"jess\"</span>, school: 102, age: 11 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"jeff\"</span>, school: 108, age: 15 &#125;</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 2,</div><div class=\"line\"> zipcode: 63110,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 3,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 4,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"barney\"</span>, school: 102, age: 7 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102 &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"john\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:10&#125;]&#125;</div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 3&#125;</div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 4, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"barney\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:7&#125;]&#125;</div></pre></td></tr></table></figure></p>\n<p>查询结果说明：<br><code>_id为1的文档</code>，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。<br><code>_id为3的文档</code>，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。</p>\n<p>$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102, age: &#123; <span class=\"variable\">$gt</span>: 10&#125; &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"jess\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:11&#125;]&#125;</div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 3&#125;</div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 4&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"part2-CRUD操作-Creat-Read-Update-Delete\"><a href=\"#part2-CRUD操作-Creat-Read-Update-Delete\" class=\"headerlink\" title=\"part2 CRUD操作(Creat,Read,Update,Delete)\"></a>part2 CRUD操作(Creat,Read,Update,Delete)</h2><h3 id=\"一、基础：\"><a href=\"#一、基础：\" class=\"headerlink\" title=\"一、基础：\"></a>一、基础：</h3><p>1、document(文档)</p>\n<p>MongoDB把所有数据存放在类似于JSON数据结构的文档内：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</div></pre></td></tr></table></figure></p>","more":"<p>2、collection(集合)</p>\n<p>集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">500</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;</div><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil2\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">550</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;</div><div class=\"line\">&#123; <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"pencil3\"</span>, <span class=\"attr\">\"qty\"</span>: <span class=\"number\">800</span>, <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;</div></pre></td></tr></table></figure></p>\n<p>3、database(数据库)</p>\n<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。</p>\n<h3 id=\"二、数据库操作：\"><a href=\"#二、数据库操作：\" class=\"headerlink\" title=\"二、数据库操作：\"></a>二、数据库操作：</h3><p>连接及运行mongoDB<br>“<code>show dbs</code>“命令可以显示所有的数据的列表<br>“<code>db</code>“命令可以显示当前数据库对象或集合<br>“<code>use</code>“命令可以连接到一个指定的数据库<br>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。<br>  1.不能是空字符串（””)。<br>  2.不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。<br>  3.应全部小写。<br>  4.最多64字节。</p>\n<p>1、创建数据库：<code>use Database_Name</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use <span class=\"built_in\">test</span>  <span class=\"comment\">##创建名为test的数据库</span></div></pre></td></tr></table></figure></p>\n<p>2、删除当前数据库：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase()</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、文档操作（以-Collection-Name-col-为例）\"><a href=\"#三、文档操作（以-Collection-Name-col-为例）\" class=\"headerlink\" title=\"三、文档操作（以 Collection_Name = col 为例）\"></a>三、文档操作（以 Collection_Name = col 为例）</h3><h4 id=\"1、插入：\"><a href=\"#1、插入：\" class=\"headerlink\" title=\"1、插入：\"></a>1、插入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.insert(Document)     <span class=\"comment\">##插入一条或多组数据</span></div><div class=\"line\">db.col.insertOne(Document)  <span class=\"comment\">##插入一条数据</span></div><div class=\"line\">db.col.insertMany(Document) <span class=\"comment\">##插入多条数据</span></div><div class=\"line\"><span class=\"comment\">##例如：</span></div><div class=\"line\">    db.col.insertOne(&#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"pencil\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span> &#125;)</div><div class=\"line\">    db.col.insertMany([</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.2\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.3\"</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"string\">\"item\"</span>: <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.4\"</span> &#125;</div><div class=\"line\">    ])</div></pre></td></tr></table></figure>\n<h4 id=\"2、删除：\"><a href=\"#2、删除：\" class=\"headerlink\" title=\"2、删除：\"></a>2、删除：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.remove(&#123;&#125;)                    <span class=\"comment\">##删除所有数据</span></div><div class=\"line\">db.col.remove(query &lt;,options&gt;)</div><div class=\"line\">    <span class=\"comment\">#  query: 查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  ptions:两个可选参数</span></div><div class=\"line\">    <span class=\"comment\">#      &#123;justOne: &lt;boolean&gt;,     //默认false，删除所有匹配到的。</span></div><div class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//抛出异常的级别。</span></div><div class=\"line\">    <span class=\"comment\">#      &#125;</span></div><div class=\"line\">db.col.deleteOne(query &lt;,options&gt;)   <span class=\"comment\">##同上，无justOne参数，只删除第一条</span></div><div class=\"line\">db.col.deleteMany(query &lt;,options&gt;)  <span class=\"comment\">##同上，无justOne参数，只删除多条</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、更新：\"><a href=\"#3、更新：\" class=\"headerlink\" title=\"3、更新：\"></a>3、更新：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.update(query, update &lt;,options&gt;)</div><div class=\"line\">    <span class=\"comment\">#  query:  查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  update: 更新的内容，语法：&#123;$set:query&#125;</span></div><div class=\"line\">    <span class=\"comment\">#  options:三个可选参数</span></div><div class=\"line\">    <span class=\"comment\">#      &#123;upsert: &lt;boolean&gt;,      //如果不存在update的记录，是否插入新数据，默认:false。</span></div><div class=\"line\">    <span class=\"comment\">#       multi: &lt;boolean&gt;,       //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。</span></div><div class=\"line\">    <span class=\"comment\">#       writeConcern: &lt;document&gt;//#抛出异常的级别。</span></div><div class=\"line\">    <span class=\"comment\">#      &#125;</span></div><div class=\"line\"><span class=\"comment\">##例如：</span></div><div class=\"line\">    db.col.update(</div><div class=\"line\">        &#123;<span class=\"string\">\"type\"</span>: <span class=\"string\">\"no.1\"</span>&#125;, </div><div class=\"line\">        &#123;<span class=\"variable\">$set</span>: &#123;<span class=\"string\">\"item\"</span>: <span class=\"string\">\"human\"</span>&#125;&#125;, </div><div class=\"line\">        &#123;upsert: <span class=\"literal\">true</span>, multi: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">        )</div><div class=\"line\">db.col.updateOne()                    <span class=\"comment\">##同上，无multi参数，只更新第一条</span></div><div class=\"line\">db.col.updateMany()                   <span class=\"comment\">##同上，无multi参数</span></div><div class=\"line\">db.col.replaceOne()                   <span class=\"comment\">##同updateOne</span></div><div class=\"line\">db.col.save(document &lt;,writeConcern&gt;) <span class=\"comment\">##通过传入的文档整个替换</span></div></pre></td></tr></table></figure>\n<h5 id=\"insert-与-save的区别\"><a href=\"#insert-与-save的区别\" class=\"headerlink\" title=\"insert 与 save的区别\"></a>insert 与 save的区别</h5><p>如果插入的数据的_id相同,save将会更新该文档,而insert将会报错</p>\n<h5 id=\"update常用操作符\"><a href=\"#update常用操作符\" class=\"headerlink\" title=\"update常用操作符\"></a>update常用操作符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$set</span>         <span class=\"comment\">##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.</span></div><div class=\"line\"><span class=\"variable\">$unset</span>       <span class=\"comment\">##删除文档中的一个字段.</span></div><div class=\"line\"><span class=\"variable\">$rename</span>      <span class=\"comment\">##重命名某个列</span></div><div class=\"line\"><span class=\"variable\">$inc</span>         <span class=\"comment\">##增长某个列</span></div><div class=\"line\"><span class=\"variable\">$setOnInsert</span> <span class=\"comment\">##当upsert为true时,并且发生了insert操作时,可以补充的字段</span></div><div class=\"line\"><span class=\"variable\">$push</span>        <span class=\"comment\">##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.</span></div><div class=\"line\"><span class=\"variable\">$pushAll</span>     <span class=\"comment\">##将多个数值一次存入数组.上面的push只能一个一个的存入</span></div><div class=\"line\"><span class=\"variable\">$addToSet</span>    <span class=\"comment\">##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.</span></div><div class=\"line\"><span class=\"variable\">$pop</span>         <span class=\"comment\">##删除数组最后一个元素</span></div><div class=\"line\"><span class=\"variable\">$pull</span>        <span class=\"comment\">##删除数组中的指定的元素,如果删除的字段不是数组,会报错</span></div><div class=\"line\"><span class=\"variable\">$pullAll</span>     <span class=\"comment\">##删除数组中的多个值,跟pushAll与push的关系类似.</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、查询\"><a href=\"#4、查询\" class=\"headerlink\" title=\"4、查询\"></a>4、查询</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.find(&#123;&#125;)          <span class=\"comment\">##查询所有文档</span></div><div class=\"line\">db.col.find().pretty()   <span class=\"comment\">##以易读的方式来读取数据</span></div><div class=\"line\">db.collection.find(query, projection)</div><div class=\"line\">    <span class=\"comment\">#  query：查询条件(数据索引或名字)</span></div><div class=\"line\">    <span class=\"comment\">#  projection：可选。指定返回的字段。</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-1、深入查询表达式\"><a href=\"#4-1、深入查询表达式\" class=\"headerlink\" title=\"4.1、深入查询表达式\"></a>4.1、深入查询表达式</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.col.find()<span class=\"comment\">##查询所有</span></div><div class=\"line\">db.col.find(&#123;filed: value&#125;)                              <span class=\"comment\">##等值查询</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$ne</span>: value&#125;&#125;)                       <span class=\"comment\">##不等于 $ne</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$nin</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##不能包含给定的值 $nin</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$all</span>: [value1, value2, ...]&#125;&#125;)      <span class=\"comment\">##必须包含所有给定的值 $all</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$in</span>: [value1, value2, ...]&#125;&#125;)       <span class=\"comment\">##只要包含一个或多个给定的值 $in</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:1&#125;&#125;)                        <span class=\"comment\">##存在filed字段的</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$exists</span>:0&#125;&#125;)                        <span class=\"comment\">##不存在filed字段的</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$mod</span>:[3,1]&#125;&#125;)                       <span class=\"comment\">##模三余一，$mod(取模操作)</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$or</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) <span class=\"comment\">##或 $or</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$nor</span>: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)<span class=\"comment\">##排除 $nor</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$size</span>: 3&#125;&#125;)                         <span class=\"comment\">##返回值得数组是给定的长度(3) $size</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> ...&#125;&#125;)            <span class=\"comment\">##回调，隐式迭代，符合条件才返回</span></div><div class=\"line\">db.col.find(&#123;<span class=\"variable\">$where</span>: <span class=\"string\">'...'</span>&#125;&#125;)                            <span class=\"comment\">##同上</span></div><div class=\"line\">db.col.find(&#123;age: &#123;<span class=\"variable\">$lt</span>: 5&#125;&#125;).<span class=\"built_in\">limit</span>(3)                    <span class=\"comment\">##查询age的值小于5，限制3条</span></div><div class=\"line\">    <span class=\"comment\">#范围查询：</span></div><div class=\"line\">    <span class=\"comment\">#    $lt  （小于）</span></div><div class=\"line\">    <span class=\"comment\">#    $gt  （大于）</span></div><div class=\"line\">    <span class=\"comment\">#    $lte （小于等于）</span></div><div class=\"line\">    <span class=\"comment\">#    $gte （大于等于）</span></div><div class=\"line\">    <span class=\"comment\">#    limit（限制显示）</span></div><div class=\"line\">db.col.find().skip(2).<span class=\"built_in\">limit</span>(3)                           <span class=\"comment\">##跳过前两个文档查询后面三个</span></div><div class=\"line\">    <span class=\"comment\">#  skip(num):表示跳过前面num个文档</span></div><div class=\"line\">db.col.find().sort(&#123;age: 1&#125;)                             <span class=\"comment\">##查询后以age升序排列显示</span></div><div class=\"line\">    <span class=\"comment\">#  sort():排序，这里 1 代表升序, -1 代表降序.</span></div><div class=\"line\">db.col.find(&#123;filed: /user.*/i&#125;)                          <span class=\"comment\">##正则，查询filed以user开头不区分大小写（正则效率低）</span></div><div class=\"line\">db.col.find(&#123;filed: &#123;<span class=\"variable\">$type</span>: 1&#125;&#125;)                         <span class=\"comment\">##查找filed为双精度的文档</span></div><div class=\"line\">    <span class=\"comment\"># 根据数据类型查询 $type</span></div><div class=\"line\">    <span class=\"comment\">#      |类型　　　　　　　　|编号|</span></div><div class=\"line\">    <span class=\"comment\">#      |双精度　　　　　　　|1 　|</span></div><div class=\"line\">    <span class=\"comment\">#      |字符串　　　　　　　|2 　|</span></div><div class=\"line\">    <span class=\"comment\">#      |对象　　　　　　　　|3   |</span></div><div class=\"line\">    <span class=\"comment\">#      |数组　　　　　　　　|4   |</span></div><div class=\"line\">    <span class=\"comment\">#      |二进制数据　　　　　|5   |</span></div><div class=\"line\">    <span class=\"comment\">#      |对象ID　　　　　　　|7   |</span></div><div class=\"line\">    <span class=\"comment\">#      |布尔值　　　　　　　|8   |</span></div><div class=\"line\">    <span class=\"comment\">#      |日期　　　　　　　　|9   |</span></div><div class=\"line\">    <span class=\"comment\">#      |空　　　　　　　　　|10  |</span></div><div class=\"line\">    <span class=\"comment\">#      |正则表达式　　　　　|11  |</span></div><div class=\"line\">    <span class=\"comment\">#      |JavaScript　　　　|13  |</span></div><div class=\"line\">    <span class=\"comment\">#      |符号　　　　　　　　|14  |</span></div><div class=\"line\">    <span class=\"comment\">#      |JavaScript(带范围)|15  |</span></div><div class=\"line\">    <span class=\"comment\">#      |32位整数　　　　　　|16  |</span></div><div class=\"line\">    <span class=\"comment\">#      |时间戳　　　　　　　|17  |</span></div><div class=\"line\">    <span class=\"comment\">#      |64位整数　　　　　　|18  |</span></div><div class=\"line\">    <span class=\"comment\">#      |最小键　　　　　　　|255 |</span></div><div class=\"line\">    <span class=\"comment\">#      |最大键　　　　　　　|127 |</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-2、group分组查询\"><a href=\"#4-2、group分组查询\" class=\"headerlink\" title=\"4.2、group分组查询\"></a>4.2、group分组查询</h4><p>group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">group(&#123;</div><div class=\"line\">  key:&#123;字段:1&#125;,</div><div class=\"line\">  initial:&#123;变量:初始值&#125;,</div><div class=\"line\">  <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;函数代码&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其中key下的字段代表,需要按哪个字段分组.<br>initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.<br>$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果.</p>\n<p>栗子：如下我们按年龄分组,同级不同年龄的用户的多少:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">    &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\"></div><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;count:0&#125;,</div><div class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.count++</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;); </div><div class=\"line\">    [</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"count\"</span>: 1&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"count\"</span>: 3&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"count\"</span>: 2&#125;</div><div class=\"line\">    ]</div><div class=\"line\"></div><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;users:[]&#125;,</div><div class=\"line\">    reduce:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.users.push(doc.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">  [</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 0, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user0\"</span>]&#125;,</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</div><div class=\"line\">      &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</div><div class=\"line\">  ]</div></pre></td></tr></table></figure></p>\n<p>另外本函数还有两个可选参数 condition 和 finalize<br>condition就是分组的条件筛选类似mysql中的having<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">    key:&#123;age:1&#125;,</div><div class=\"line\">    initial:&#123;users:[]&#125;,</div><div class=\"line\">    <span class=\"variable\">$reduce</span>:<span class=\"keyword\">function</span>(doc,prev)&#123;</div><div class=\"line\">        prev.users.push(doc.name)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    condition:&#123;age:&#123;<span class=\"variable\">$gt</span>:0&#125;&#125;&#125;)</div><div class=\"line\">　<span class=\"comment\">##筛选出age大于0的:</span></div><div class=\"line\">[</div><div class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 1, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user1\"</span>, <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"user4\"</span>]&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"age\"</span>: 2, <span class=\"string\">\"users\"</span>: [<span class=\"string\">\"user2\"</span>, <span class=\"string\">\"user5\"</span>]&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-3、count统计\"><a href=\"#4-3、count统计\" class=\"headerlink\" title=\"4.3、count统计\"></a>4.3、count统计</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.goods.count()            <span class=\"comment\">##统计该集合总数</span></div><div class=\"line\">db.goods.count(&#123;cat_id: 3&#125;) <span class=\"comment\">##统计cat_id=3的总数</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-4、distinct排重\"><a href=\"#4-4、distinct排重\" class=\"headerlink\" title=\"4.4、distinct排重\"></a>4.4、distinct排重</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find()</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b2\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user0\"</span>, <span class=\"string\">\"age\"</span> : 0 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b3\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user1\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b4\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user2\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b5\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user3\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b6\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user4\"</span>, <span class=\"string\">\"age\"</span> : 1 &#125;</div><div class=\"line\">   &#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5198c286c686eb50e2c843b7\"</span>), <span class=\"string\">\"name\"</span> : <span class=\"string\">\"user5\"</span>, <span class=\"string\">\"age\"</span> : 2 &#125;</div><div class=\"line\"></div><div class=\"line\"> db.user.distinct(<span class=\"string\">\"age\"</span>) <span class=\"comment\">## 特殊,传入的参数直接是字符串,而不是对象;</span></div><div class=\"line\">     [0, 1, 2]</div></pre></td></tr></table></figure>\n<h4 id=\"4-5、子文档查询-elemMatch\"><a href=\"#4-5、子文档查询-elemMatch\" class=\"headerlink\" title=\"4.5、子文档查询$elemMatch\"></a>4.5、子文档查询$elemMatch</h4><p>elemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。<br>注意：<br>(1)数组中元素是内嵌文档。<br>(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。<br>假设集合school有如下数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> _id: 1,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"john\"</span>, school: 102, age: 10 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"jess\"</span>, school: 102, age: 11 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"jeff\"</span>, school: 108, age: 15 &#125;</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 2,</div><div class=\"line\"> zipcode: 63110,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 3,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"ajax\"</span>, school: 100, age: 7 &#125;,</div><div class=\"line\">              &#123; name: <span class=\"string\">\"achilles\"</span>, school: 100, age: 8 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\"> _id: 4,</div><div class=\"line\"> zipcode: 63109,</div><div class=\"line\"> students: [</div><div class=\"line\">              &#123; name: <span class=\"string\">\"barney\"</span>, school: 102, age: 7 &#125;,</div><div class=\"line\">           ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102 &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"john\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:10&#125;]&#125;</div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 3&#125;</div><div class=\"line\">&#123;<span class=\"string\">\"_id\"</span>: 4, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"barney\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:7&#125;]&#125;</div></pre></td></tr></table></figure></p>\n<p>查询结果说明：<br><code>_id为1的文档</code>，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。<br><code>_id为3的文档</code>，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。</p>\n<p>$elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; <span class=\"variable\">$elemMatch</span>: &#123; school: 102, age: &#123; <span class=\"variable\">$gt</span>: 10&#125; &#125; &#125; &#125; );</div><div class=\"line\"></div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 1, <span class=\"string\">\"students\"</span>: [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"jess\"</span>, <span class=\"string\">\"school\"</span>:102, <span class=\"string\">\"age\"</span>:11&#125;]&#125;</div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 3&#125;</div><div class=\"line\">  &#123;<span class=\"string\">\"_id\"</span>: 4&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Node.js Buffer缓冲区(4)","date":"2016-06-27T07:54:06.000Z","_content":"\n### 4、Node.js Buffer(缓冲区)\nJavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。一个 `Buffer` 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。\n<!-- more -->\n#### 创建Buffer类\n``` javascript\n  var buf = new Buffer(10);//创建长度为10字节的Buffer实例\n  var buf = new Buffer([10, 20, 30, 40, 50]);//通过给定的数组创建Buffer实例\n  var buf = new Buffer(\"www.runoob.com\", \"utf-8\");//通过一个字符串来创建Buffer实例\n```\n#### 写入缓冲区\n``` javascript\n  buf.write(string, [offset], [length], [encoding]);\n```\n参数：\n  `string` - 写入缓冲区的字符串。\n  `offset` - 缓冲区开始写入的索引值，默认为0.\n  `length` - 写入的字节数，默认为buffer.length\n  `encoding` - 使用的编码。默认‘utf-8’\n返回值：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。\n#### 从缓冲区读取数据\n``` javascript\n  buf.toString([encoding], [start], [end]);\n```\n参数：\n  `encoding` - 使用的编码。默认‘utf-8’.\n  `start` - 指定开始读取的索引位置，默认为0.\n  `end` - 结束位置，默认缓冲区末尾。\n返回值：解码缓冲区数据并使用指定的编码返回字符串。\n#### 将 Buffer 转换为 JSON 对象\n``` javascript\n  buf.toJSON();\n```\n返回值：返回JSON对象。\n#### 缓冲区合并\n``` javascript\n  Buffer.concat(list, [totalLength]);\n```\n参数：\n  `list` - 用于合并的Buffer对象数组列表。\n  `totalLength` - 指定合并后Buffer对象的总长度。\n返回值：返回一个多个成员合并的新 Buffer 对象。\n#### 缓冲区比较\n``` javascript\n  buf.compare(otherBuffer);\n```\n返回值：返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。\n#### 拷贝缓冲区\n``` javascript\n  buf.copy(targetBuffer,[targetStart],[sourceStart],[sourceEnd]);\n```\n参数：\n  `targetBuffer` - 要拷贝的 Buffer 对象。\n   `targetStart` - 数字, 可选, 默认: 0\n   `sourceStart` - 数字, 可选, 默认: 0\n     `sourceEnd` - 数字, 可选, 默认: buffer.length\n返回值：无。\n#### 缓冲区剪裁\n``` javascript\n  buf.slice([start],[end]);\n```\n参数：\n  `start` - 数字, 可选, 默认: 0\n  `end` - 数字, 可选, 默认: buffer.length\n返回值：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。\n#### 缓冲区长度\n``` javascript\n  buf.length;\n```\n返回值：返回Buffer对象所占据的内存长度。\n#### Node.js Buffer 模块常用的方法\n  `new Buffer(size)`;//分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。\n  `new Buffer(buffer)`;//拷贝参数 buffer 的数据到 Buffer 实例。\n  `new Buffer(str, [encoding])`;//分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 'utf8'。\n  `buf.length`;//返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。\n  `buf.toString([encoding], [start], [end])`;//根据 encoding 参数（默认是 'utf8'）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。\n  `buf.toJSON()`;//将 Buffer 实例转换为 JSON 对象。\n  `buf[index]`;//获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。\n  `buf.equals(otherBuffer)`;//比较两个缓冲区是否相等，如果是返回 true，否则返回 false。\n  `buf.compare(otherBuffer)`;//比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。\n  `buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])`;//buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。\n  `buf.slice([start, [end]])`;//剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。\n  `buf.fill(value, [offset], [end])`;//使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。\n  `buf.write(string, [offset], [length], [encoding])`;//根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。\n  `buf.writeUIntLE(value, offset, byteLength, [noAssert])`;//将value 写入到 buffer 里， 它由offset 和 byteLength 决定。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。/* 下同。*/\n  `buf.writeUIntBE(value, offset, byteLength, [noAssert])`;\n  `buf.writeUInt8(value, offset, [noAssert])`;\n  `buf.writeUInt16LE(value, offset, [noAssert])`;\n  `buf.writeUInt16BE(value, offset, [noAssert])`;\n  `buf.writeUInt32LE(value, offset, [noAssert])`;\n  `buf.writeUInt32BE(value, offset, [noAssert])`;\n  `buf.writeIntLE(value, offset, byteLength, [noAssert])`;\n  `buf.writeIntBE(value, offset, byteLength, [noAssert])`;\n  `buf.writeInt8(value, offset, [noAssert])`;\n  `buf.writeInt16LE(value, offset, [noAssert])`;\n  `buf.writeInt16BE(value, offset, [noAssert])`;\n  `buf.writeInt32LE(value, offset, [noAssert])`;\n  `buf.writeInt32BE(value, offset, [noAssert])`;\n  `buf.writeFloatLE(value, offset, [noAssert])`;\n  `buf.writeFloatBE(value, offset, [noAssert])`;\n  `buf.writeDoubleLE(value, offset, [noAssert])`;\n  `buf.writeDoubleBE(value, offset, [noAssert])`;\n  `buf.readUInt8(offset, [noAssert])`;//读取。\n  `buf.readUInt16LE(offset, [noAssert])`;\n  `buf.readUInt16BE(offset, [noAssert])`;\n  `buf.readUInt32LE(offset, [noAssert])`;\n  `buf.readUInt32BE(offset, [noAssert])`;\n  `buf.readUIntLE(offset, byteLength, [noAssert])`;\n  `buf.readUIntBE(offset, byteLength, [noAssert])`;\n  `buf.readIntLE(offset, byteLength, [noAssert])`;\n  `buf.readIntBE(offset, byteLength, [noAssert])`;\n  `buf.readInt8(offset, [noAssert])`;\n  `buf.readInt16LE(offset, [noAssert])`;\n  `buf.readInt16BE(offset, [noAssert])`;\n  `buf.readInt32LE(offset, [noAssert])`;\n  `buf.readInt32BE(offset, [noAssert])`;\n  `buf.readFloatLE(offset, [noAssert])`;\n  `buf.readFloatBE(offset, [noAssert])`;\n  `buf.readDoubleLE(offset, [noAssert])`;\n  `buf.readDoubleBE(offset, [noAssert])`;","source":"_posts/Node.js Buffer.md","raw":"---\ntitle: Node.js Buffer缓冲区(4)\ndate: 2016-06-27 15:54:06\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 4、Node.js Buffer(缓冲区)\nJavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。一个 `Buffer` 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。\n<!-- more -->\n#### 创建Buffer类\n``` javascript\n  var buf = new Buffer(10);//创建长度为10字节的Buffer实例\n  var buf = new Buffer([10, 20, 30, 40, 50]);//通过给定的数组创建Buffer实例\n  var buf = new Buffer(\"www.runoob.com\", \"utf-8\");//通过一个字符串来创建Buffer实例\n```\n#### 写入缓冲区\n``` javascript\n  buf.write(string, [offset], [length], [encoding]);\n```\n参数：\n  `string` - 写入缓冲区的字符串。\n  `offset` - 缓冲区开始写入的索引值，默认为0.\n  `length` - 写入的字节数，默认为buffer.length\n  `encoding` - 使用的编码。默认‘utf-8’\n返回值：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。\n#### 从缓冲区读取数据\n``` javascript\n  buf.toString([encoding], [start], [end]);\n```\n参数：\n  `encoding` - 使用的编码。默认‘utf-8’.\n  `start` - 指定开始读取的索引位置，默认为0.\n  `end` - 结束位置，默认缓冲区末尾。\n返回值：解码缓冲区数据并使用指定的编码返回字符串。\n#### 将 Buffer 转换为 JSON 对象\n``` javascript\n  buf.toJSON();\n```\n返回值：返回JSON对象。\n#### 缓冲区合并\n``` javascript\n  Buffer.concat(list, [totalLength]);\n```\n参数：\n  `list` - 用于合并的Buffer对象数组列表。\n  `totalLength` - 指定合并后Buffer对象的总长度。\n返回值：返回一个多个成员合并的新 Buffer 对象。\n#### 缓冲区比较\n``` javascript\n  buf.compare(otherBuffer);\n```\n返回值：返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。\n#### 拷贝缓冲区\n``` javascript\n  buf.copy(targetBuffer,[targetStart],[sourceStart],[sourceEnd]);\n```\n参数：\n  `targetBuffer` - 要拷贝的 Buffer 对象。\n   `targetStart` - 数字, 可选, 默认: 0\n   `sourceStart` - 数字, 可选, 默认: 0\n     `sourceEnd` - 数字, 可选, 默认: buffer.length\n返回值：无。\n#### 缓冲区剪裁\n``` javascript\n  buf.slice([start],[end]);\n```\n参数：\n  `start` - 数字, 可选, 默认: 0\n  `end` - 数字, 可选, 默认: buffer.length\n返回值：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。\n#### 缓冲区长度\n``` javascript\n  buf.length;\n```\n返回值：返回Buffer对象所占据的内存长度。\n#### Node.js Buffer 模块常用的方法\n  `new Buffer(size)`;//分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。\n  `new Buffer(buffer)`;//拷贝参数 buffer 的数据到 Buffer 实例。\n  `new Buffer(str, [encoding])`;//分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 'utf8'。\n  `buf.length`;//返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。\n  `buf.toString([encoding], [start], [end])`;//根据 encoding 参数（默认是 'utf8'）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。\n  `buf.toJSON()`;//将 Buffer 实例转换为 JSON 对象。\n  `buf[index]`;//获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。\n  `buf.equals(otherBuffer)`;//比较两个缓冲区是否相等，如果是返回 true，否则返回 false。\n  `buf.compare(otherBuffer)`;//比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。\n  `buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])`;//buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。\n  `buf.slice([start, [end]])`;//剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。\n  `buf.fill(value, [offset], [end])`;//使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。\n  `buf.write(string, [offset], [length], [encoding])`;//根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。\n  `buf.writeUIntLE(value, offset, byteLength, [noAssert])`;//将value 写入到 buffer 里， 它由offset 和 byteLength 决定。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。/* 下同。*/\n  `buf.writeUIntBE(value, offset, byteLength, [noAssert])`;\n  `buf.writeUInt8(value, offset, [noAssert])`;\n  `buf.writeUInt16LE(value, offset, [noAssert])`;\n  `buf.writeUInt16BE(value, offset, [noAssert])`;\n  `buf.writeUInt32LE(value, offset, [noAssert])`;\n  `buf.writeUInt32BE(value, offset, [noAssert])`;\n  `buf.writeIntLE(value, offset, byteLength, [noAssert])`;\n  `buf.writeIntBE(value, offset, byteLength, [noAssert])`;\n  `buf.writeInt8(value, offset, [noAssert])`;\n  `buf.writeInt16LE(value, offset, [noAssert])`;\n  `buf.writeInt16BE(value, offset, [noAssert])`;\n  `buf.writeInt32LE(value, offset, [noAssert])`;\n  `buf.writeInt32BE(value, offset, [noAssert])`;\n  `buf.writeFloatLE(value, offset, [noAssert])`;\n  `buf.writeFloatBE(value, offset, [noAssert])`;\n  `buf.writeDoubleLE(value, offset, [noAssert])`;\n  `buf.writeDoubleBE(value, offset, [noAssert])`;\n  `buf.readUInt8(offset, [noAssert])`;//读取。\n  `buf.readUInt16LE(offset, [noAssert])`;\n  `buf.readUInt16BE(offset, [noAssert])`;\n  `buf.readUInt32LE(offset, [noAssert])`;\n  `buf.readUInt32BE(offset, [noAssert])`;\n  `buf.readUIntLE(offset, byteLength, [noAssert])`;\n  `buf.readUIntBE(offset, byteLength, [noAssert])`;\n  `buf.readIntLE(offset, byteLength, [noAssert])`;\n  `buf.readIntBE(offset, byteLength, [noAssert])`;\n  `buf.readInt8(offset, [noAssert])`;\n  `buf.readInt16LE(offset, [noAssert])`;\n  `buf.readInt16BE(offset, [noAssert])`;\n  `buf.readInt32LE(offset, [noAssert])`;\n  `buf.readInt32BE(offset, [noAssert])`;\n  `buf.readFloatLE(offset, [noAssert])`;\n  `buf.readFloatBE(offset, [noAssert])`;\n  `buf.readDoubleLE(offset, [noAssert])`;\n  `buf.readDoubleBE(offset, [noAssert])`;","slug":"Node.js Buffer","published":1,"updated":"2017-07-30T07:21:47.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvsw000mv0uisnpekbf5","content":"<h3 id=\"4、Node-js-Buffer-缓冲区\"><a href=\"#4、Node-js-Buffer-缓冲区\" class=\"headerlink\" title=\"4、Node.js Buffer(缓冲区)\"></a>4、Node.js Buffer(缓冲区)</h3><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。一个 <code>Buffer</code> 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。<br><a id=\"more\"></a></p>\n<h4 id=\"创建Buffer类\"><a href=\"#创建Buffer类\" class=\"headerlink\" title=\"创建Buffer类\"></a>创建Buffer类</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>);<span class=\"comment\">//创建长度为10字节的Buffer实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);<span class=\"comment\">//通过给定的数组创建Buffer实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"www.runoob.com\"</span>, <span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">//通过一个字符串来创建Buffer实例</span></div></pre></td></tr></table></figure>\n<h4 id=\"写入缓冲区\"><a href=\"#写入缓冲区\" class=\"headerlink\" title=\"写入缓冲区\"></a>写入缓冲区</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.write(string, [offset], [length], [encoding]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>string</code> - 写入缓冲区的字符串。<br>  <code>offset</code> - 缓冲区开始写入的索引值，默认为0.<br>  <code>length</code> - 写入的字节数，默认为buffer.length<br>  <code>encoding</code> - 使用的编码。默认‘utf-8’<br>返回值：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p>\n<h4 id=\"从缓冲区读取数据\"><a href=\"#从缓冲区读取数据\" class=\"headerlink\" title=\"从缓冲区读取数据\"></a>从缓冲区读取数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toString([encoding], [start], [end]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>encoding</code> - 使用的编码。默认‘utf-8’.<br>  <code>start</code> - 指定开始读取的索引位置，默认为0.<br>  <code>end</code> - 结束位置，默认缓冲区末尾。<br>返回值：解码缓冲区数据并使用指定的编码返回字符串。</p>\n<h4 id=\"将-Buffer-转换为-JSON-对象\"><a href=\"#将-Buffer-转换为-JSON-对象\" class=\"headerlink\" title=\"将 Buffer 转换为 JSON 对象\"></a>将 Buffer 转换为 JSON 对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toJSON();</div></pre></td></tr></table></figure>\n<p>返回值：返回JSON对象。</p>\n<h4 id=\"缓冲区合并\"><a href=\"#缓冲区合并\" class=\"headerlink\" title=\"缓冲区合并\"></a>缓冲区合并</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Buffer.concat(list, [totalLength]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>list</code> - 用于合并的Buffer对象数组列表。<br>  <code>totalLength</code> - 指定合并后Buffer对象的总长度。<br>返回值：返回一个多个成员合并的新 Buffer 对象。</p>\n<h4 id=\"缓冲区比较\"><a href=\"#缓冲区比较\" class=\"headerlink\" title=\"缓冲区比较\"></a>缓冲区比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.compare(otherBuffer);</div></pre></td></tr></table></figure>\n<p>返回值：返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。</p>\n<h4 id=\"拷贝缓冲区\"><a href=\"#拷贝缓冲区\" class=\"headerlink\" title=\"拷贝缓冲区\"></a>拷贝缓冲区</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.copy(targetBuffer,[targetStart],[sourceStart],[sourceEnd]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>targetBuffer</code> - 要拷贝的 Buffer 对象。<br>   <code>targetStart</code> - 数字, 可选, 默认: 0<br>   <code>sourceStart</code> - 数字, 可选, 默认: 0<br>     <code>sourceEnd</code> - 数字, 可选, 默认: buffer.length<br>返回值：无。</p>\n<h4 id=\"缓冲区剪裁\"><a href=\"#缓冲区剪裁\" class=\"headerlink\" title=\"缓冲区剪裁\"></a>缓冲区剪裁</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.slice([start],[end]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>start</code> - 数字, 可选, 默认: 0<br>  <code>end</code> - 数字, 可选, 默认: buffer.length<br>返回值：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</p>\n<h4 id=\"缓冲区长度\"><a href=\"#缓冲区长度\" class=\"headerlink\" title=\"缓冲区长度\"></a>缓冲区长度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.length;</div></pre></td></tr></table></figure>\n<p>返回值：返回Buffer对象所占据的内存长度。</p>\n<h4 id=\"Node-js-Buffer-模块常用的方法\"><a href=\"#Node-js-Buffer-模块常用的方法\" class=\"headerlink\" title=\"Node.js Buffer 模块常用的方法\"></a>Node.js Buffer 模块常用的方法</h4><p>  <code>new Buffer(size)</code>;//分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。<br>  <code>new Buffer(buffer)</code>;//拷贝参数 buffer 的数据到 Buffer 实例。<br>  <code>new Buffer(str, [encoding])</code>;//分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 ‘utf8’。<br>  <code>buf.length</code>;//返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。<br>  <code>buf.toString([encoding], [start], [end])</code>;//根据 encoding 参数（默认是 ‘utf8’）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。<br>  <code>buf.toJSON()</code>;//将 Buffer 实例转换为 JSON 对象。<br>  <code>buf[index]</code>;//获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。<br>  <code>buf.equals(otherBuffer)</code>;//比较两个缓冲区是否相等，如果是返回 true，否则返回 false。<br>  <code>buf.compare(otherBuffer)</code>;//比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。<br>  <code>buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</code>;//buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。<br>  <code>buf.slice([start, [end]])</code>;//剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。<br>  <code>buf.fill(value, [offset], [end])</code>;//使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。<br>  <code>buf.write(string, [offset], [length], [encoding])</code>;//根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。<br>  <code>buf.writeUIntLE(value, offset, byteLength, [noAssert])</code>;//将value 写入到 buffer 里， 它由offset 和 byteLength 决定。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。/<em> 下同。</em>/<br>  <code>buf.writeUIntBE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeUInt8(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt16LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt16BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt32LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt32BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeIntLE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeIntBE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeInt8(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt16LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt16BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt32LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt32BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeFloatLE(value, offset, [noAssert])</code>;<br>  <code>buf.writeFloatBE(value, offset, [noAssert])</code>;<br>  <code>buf.writeDoubleLE(value, offset, [noAssert])</code>;<br>  <code>buf.writeDoubleBE(value, offset, [noAssert])</code>;<br>  <code>buf.readUInt8(offset, [noAssert])</code>;//读取。<br>  <code>buf.readUInt16LE(offset, [noAssert])</code>;<br>  <code>buf.readUInt16BE(offset, [noAssert])</code>;<br>  <code>buf.readUInt32LE(offset, [noAssert])</code>;<br>  <code>buf.readUInt32BE(offset, [noAssert])</code>;<br>  <code>buf.readUIntLE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readUIntBE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readIntLE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readIntBE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readInt8(offset, [noAssert])</code>;<br>  <code>buf.readInt16LE(offset, [noAssert])</code>;<br>  <code>buf.readInt16BE(offset, [noAssert])</code>;<br>  <code>buf.readInt32LE(offset, [noAssert])</code>;<br>  <code>buf.readInt32BE(offset, [noAssert])</code>;<br>  <code>buf.readFloatLE(offset, [noAssert])</code>;<br>  <code>buf.readFloatBE(offset, [noAssert])</code>;<br>  <code>buf.readDoubleLE(offset, [noAssert])</code>;<br>  <code>buf.readDoubleBE(offset, [noAssert])</code>;</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"4、Node-js-Buffer-缓冲区\"><a href=\"#4、Node-js-Buffer-缓冲区\" class=\"headerlink\" title=\"4、Node.js Buffer(缓冲区)\"></a>4、Node.js Buffer(缓冲区)</h3><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。一个 <code>Buffer</code> 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。<br>","more":"</p>\n<h4 id=\"创建Buffer类\"><a href=\"#创建Buffer类\" class=\"headerlink\" title=\"创建Buffer类\"></a>创建Buffer类</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>);<span class=\"comment\">//创建长度为10字节的Buffer实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);<span class=\"comment\">//通过给定的数组创建Buffer实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"www.runoob.com\"</span>, <span class=\"string\">\"utf-8\"</span>);<span class=\"comment\">//通过一个字符串来创建Buffer实例</span></div></pre></td></tr></table></figure>\n<h4 id=\"写入缓冲区\"><a href=\"#写入缓冲区\" class=\"headerlink\" title=\"写入缓冲区\"></a>写入缓冲区</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.write(string, [offset], [length], [encoding]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>string</code> - 写入缓冲区的字符串。<br>  <code>offset</code> - 缓冲区开始写入的索引值，默认为0.<br>  <code>length</code> - 写入的字节数，默认为buffer.length<br>  <code>encoding</code> - 使用的编码。默认‘utf-8’<br>返回值：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p>\n<h4 id=\"从缓冲区读取数据\"><a href=\"#从缓冲区读取数据\" class=\"headerlink\" title=\"从缓冲区读取数据\"></a>从缓冲区读取数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toString([encoding], [start], [end]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>encoding</code> - 使用的编码。默认‘utf-8’.<br>  <code>start</code> - 指定开始读取的索引位置，默认为0.<br>  <code>end</code> - 结束位置，默认缓冲区末尾。<br>返回值：解码缓冲区数据并使用指定的编码返回字符串。</p>\n<h4 id=\"将-Buffer-转换为-JSON-对象\"><a href=\"#将-Buffer-转换为-JSON-对象\" class=\"headerlink\" title=\"将 Buffer 转换为 JSON 对象\"></a>将 Buffer 转换为 JSON 对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toJSON();</div></pre></td></tr></table></figure>\n<p>返回值：返回JSON对象。</p>\n<h4 id=\"缓冲区合并\"><a href=\"#缓冲区合并\" class=\"headerlink\" title=\"缓冲区合并\"></a>缓冲区合并</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Buffer.concat(list, [totalLength]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>list</code> - 用于合并的Buffer对象数组列表。<br>  <code>totalLength</code> - 指定合并后Buffer对象的总长度。<br>返回值：返回一个多个成员合并的新 Buffer 对象。</p>\n<h4 id=\"缓冲区比较\"><a href=\"#缓冲区比较\" class=\"headerlink\" title=\"缓冲区比较\"></a>缓冲区比较</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.compare(otherBuffer);</div></pre></td></tr></table></figure>\n<p>返回值：返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。</p>\n<h4 id=\"拷贝缓冲区\"><a href=\"#拷贝缓冲区\" class=\"headerlink\" title=\"拷贝缓冲区\"></a>拷贝缓冲区</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.copy(targetBuffer,[targetStart],[sourceStart],[sourceEnd]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>targetBuffer</code> - 要拷贝的 Buffer 对象。<br>   <code>targetStart</code> - 数字, 可选, 默认: 0<br>   <code>sourceStart</code> - 数字, 可选, 默认: 0<br>     <code>sourceEnd</code> - 数字, 可选, 默认: buffer.length<br>返回值：无。</p>\n<h4 id=\"缓冲区剪裁\"><a href=\"#缓冲区剪裁\" class=\"headerlink\" title=\"缓冲区剪裁\"></a>缓冲区剪裁</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.slice([start],[end]);</div></pre></td></tr></table></figure>\n<p>参数：<br>  <code>start</code> - 数字, 可选, 默认: 0<br>  <code>end</code> - 数字, 可选, 默认: buffer.length<br>返回值：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</p>\n<h4 id=\"缓冲区长度\"><a href=\"#缓冲区长度\" class=\"headerlink\" title=\"缓冲区长度\"></a>缓冲区长度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.length;</div></pre></td></tr></table></figure>\n<p>返回值：返回Buffer对象所占据的内存长度。</p>\n<h4 id=\"Node-js-Buffer-模块常用的方法\"><a href=\"#Node-js-Buffer-模块常用的方法\" class=\"headerlink\" title=\"Node.js Buffer 模块常用的方法\"></a>Node.js Buffer 模块常用的方法</h4><p>  <code>new Buffer(size)</code>;//分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。<br>  <code>new Buffer(buffer)</code>;//拷贝参数 buffer 的数据到 Buffer 实例。<br>  <code>new Buffer(str, [encoding])</code>;//分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 ‘utf8’。<br>  <code>buf.length</code>;//返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。<br>  <code>buf.toString([encoding], [start], [end])</code>;//根据 encoding 参数（默认是 ‘utf8’）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。<br>  <code>buf.toJSON()</code>;//将 Buffer 实例转换为 JSON 对象。<br>  <code>buf[index]</code>;//获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。<br>  <code>buf.equals(otherBuffer)</code>;//比较两个缓冲区是否相等，如果是返回 true，否则返回 false。<br>  <code>buf.compare(otherBuffer)</code>;//比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。<br>  <code>buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</code>;//buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。<br>  <code>buf.slice([start, [end]])</code>;//剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。<br>  <code>buf.fill(value, [offset], [end])</code>;//使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。<br>  <code>buf.write(string, [offset], [length], [encoding])</code>;//根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。<br>  <code>buf.writeUIntLE(value, offset, byteLength, [noAssert])</code>;//将value 写入到 buffer 里， 它由offset 和 byteLength 决定。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。/<em> 下同。</em>/<br>  <code>buf.writeUIntBE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeUInt8(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt16LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt16BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt32LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeUInt32BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeIntLE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeIntBE(value, offset, byteLength, [noAssert])</code>;<br>  <code>buf.writeInt8(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt16LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt16BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt32LE(value, offset, [noAssert])</code>;<br>  <code>buf.writeInt32BE(value, offset, [noAssert])</code>;<br>  <code>buf.writeFloatLE(value, offset, [noAssert])</code>;<br>  <code>buf.writeFloatBE(value, offset, [noAssert])</code>;<br>  <code>buf.writeDoubleLE(value, offset, [noAssert])</code>;<br>  <code>buf.writeDoubleBE(value, offset, [noAssert])</code>;<br>  <code>buf.readUInt8(offset, [noAssert])</code>;//读取。<br>  <code>buf.readUInt16LE(offset, [noAssert])</code>;<br>  <code>buf.readUInt16BE(offset, [noAssert])</code>;<br>  <code>buf.readUInt32LE(offset, [noAssert])</code>;<br>  <code>buf.readUInt32BE(offset, [noAssert])</code>;<br>  <code>buf.readUIntLE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readUIntBE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readIntLE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readIntBE(offset, byteLength, [noAssert])</code>;<br>  <code>buf.readInt8(offset, [noAssert])</code>;<br>  <code>buf.readInt16LE(offset, [noAssert])</code>;<br>  <code>buf.readInt16BE(offset, [noAssert])</code>;<br>  <code>buf.readInt32LE(offset, [noAssert])</code>;<br>  <code>buf.readInt32BE(offset, [noAssert])</code>;<br>  <code>buf.readFloatLE(offset, [noAssert])</code>;<br>  <code>buf.readFloatBE(offset, [noAssert])</code>;<br>  <code>buf.readDoubleLE(offset, [noAssert])</code>;<br>  <code>buf.readDoubleBE(offset, [noAssert])</code>;</p>"},{"title":"Node.js EventEmitter类(3)","date":"2016-06-27T05:02:05.000Z","_content":"\n### 3、Node.js EventEmitter 类\nNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\nNode.js里面的许多对象都会分发事件：一个`net.Server` 对象会在每次有新连接时分发一个事件， 一个`fs.readStream`对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 `events.EventEmitter` 的实例。\n`events` 模块只提供了一个对象： `events.EventEmitter`。`EventEmitter` 的核心就是事件触发与事件监听器功能的封装。\n你可以通过`require(\"events\")`;来访问该模块:\n<!-- more -->\n``` javascript\n  var events = require('events');\n  //创建eventEmitter对象\n  var eventEmitter = new events.EventEmitter();\n```\n`EventEmitter` 对象如果在实例化时发生错误，会触发 `'error'` 事件。当添加新的监听器时，`'newListener'` 事件会触发，当监听器被移除时，`'removeListener'` 事件被触发。实例：\n``` javascript\n  //event.js 文件\n  var EventEmitter = require('events').EventEmitter;\n  var event = new EventEmitter();\n  event.on('some_event',function() {\n    console.log('some_event事件触发')；\n  });\n  setTimeout(function() {\n    event.emit('some_event');\n  }, 1000);\n```\n运行这段代码，1 秒后控制台输出了 `some_event 事件触发`。其原理是 `event` 对象注册了事件 `some_event` 的一个监听器，然后我们通过 `setTimeout` 在 1000 毫秒以后向 `event` 对象发送事件 `some_event`，此时会调用`some_event` 的监听器\n执行结果如下:\n```\n  node event.js \n  some_event 事件触发\n```\n`EventEmitter` 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，`EventEmitter` 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n``` javascript\n  //event.js 文件\n  var events = require('events')\n  var emitter = new events.EventEmitter(); \n  emitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener1', arg1, arg2); \n  }); \n  emitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener2', arg1, arg2); \n  }); \n  emitter.emit('someEvent', 'arg1 参数', 'arg2 参数');\n```\n`emitter` 为事件 `someEvent` 注册了两个事件监听器，然后触发了 `someEvent` 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是`EventEmitter`最简单的用法。`EventEmitter` 提供了多个属性，如 `on` 和 `emit`。`on` 函数用于绑定事件函数，`emit` 属性用于触发一个事件。\n执行结果如下:\n```\n  node event.js \n  listener1 arg1 参数 arg2 参数\n  listener2 arg1 参数 arg2 参数\n```\n#### 方法\n1、`addListener(event, listener)`//为指定事件添加一个监听器到监听数组的尾部\n2、`on(event, listener)`//为指定事件注册一个监听器，接受一个字符串 `event` 和一个回调函数:\n``` javascript \n  server.on('connection',function (stream) {\n    console.log('someone connected!');\n  });\n```\n3、`once(event, listener)`//为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。\n``` javascript\n  server.once('connection', function (stream) {\n    console.log('Ah, we have our first user!');\n  });\n```\n4、`removeListener(event, listener)`//移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。\n``` javascript\n  var callback = function(stream) {\n    console.log('someone connected!');\n  };\n  server.on('connection', callback);\n  // ...\n  server.removeListener('connection', callback);\n```\n5、`removeAllListeners([event])`//移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。\n6、`setMaxListeners(n)`//默认情况下， `EventEmitters` 如果你添加的监听器超过 10 个就会输出警告信息。 `setMaxListeners` 函数用于提高监听器的默认限制的数量。\n7、`listeners(event)`//返回指定事件的监听器数组\n8、`emit(event, [arg1], [arg2], [...])`//按参数的顺序执行每个监听器，如果事件有注册监听返回 `true`，否则返回 `false`。\n\n#### 类方法\n1、`listenerCount(emitter, event)`//返回指定事件的监听器数量。\n\n#### 事件\n1、`newListener` //该事件再添加新监听器时被触发\n  `event` - 字符串，事件名称\n  `listener` - 处理事件函数\n2、`removeListener`//从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。\n  `event` - 字符串，事件名称\n  `listener` - 处理事件函数\n实例：通过 `connection`（连接）事件演示了 `EventEmitter` 类的应用\n``` javascript\n  // 创建main.js文件：\n  var events = require('events');\n  var eventEmitter = new events.EventEmitter();\n  // 监听器 #1\n  var listener1 = function listener1() {\n    console.log('监听器 listener1 执行。');\n  }\n  // 监听器 #2\n  var listener2 = function listener2() {\n    console.log('监听器 listener2 执行。');\n  }\n  // 绑定connection事件，处理函数为listener1\n  eventEmitter.addListener('connection',listener1);\n  // 绑定connection事件，处理函数为listener2\n  eventEmitter.on('connection',listener2);\n  var eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');\n  console.log(eventListeners + \"个监听器连接事件\");\n  //处理connection事件\n  eventEmitter.emit('connection');\n  //移除监绑定的listener1函数\n  eventEmitter.removeListener('connection',listener1);\n  console.log(\"listener1不再受监听。\");\n  //触发连接事件\n  eventEmitter.emit('connection');\n  eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');\n  console.log(eventListeners + \"个监听器连接事件\");\n  console.log(\"程序执行完毕。\");\n```\n//执行结果：\n```\n  node main.js\n  2个监听器连接事件\n  监听器 listener1 执行。\n  监听器 listener2 执行。\n  listener1不再受监听。\n  监听器 listener2 执行。\n  1个监听器连接事件\n  程序执行完毕。\n```\n#### error事件\n`EventEmitter` 定义了一个特殊的事件 `error`，它包含了错误的语义，我们在遇到 异常的时候通常会触发 `error` 事件。当 `error` 被触发时，`EventEmitter` 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 `error` 事件的对象设置监听器，避免遇到错误后整个程序崩溃。\n#### 继承 EventEmitter\n大多数时候我们不会直接使用 `EventEmitter`，而是在对象中继承它。包括 `fs、net、 http` 在内的，只要是支持事件响应的核心模块都是 `EventEmitter `的子类。\n原因有两点：\n  -首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。\n  -其次 `JavaScript` 的对象机制是基于原型的，支持 部分多重继承，继承 `EventEmitter` 不会打乱对象原有的继承关系。","source":"_posts/Node.js EventEmitter类.md","raw":"---\ntitle: Node.js EventEmitter类(3)\ndate: 2016-06-27 13:02:05\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 3、Node.js EventEmitter 类\nNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\nNode.js里面的许多对象都会分发事件：一个`net.Server` 对象会在每次有新连接时分发一个事件， 一个`fs.readStream`对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 `events.EventEmitter` 的实例。\n`events` 模块只提供了一个对象： `events.EventEmitter`。`EventEmitter` 的核心就是事件触发与事件监听器功能的封装。\n你可以通过`require(\"events\")`;来访问该模块:\n<!-- more -->\n``` javascript\n  var events = require('events');\n  //创建eventEmitter对象\n  var eventEmitter = new events.EventEmitter();\n```\n`EventEmitter` 对象如果在实例化时发生错误，会触发 `'error'` 事件。当添加新的监听器时，`'newListener'` 事件会触发，当监听器被移除时，`'removeListener'` 事件被触发。实例：\n``` javascript\n  //event.js 文件\n  var EventEmitter = require('events').EventEmitter;\n  var event = new EventEmitter();\n  event.on('some_event',function() {\n    console.log('some_event事件触发')；\n  });\n  setTimeout(function() {\n    event.emit('some_event');\n  }, 1000);\n```\n运行这段代码，1 秒后控制台输出了 `some_event 事件触发`。其原理是 `event` 对象注册了事件 `some_event` 的一个监听器，然后我们通过 `setTimeout` 在 1000 毫秒以后向 `event` 对象发送事件 `some_event`，此时会调用`some_event` 的监听器\n执行结果如下:\n```\n  node event.js \n  some_event 事件触发\n```\n`EventEmitter` 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，`EventEmitter` 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n``` javascript\n  //event.js 文件\n  var events = require('events')\n  var emitter = new events.EventEmitter(); \n  emitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener1', arg1, arg2); \n  }); \n  emitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener2', arg1, arg2); \n  }); \n  emitter.emit('someEvent', 'arg1 参数', 'arg2 参数');\n```\n`emitter` 为事件 `someEvent` 注册了两个事件监听器，然后触发了 `someEvent` 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是`EventEmitter`最简单的用法。`EventEmitter` 提供了多个属性，如 `on` 和 `emit`。`on` 函数用于绑定事件函数，`emit` 属性用于触发一个事件。\n执行结果如下:\n```\n  node event.js \n  listener1 arg1 参数 arg2 参数\n  listener2 arg1 参数 arg2 参数\n```\n#### 方法\n1、`addListener(event, listener)`//为指定事件添加一个监听器到监听数组的尾部\n2、`on(event, listener)`//为指定事件注册一个监听器，接受一个字符串 `event` 和一个回调函数:\n``` javascript \n  server.on('connection',function (stream) {\n    console.log('someone connected!');\n  });\n```\n3、`once(event, listener)`//为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。\n``` javascript\n  server.once('connection', function (stream) {\n    console.log('Ah, we have our first user!');\n  });\n```\n4、`removeListener(event, listener)`//移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。\n``` javascript\n  var callback = function(stream) {\n    console.log('someone connected!');\n  };\n  server.on('connection', callback);\n  // ...\n  server.removeListener('connection', callback);\n```\n5、`removeAllListeners([event])`//移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。\n6、`setMaxListeners(n)`//默认情况下， `EventEmitters` 如果你添加的监听器超过 10 个就会输出警告信息。 `setMaxListeners` 函数用于提高监听器的默认限制的数量。\n7、`listeners(event)`//返回指定事件的监听器数组\n8、`emit(event, [arg1], [arg2], [...])`//按参数的顺序执行每个监听器，如果事件有注册监听返回 `true`，否则返回 `false`。\n\n#### 类方法\n1、`listenerCount(emitter, event)`//返回指定事件的监听器数量。\n\n#### 事件\n1、`newListener` //该事件再添加新监听器时被触发\n  `event` - 字符串，事件名称\n  `listener` - 处理事件函数\n2、`removeListener`//从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。\n  `event` - 字符串，事件名称\n  `listener` - 处理事件函数\n实例：通过 `connection`（连接）事件演示了 `EventEmitter` 类的应用\n``` javascript\n  // 创建main.js文件：\n  var events = require('events');\n  var eventEmitter = new events.EventEmitter();\n  // 监听器 #1\n  var listener1 = function listener1() {\n    console.log('监听器 listener1 执行。');\n  }\n  // 监听器 #2\n  var listener2 = function listener2() {\n    console.log('监听器 listener2 执行。');\n  }\n  // 绑定connection事件，处理函数为listener1\n  eventEmitter.addListener('connection',listener1);\n  // 绑定connection事件，处理函数为listener2\n  eventEmitter.on('connection',listener2);\n  var eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');\n  console.log(eventListeners + \"个监听器连接事件\");\n  //处理connection事件\n  eventEmitter.emit('connection');\n  //移除监绑定的listener1函数\n  eventEmitter.removeListener('connection',listener1);\n  console.log(\"listener1不再受监听。\");\n  //触发连接事件\n  eventEmitter.emit('connection');\n  eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');\n  console.log(eventListeners + \"个监听器连接事件\");\n  console.log(\"程序执行完毕。\");\n```\n//执行结果：\n```\n  node main.js\n  2个监听器连接事件\n  监听器 listener1 执行。\n  监听器 listener2 执行。\n  listener1不再受监听。\n  监听器 listener2 执行。\n  1个监听器连接事件\n  程序执行完毕。\n```\n#### error事件\n`EventEmitter` 定义了一个特殊的事件 `error`，它包含了错误的语义，我们在遇到 异常的时候通常会触发 `error` 事件。当 `error` 被触发时，`EventEmitter` 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 `error` 事件的对象设置监听器，避免遇到错误后整个程序崩溃。\n#### 继承 EventEmitter\n大多数时候我们不会直接使用 `EventEmitter`，而是在对象中继承它。包括 `fs、net、 http` 在内的，只要是支持事件响应的核心模块都是 `EventEmitter `的子类。\n原因有两点：\n  -首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。\n  -其次 `JavaScript` 的对象机制是基于原型的，支持 部分多重继承，继承 `EventEmitter` 不会打乱对象原有的继承关系。","slug":"Node.js EventEmitter类","published":1,"updated":"2017-07-30T07:21:47.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvt4000rv0uigb3u2i9a","content":"<h3 id=\"3、Node-js-EventEmitter-类\"><a href=\"#3、Node-js-EventEmitter-类\" class=\"headerlink\" title=\"3、Node.js EventEmitter 类\"></a>3、Node.js EventEmitter 类</h3><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。<br>Node.js里面的许多对象都会分发事件：一个<code>net.Server</code> 对象会在每次有新连接时分发一个事件， 一个<code>fs.readStream</code>对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例。<br><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code>。<code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过<code>require(&quot;events&quot;)</code>;来访问该模块:<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">//创建eventEmitter对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div></pre></td></tr></table></figure></p>\n<p><code>EventEmitter</code> 对象如果在实例化时发生错误，会触发 <code>&#39;error&#39;</code> 事件。当添加新的监听器时，<code>&#39;newListener&#39;</code> 事件会触发，当监听器被移除时，<code>&#39;removeListener&#39;</code> 事件被触发。实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event事件触发'</span>)；</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  event.emit(<span class=\"string\">'some_event'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>运行这段代码，1 秒后控制台输出了 <code>some_event 事件触发</code>。其原理是 <code>event</code> 对象注册了事件 <code>some_event</code> 的一个监听器，然后我们通过 <code>setTimeout</code> 在 1000 毫秒以后向 <code>event</code> 对象发送事件 <code>some_event</code>，此时会调用<code>some_event</code> 的监听器<br>执行结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js </div><div class=\"line\">some_event 事件触发</div></pre></td></tr></table></figure></p>\n<p><code>EventEmitter</code> 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<code>EventEmitter</code> 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter(); </div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener1'</span>, arg1, arg2); </div><div class=\"line\">&#125;); </div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener2'</span>, arg1, arg2); </div><div class=\"line\">&#125;); </div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>, <span class=\"string\">'arg1 参数'</span>, <span class=\"string\">'arg2 参数'</span>);</div></pre></td></tr></table></figure></p>\n<p><code>emitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器，然后触发了 <code>someEvent</code> 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是<code>EventEmitter</code>最简单的用法。<code>EventEmitter</code> 提供了多个属性，如 <code>on</code> 和 <code>emit</code>。<code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。<br>执行结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js </div><div class=\"line\">listener1 arg1 参数 arg2 参数</div><div class=\"line\">listener2 arg1 参数 arg2 参数</div></pre></td></tr></table></figure></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>1、<code>addListener(event, listener)</code>//为指定事件添加一个监听器到监听数组的尾部<br>2、<code>on(event, listener)</code>//为指定事件注册一个监听器，接受一个字符串 <code>event</code> 和一个回调函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'someone connected!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、<code>once(event, listener)</code>//为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.once(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ah, we have our first user!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4、<code>removeListener(event, listener)</code>//移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'someone connected!'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, callback);</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">server.removeListener(<span class=\"string\">'connection'</span>, callback);</div></pre></td></tr></table></figure></p>\n<p>5、<code>removeAllListeners([event])</code>//移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。<br>6、<code>setMaxListeners(n)</code>//默认情况下， <code>EventEmitters</code> 如果你添加的监听器超过 10 个就会输出警告信息。 <code>setMaxListeners</code> 函数用于提高监听器的默认限制的数量。<br>7、<code>listeners(event)</code>//返回指定事件的监听器数组<br>8、<code>emit(event, [arg1], [arg2], [...])</code>//按参数的顺序执行每个监听器，如果事件有注册监听返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<h4 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h4><p>1、<code>listenerCount(emitter, event)</code>//返回指定事件的监听器数量。</p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p>1、<code>newListener</code> //该事件再添加新监听器时被触发<br>  <code>event</code> - 字符串，事件名称<br>  <code>listener</code> - 处理事件函数<br>2、<code>removeListener</code>//从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。<br>  <code>event</code> - 字符串，事件名称<br>  <code>listener</code> - 处理事件函数<br>实例：通过 <code>connection</code>（连接）事件演示了 <code>EventEmitter</code> 类的应用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建main.js文件：</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 监听器 #1</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener1 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener1 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 监听器 #2</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener2 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener2 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 绑定connection事件，处理函数为listener1</span></div><div class=\"line\">eventEmitter.addListener(<span class=\"string\">'connection'</span>,listener1);</div><div class=\"line\"><span class=\"comment\">// 绑定connection事件，处理函数为listener2</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'connection'</span>,listener2);</div><div class=\"line\"><span class=\"keyword\">var</span> eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\"个监听器连接事件\"</span>);</div><div class=\"line\"><span class=\"comment\">//处理connection事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"comment\">//移除监绑定的listener1函数</span></div><div class=\"line\">eventEmitter.removeListener(<span class=\"string\">'connection'</span>,listener1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"listener1不再受监听。\"</span>);</div><div class=\"line\"><span class=\"comment\">//触发连接事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\">eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\"个监听器连接事件\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>//执行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">2个监听器连接事件</div><div class=\"line\">监听器 listener1 执行。</div><div class=\"line\">监听器 listener2 执行。</div><div class=\"line\">listener1不再受监听。</div><div class=\"line\">监听器 listener2 执行。</div><div class=\"line\">1个监听器连接事件</div><div class=\"line\">程序执行完毕。</div></pre></td></tr></table></figure></p>\n<h4 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h4><p><code>EventEmitter</code> 定义了一个特殊的事件 <code>error</code>，它包含了错误的语义，我们在遇到 异常的时候通常会触发 <code>error</code> 事件。当 <code>error</code> 被触发时，<code>EventEmitter</code> 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 <code>error</code> 事件的对象设置监听器，避免遇到错误后整个程序崩溃。</p>\n<h4 id=\"继承-EventEmitter\"><a href=\"#继承-EventEmitter\" class=\"headerlink\" title=\"继承 EventEmitter\"></a>继承 EventEmitter</h4><p>大多数时候我们不会直接使用 <code>EventEmitter</code>，而是在对象中继承它。包括 <code>fs、net、 http</code> 在内的，只要是支持事件响应的核心模块都是 <code>EventEmitter</code>的子类。<br>原因有两点：<br>  -首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。<br>  -其次 <code>JavaScript</code> 的对象机制是基于原型的，支持 部分多重继承，继承 <code>EventEmitter</code> 不会打乱对象原有的继承关系。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"3、Node-js-EventEmitter-类\"><a href=\"#3、Node-js-EventEmitter-类\" class=\"headerlink\" title=\"3、Node.js EventEmitter 类\"></a>3、Node.js EventEmitter 类</h3><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。<br>Node.js里面的许多对象都会分发事件：一个<code>net.Server</code> 对象会在每次有新连接时分发一个事件， 一个<code>fs.readStream</code>对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例。<br><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code>。<code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过<code>require(&quot;events&quot;)</code>;来访问该模块:<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">//创建eventEmitter对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div></pre></td></tr></table></figure></p>\n<p><code>EventEmitter</code> 对象如果在实例化时发生错误，会触发 <code>&#39;error&#39;</code> 事件。当添加新的监听器时，<code>&#39;newListener&#39;</code> 事件会触发，当监听器被移除时，<code>&#39;removeListener&#39;</code> 事件被触发。实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event事件触发'</span>)；</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  event.emit(<span class=\"string\">'some_event'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>运行这段代码，1 秒后控制台输出了 <code>some_event 事件触发</code>。其原理是 <code>event</code> 对象注册了事件 <code>some_event</code> 的一个监听器，然后我们通过 <code>setTimeout</code> 在 1000 毫秒以后向 <code>event</code> 对象发送事件 <code>some_event</code>，此时会调用<code>some_event</code> 的监听器<br>执行结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js </div><div class=\"line\">some_event 事件触发</div></pre></td></tr></table></figure></p>\n<p><code>EventEmitter</code> 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<code>EventEmitter</code> 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter(); </div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener1'</span>, arg1, arg2); </div><div class=\"line\">&#125;); </div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener2'</span>, arg1, arg2); </div><div class=\"line\">&#125;); </div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>, <span class=\"string\">'arg1 参数'</span>, <span class=\"string\">'arg2 参数'</span>);</div></pre></td></tr></table></figure></p>\n<p><code>emitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器，然后触发了 <code>someEvent</code> 事件。运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是<code>EventEmitter</code>最简单的用法。<code>EventEmitter</code> 提供了多个属性，如 <code>on</code> 和 <code>emit</code>。<code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。<br>执行结果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js </div><div class=\"line\">listener1 arg1 参数 arg2 参数</div><div class=\"line\">listener2 arg1 参数 arg2 参数</div></pre></td></tr></table></figure></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p>1、<code>addListener(event, listener)</code>//为指定事件添加一个监听器到监听数组的尾部<br>2、<code>on(event, listener)</code>//为指定事件注册一个监听器，接受一个字符串 <code>event</code> 和一个回调函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'someone connected!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、<code>once(event, listener)</code>//为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.once(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ah, we have our first user!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4、<code>removeListener(event, listener)</code>//移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'someone connected!'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, callback);</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">server.removeListener(<span class=\"string\">'connection'</span>, callback);</div></pre></td></tr></table></figure></p>\n<p>5、<code>removeAllListeners([event])</code>//移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。<br>6、<code>setMaxListeners(n)</code>//默认情况下， <code>EventEmitters</code> 如果你添加的监听器超过 10 个就会输出警告信息。 <code>setMaxListeners</code> 函数用于提高监听器的默认限制的数量。<br>7、<code>listeners(event)</code>//返回指定事件的监听器数组<br>8、<code>emit(event, [arg1], [arg2], [...])</code>//按参数的顺序执行每个监听器，如果事件有注册监听返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<h4 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h4><p>1、<code>listenerCount(emitter, event)</code>//返回指定事件的监听器数量。</p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p>1、<code>newListener</code> //该事件再添加新监听器时被触发<br>  <code>event</code> - 字符串，事件名称<br>  <code>listener</code> - 处理事件函数<br>2、<code>removeListener</code>//从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。<br>  <code>event</code> - 字符串，事件名称<br>  <code>listener</code> - 处理事件函数<br>实例：通过 <code>connection</code>（连接）事件演示了 <code>EventEmitter</code> 类的应用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建main.js文件：</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 监听器 #1</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener1 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener1 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 监听器 #2</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener2 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener2 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 绑定connection事件，处理函数为listener1</span></div><div class=\"line\">eventEmitter.addListener(<span class=\"string\">'connection'</span>,listener1);</div><div class=\"line\"><span class=\"comment\">// 绑定connection事件，处理函数为listener2</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'connection'</span>,listener2);</div><div class=\"line\"><span class=\"keyword\">var</span> eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\"个监听器连接事件\"</span>);</div><div class=\"line\"><span class=\"comment\">//处理connection事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"comment\">//移除监绑定的listener1函数</span></div><div class=\"line\">eventEmitter.removeListener(<span class=\"string\">'connection'</span>,listener1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"listener1不再受监听。\"</span>);</div><div class=\"line\"><span class=\"comment\">//触发连接事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\">eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\"个监听器连接事件\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>//执行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">2个监听器连接事件</div><div class=\"line\">监听器 listener1 执行。</div><div class=\"line\">监听器 listener2 执行。</div><div class=\"line\">listener1不再受监听。</div><div class=\"line\">监听器 listener2 执行。</div><div class=\"line\">1个监听器连接事件</div><div class=\"line\">程序执行完毕。</div></pre></td></tr></table></figure></p>\n<h4 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h4><p><code>EventEmitter</code> 定义了一个特殊的事件 <code>error</code>，它包含了错误的语义，我们在遇到 异常的时候通常会触发 <code>error</code> 事件。当 <code>error</code> 被触发时，<code>EventEmitter</code> 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 <code>error</code> 事件的对象设置监听器，避免遇到错误后整个程序崩溃。</p>\n<h4 id=\"继承-EventEmitter\"><a href=\"#继承-EventEmitter\" class=\"headerlink\" title=\"继承 EventEmitter\"></a>继承 EventEmitter</h4><p>大多数时候我们不会直接使用 <code>EventEmitter</code>，而是在对象中继承它。包括 <code>fs、net、 http</code> 在内的，只要是支持事件响应的核心模块都是 <code>EventEmitter</code>的子类。<br>原因有两点：<br>  -首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。<br>  -其次 <code>JavaScript</code> 的对象机制是基于原型的，支持 部分多重继承，继承 <code>EventEmitter</code> 不会打乱对象原有的继承关系。</p>"},{"title":"Node.js Express 框架(15)","date":"2016-06-30T01:38:20.000Z","_content":"\n### 15、Node.js Express 框架\nExpress 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。\nExpress 框架核心特性：\n1、可以设置中间件来响应 HTTP 请求。\n2、定义了路由表用于执行不同的 HTTP 请求动作。\n3、可以通过向模板传递参数来动态渲染 HTML 页面。\n<!-- more -->\n#### 安装 Express\n安装 Express 并将其保存到依赖列表中：\n```\n  npm install express --save\n```\n以上命令会将 Express 框架安装在当期目录的 `node_modules` 目录中， `node_modules` 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：\n```\n//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。\n//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。\n//multer - node.js 中间件，用于处理 enctype=\"multipart/form-data\"（设置表单的MIME编码）的表单数据。\n  npm install body-parser --save\n  npm install cookie-parser --save\n  npm install multer --save\n```\n#### 第一个 Express 框架实例\n接下来我们使用 Express 框架来输出 \"Hello World\"。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 \"Hello World\" 字符串。\n创建 express_demo.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.get('/', function (req,res){\n    res.send('Hello World');\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node express_demo.js\n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081，结果如下所示：\n```\n  Hello World\n```\n#### 请求和响应\nExpress 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。\n#### Request 对象\nrequest 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：\n`req.app`：当callback为外部文件时，用req.app访问express的实例\n`req.baseUrl`：获取路由当前安装的URL路径\n`req.body / req.cookies`：获得「请求主体」/ Cookies\n`req.fresh / req.stale`：判断请求是否还「新鲜」\n`req.hostname / req.ip`：获取主机名和IP地址\n`req.originalUrl`：获取原始请求URL\n`req.params`：获取路由的parameters\n`req.path`：获取请求路径\n`req.protocol`：获取协议类型\n`req.query`：获取URL的查询参数串\n`req.route`：获取当前匹配的路由\n`req.subdomains`：获取子域名\n`req.accpets（）`：检查请求的Accept头的请求类型\n`req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages`\n`req.get（）`：获取指定的HTTP请求头\n`req.is（）`：判断请求头Content-Type的MIME类型\n#### Response 对象\nresponse 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：\n`res.app`：同req.app一样\n`res.append（）`：追加指定HTTP头\n`res.set（）`在res.append（）后将重置之前设置的头\n`res.cookie（name，value [，option]）`：设置Cookie\n`opition`: domain / expires / httpOnly / maxAge / path / secure / signed\n`res.clearCookie（）`：清除Cookie\n`res.download（）`：传送指定路径的文件\n`res.get（）`：返回指定的HTTP头\n`res.json（）`：传送JSON响应\n`res.jsonp（）`：传送JSONP响应\n`res.location（）`：只设置响应的Location HTTP头，不设置状态码或者close response\n`res.redirect（）`：设置响应的Location HTTP头，并且设置状态码302\n`res.send（）`：传送HTTP响应\n`res.sendFile（path [，options] [，fn]）`：传送指定路径的文件 -会自动根据文件extension设定Content-Type\n`res.set（）`：设置HTTP头，传入object可以一次设置多个头\n`res.status（）`：设置HTTP状态码\n`res.type（）`：设置Content-Type的MIME类型\n#### 路由\n我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。\n创建 express_demo2.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  //主页输出\"Hello World\"\n  app.get('/', function (req, res){\n    console.log(\"主页GET请求\");\n    res.send('Hello GET');\n  });\n  //POST请求\n  app.post('/', function (req, res){\n    console.log(\"主页 POST 请求\");\n    res.send('Hello POST');\n  });\n  // /del_user页面响应\n  app.delete('/del_user', function (req, res){\n    console.log(\"/del_user响应 DELETE 请求\");\n    res.send('删除页面');\n  });\n  // /list_user 页面 GET 请求\n  app.get('/list_user', function (req, res){\n    console.log(\"/list_user 页面 GET 请求\");\n    res.send('用户列表页面');\n  });\n  // 对页面 abcd, abxcd, ab123cd, 等响应GET请求\n  app.get('/ab*cd', function (req, res){\n    console.log(\"/ab*cd GET 请求\");\n    res.send('正则匹配')\n  });\n  var server = app.listen(8081,function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node express_demo2.js\n  应用实例，访问地址为 http://0.0.0.0:8081\n```        \n接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。\n  访问 http://127.0.0.1:8081/list_user 结果：用户列表页\n  访问 http://127.0.0.1:8081/abcd 结果：正则匹配\n  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址\n#### 静态文件\nExpress 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：\n``` javascript\n        app.use(express.static('public'));//public为放置静态文件的目录\n```\n我们可以到 public/images 目录下放些图片,如下所示：\n```\n  node_modules\n  server.js\n  public/\n  public/images\n  public/images/logo.png\n```\n让我们再修改下 \"Hello Word\" 应用添加处理静态文件的功能。\n创建 express_demo3.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.use(express.static('public'));\n  app.get('/', function (req, res){\n    res.send('Hello World');\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  })\n```\n执行以上代码：\n```\n  node express_demo3.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/images/logo.png ,结果展示了图片。\n#### GET 方法\n以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：\nindex.htm 文件代码如下：\n``` html\n<html>\n  <body>\n    <form action=\"http://127.0.0.1:8081/process_get\" method=\"GET\">\n      First Name:<input type=\"text\" name=\"first_name\"><br>\n      Last Name: <input type=\"text\" name=\"last_name\">\n      <input type=\"submit\" name=\"Submit\">\n    </form>\n  </body>\n</html>\n```\nserver.js文件：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.use(express.static('public'));\n  app.get('/index.htm', function (req, res){\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.get('/process_get', function (req, res){\n    //输出JSON格式\n    response = {\n      first_name:req.query.first_name,\n      last_name:req.query.last_name\n    };\n    console.log(response);\n    res.end(JSON.stringify(response));\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);         \n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\n  `{\"first_name\":\"aaa\",\"last_name\":\"bbb\"}`\n\n#### POST 方法\n以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：\nindex.htm 文件代码修改如下： \n``` html\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1:8081/process_post\" method=\"POST\">\n        First Name: <input type=\"text\" name=\"first_name\"><br>\n        Last Name: <input type=\"text\" name=\"last_name\">\n        <input type=\"submit\" value=\"Submit\">\n      </form>\n    </body>\n  </html>\n```\nserver.js 文件代码修改如下:\n``` javascript\n  var express = require('express');\n  var app = express();\n  var bodyParser = require('body-parser');\n  //创建application/x-www-form-urlencode编码解析\n  var urlencodedParser = bodyParser.urlencoded({extended:false});\n  app.use(express.static('public'));\n  app.get('/index.htm', function (req, res) {\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.post('/process_post', urlencodedParser, function (req, res){\n    //输出 JSON 格式\n    response = {\n      first_name:req.body.first_name,\n      last_name:req.body.last_name\n    };\n    console.log(response);\n    res.end(JSON.stringify(response));\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);         \n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\n  `{\"first_name\":\"aaa\",\"last_name\":\"bbb\"}`\n\n#### 文件上传\n以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。\nindex.htm 文件代码修改如下：\n``` html \n  <html>\n    <head>\n      <title>文件上传表单</title>\n    </head>\n    <body>\n      <h3>文件上传：</h3>\n      选择一个文件上传: <br />\n      <form action=\"/file_upload\" method=\"post\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"image\" size=\"50\" /><br />\n        <input type=\"submit\" value=\"上传文件\" />\n      </form>\n    </body>\n  </html>\n```\nserver.js 文件代码修改如下:\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require(\"fs\");\n  var bodyParser = require('body-parser');\n  var multer = require('multer');\n  app.use(express.static('public'));\n  app.use(bodyParser.urlencoded({extended:false}));\n  app.use(multer({dest:'/tmp/'}).array('image'));\n  app.get('/index.htm', function (req, res) {\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.post('/file_upload', function (req, res) {\n    console.log(req.files[0]);//上传文件信息\n    var des_file = __dirname + \"/\" + req.files[0].originalname;\n    fs.readFile(req. files[0].path, function (err, data) {\n      fs.writeFile(des_file, data, function (err) {\n        if (err) {\n          console.log(err);\n        } else{\n          response = {\n            message:'File uploaded successfully',\n            filename:req.files[0].originalname\n          };\n        };\n        console.log(response);\n        res.end(JSON.stringify(response));\n      });\n    });\n  });\n  var server = app.listen(8081,function() {\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：\n  `{\"message\":\"File uploaded successfully\",\"filename\":\"a.jpg\"}`\n#### Cookie 管理\n我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：\nexpress_cookie.js文件\n``` javascript\n  var express = require('express');\n  var cookieParser = require('cookie-parser');\n  var app = express();\n  app.use(cookieParser());\n  app.get('/', function (req, res) {\n    console.log(\"Cookies: \", req.cookies);\n  });\n  app.listen(8081);\n```\n","source":"_posts/Node.js Express 框架.md","raw":"---\ntitle: Node.js Express 框架(15)\ndate: 2016-06-30 09:38:20\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 15、Node.js Express 框架\nExpress 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。\nExpress 框架核心特性：\n1、可以设置中间件来响应 HTTP 请求。\n2、定义了路由表用于执行不同的 HTTP 请求动作。\n3、可以通过向模板传递参数来动态渲染 HTML 页面。\n<!-- more -->\n#### 安装 Express\n安装 Express 并将其保存到依赖列表中：\n```\n  npm install express --save\n```\n以上命令会将 Express 框架安装在当期目录的 `node_modules` 目录中， `node_modules` 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：\n```\n//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。\n//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。\n//multer - node.js 中间件，用于处理 enctype=\"multipart/form-data\"（设置表单的MIME编码）的表单数据。\n  npm install body-parser --save\n  npm install cookie-parser --save\n  npm install multer --save\n```\n#### 第一个 Express 框架实例\n接下来我们使用 Express 框架来输出 \"Hello World\"。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 \"Hello World\" 字符串。\n创建 express_demo.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.get('/', function (req,res){\n    res.send('Hello World');\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node express_demo.js\n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081，结果如下所示：\n```\n  Hello World\n```\n#### 请求和响应\nExpress 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。\n#### Request 对象\nrequest 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：\n`req.app`：当callback为外部文件时，用req.app访问express的实例\n`req.baseUrl`：获取路由当前安装的URL路径\n`req.body / req.cookies`：获得「请求主体」/ Cookies\n`req.fresh / req.stale`：判断请求是否还「新鲜」\n`req.hostname / req.ip`：获取主机名和IP地址\n`req.originalUrl`：获取原始请求URL\n`req.params`：获取路由的parameters\n`req.path`：获取请求路径\n`req.protocol`：获取协议类型\n`req.query`：获取URL的查询参数串\n`req.route`：获取当前匹配的路由\n`req.subdomains`：获取子域名\n`req.accpets（）`：检查请求的Accept头的请求类型\n`req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages`\n`req.get（）`：获取指定的HTTP请求头\n`req.is（）`：判断请求头Content-Type的MIME类型\n#### Response 对象\nresponse 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：\n`res.app`：同req.app一样\n`res.append（）`：追加指定HTTP头\n`res.set（）`在res.append（）后将重置之前设置的头\n`res.cookie（name，value [，option]）`：设置Cookie\n`opition`: domain / expires / httpOnly / maxAge / path / secure / signed\n`res.clearCookie（）`：清除Cookie\n`res.download（）`：传送指定路径的文件\n`res.get（）`：返回指定的HTTP头\n`res.json（）`：传送JSON响应\n`res.jsonp（）`：传送JSONP响应\n`res.location（）`：只设置响应的Location HTTP头，不设置状态码或者close response\n`res.redirect（）`：设置响应的Location HTTP头，并且设置状态码302\n`res.send（）`：传送HTTP响应\n`res.sendFile（path [，options] [，fn]）`：传送指定路径的文件 -会自动根据文件extension设定Content-Type\n`res.set（）`：设置HTTP头，传入object可以一次设置多个头\n`res.status（）`：设置HTTP状态码\n`res.type（）`：设置Content-Type的MIME类型\n#### 路由\n我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。\n创建 express_demo2.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  //主页输出\"Hello World\"\n  app.get('/', function (req, res){\n    console.log(\"主页GET请求\");\n    res.send('Hello GET');\n  });\n  //POST请求\n  app.post('/', function (req, res){\n    console.log(\"主页 POST 请求\");\n    res.send('Hello POST');\n  });\n  // /del_user页面响应\n  app.delete('/del_user', function (req, res){\n    console.log(\"/del_user响应 DELETE 请求\");\n    res.send('删除页面');\n  });\n  // /list_user 页面 GET 请求\n  app.get('/list_user', function (req, res){\n    console.log(\"/list_user 页面 GET 请求\");\n    res.send('用户列表页面');\n  });\n  // 对页面 abcd, abxcd, ab123cd, 等响应GET请求\n  app.get('/ab*cd', function (req, res){\n    console.log(\"/ab*cd GET 请求\");\n    res.send('正则匹配')\n  });\n  var server = app.listen(8081,function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node express_demo2.js\n  应用实例，访问地址为 http://0.0.0.0:8081\n```        \n接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。\n  访问 http://127.0.0.1:8081/list_user 结果：用户列表页\n  访问 http://127.0.0.1:8081/abcd 结果：正则匹配\n  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址\n#### 静态文件\nExpress 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：\n``` javascript\n        app.use(express.static('public'));//public为放置静态文件的目录\n```\n我们可以到 public/images 目录下放些图片,如下所示：\n```\n  node_modules\n  server.js\n  public/\n  public/images\n  public/images/logo.png\n```\n让我们再修改下 \"Hello Word\" 应用添加处理静态文件的功能。\n创建 express_demo3.js 文件，代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.use(express.static('public'));\n  app.get('/', function (req, res){\n    res.send('Hello World');\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  })\n```\n执行以上代码：\n```\n  node express_demo3.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/images/logo.png ,结果展示了图片。\n#### GET 方法\n以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：\nindex.htm 文件代码如下：\n``` html\n<html>\n  <body>\n    <form action=\"http://127.0.0.1:8081/process_get\" method=\"GET\">\n      First Name:<input type=\"text\" name=\"first_name\"><br>\n      Last Name: <input type=\"text\" name=\"last_name\">\n      <input type=\"submit\" name=\"Submit\">\n    </form>\n  </body>\n</html>\n```\nserver.js文件：\n``` javascript\n  var express = require('express');\n  var app = express();\n  app.use(express.static('public'));\n  app.get('/index.htm', function (req, res){\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.get('/process_get', function (req, res){\n    //输出JSON格式\n    response = {\n      first_name:req.query.first_name,\n      last_name:req.query.last_name\n    };\n    console.log(response);\n    res.end(JSON.stringify(response));\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);         \n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\n  `{\"first_name\":\"aaa\",\"last_name\":\"bbb\"}`\n\n#### POST 方法\n以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：\nindex.htm 文件代码修改如下： \n``` html\n  <html>\n    <body>\n      <form action=\"http://127.0.0.1:8081/process_post\" method=\"POST\">\n        First Name: <input type=\"text\" name=\"first_name\"><br>\n        Last Name: <input type=\"text\" name=\"last_name\">\n        <input type=\"submit\" value=\"Submit\">\n      </form>\n    </body>\n  </html>\n```\nserver.js 文件代码修改如下:\n``` javascript\n  var express = require('express');\n  var app = express();\n  var bodyParser = require('body-parser');\n  //创建application/x-www-form-urlencode编码解析\n  var urlencodedParser = bodyParser.urlencoded({extended:false});\n  app.use(express.static('public'));\n  app.get('/index.htm', function (req, res) {\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.post('/process_post', urlencodedParser, function (req, res){\n    //输出 JSON 格式\n    response = {\n      first_name:req.body.first_name,\n      last_name:req.body.last_name\n    };\n    console.log(response);\n    res.end(JSON.stringify(response));\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);         \n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\n  `{\"first_name\":\"aaa\",\"last_name\":\"bbb\"}`\n\n#### 文件上传\n以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。\nindex.htm 文件代码修改如下：\n``` html \n  <html>\n    <head>\n      <title>文件上传表单</title>\n    </head>\n    <body>\n      <h3>文件上传：</h3>\n      选择一个文件上传: <br />\n      <form action=\"/file_upload\" method=\"post\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"image\" size=\"50\" /><br />\n        <input type=\"submit\" value=\"上传文件\" />\n      </form>\n    </body>\n  </html>\n```\nserver.js 文件代码修改如下:\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require(\"fs\");\n  var bodyParser = require('body-parser');\n  var multer = require('multer');\n  app.use(express.static('public'));\n  app.use(bodyParser.urlencoded({extended:false}));\n  app.use(multer({dest:'/tmp/'}).array('image'));\n  app.get('/index.htm', function (req, res) {\n    res.sendFile(__dirname + \"/\" + \"index.htm\");\n  });\n  app.post('/file_upload', function (req, res) {\n    console.log(req.files[0]);//上传文件信息\n    var des_file = __dirname + \"/\" + req.files[0].originalname;\n    fs.readFile(req. files[0].path, function (err, data) {\n      fs.writeFile(des_file, data, function (err) {\n        if (err) {\n          console.log(err);\n        } else{\n          response = {\n            message:'File uploaded successfully',\n            filename:req.files[0].originalname\n          };\n        };\n        console.log(response);\n        res.end(JSON.stringify(response));\n      });\n    });\n  });\n  var server = app.listen(8081,function() {\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port);\n  });\n```\n执行以上代码：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n浏览器访问 http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：\n  `{\"message\":\"File uploaded successfully\",\"filename\":\"a.jpg\"}`\n#### Cookie 管理\n我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：\nexpress_cookie.js文件\n``` javascript\n  var express = require('express');\n  var cookieParser = require('cookie-parser');\n  var app = express();\n  app.use(cookieParser());\n  app.get('/', function (req, res) {\n    console.log(\"Cookies: \", req.cookies);\n  });\n  app.listen(8081);\n```\n","slug":"Node.js Express 框架","published":1,"updated":"2017-07-30T07:21:47.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvtb000uv0uiqaizpghg","content":"<h3 id=\"15、Node-js-Express-框架\"><a href=\"#15、Node-js-Express-框架\" class=\"headerlink\" title=\"15、Node.js Express 框架\"></a>15、Node.js Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<br>1、可以设置中间件来响应 HTTP 请求。<br>2、定义了路由表用于执行不同的 HTTP 请求动作。<br>3、可以通过向模板传递参数来动态渲染 HTML 页面。<br><a id=\"more\"></a></p>\n<h4 id=\"安装-Express\"><a href=\"#安装-Express\" class=\"headerlink\" title=\"安装 Express\"></a>安装 Express</h4><p>安装 Express 并将其保存到依赖列表中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express --save</div></pre></td></tr></table></figure></p>\n<p>以上命令会将 Express 框架安装在当期目录的 <code>node_modules</code> 目录中， <code>node_modules</code> 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</div><div class=\"line\">//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</div><div class=\"line\">//multer - node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</div><div class=\"line\">  npm install body-parser --save</div><div class=\"line\">  npm install cookie-parser --save</div><div class=\"line\">  npm install multer --save</div></pre></td></tr></table></figure></p>\n<h4 id=\"第一个-Express-框架实例\"><a href=\"#第一个-Express-框架实例\" class=\"headerlink\" title=\"第一个 Express 框架实例\"></a>第一个 Express 框架实例</h4><p>接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br>创建 express_demo.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node express_demo.js</div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081，结果如下所示：</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World</div></pre></td></tr></table></figure></p>\n<h4 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h4><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p>\n<h4 id=\"Request-对象\"><a href=\"#Request-对象\" class=\"headerlink\" title=\"Request 对象\"></a>Request 对象</h4><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例<br><code>req.baseUrl</code>：获取路由当前安装的URL路径<br><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies<br><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」<br><code>req.hostname / req.ip</code>：获取主机名和IP地址<br><code>req.originalUrl</code>：获取原始请求URL<br><code>req.params</code>：获取路由的parameters<br><code>req.path</code>：获取请求路径<br><code>req.protocol</code>：获取协议类型<br><code>req.query</code>：获取URL的查询参数串<br><code>req.route</code>：获取当前匹配的路由<br><code>req.subdomains</code>：获取子域名<br><code>req.accpets（）</code>：检查请求的Accept头的请求类型<br><code>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</code><br><code>req.get（）</code>：获取指定的HTTP请求头<br><code>req.is（）</code>：判断请求头Content-Type的MIME类型</p>\n<h4 id=\"Response-对象\"><a href=\"#Response-对象\" class=\"headerlink\" title=\"Response 对象\"></a>Response 对象</h4><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br><code>res.app</code>：同req.app一样<br><code>res.append（）</code>：追加指定HTTP头<br><code>res.set（）</code>在res.append（）后将重置之前设置的头<br><code>res.cookie（name，value [，option]）</code>：设置Cookie<br><code>opition</code>: domain / expires / httpOnly / maxAge / path / secure / signed<br><code>res.clearCookie（）</code>：清除Cookie<br><code>res.download（）</code>：传送指定路径的文件<br><code>res.get（）</code>：返回指定的HTTP头<br><code>res.json（）</code>：传送JSON响应<br><code>res.jsonp（）</code>：传送JSONP响应<br><code>res.location（）</code>：只设置响应的Location HTTP头，不设置状态码或者close response<br><code>res.redirect（）</code>：设置响应的Location HTTP头，并且设置状态码302<br><code>res.send（）</code>：传送HTTP响应<br><code>res.sendFile（path [，options] [，fn]）</code>：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br><code>res.set（）</code>：设置HTTP头，传入object可以一次设置多个头<br><code>res.status（）</code>：设置HTTP状态码<br><code>res.type（）</code>：设置Content-Type的MIME类型</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。<br>创建 express_demo2.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//主页输出\"Hello World\"</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页GET请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'Hello GET'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//POST请求</span></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 POST 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'Hello POST'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// /del_user页面响应</span></div><div class=\"line\">app.delete(<span class=\"string\">'/del_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/del_user响应 DELETE 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'删除页面'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// /list_user 页面 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/list_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/list_user 页面 GET 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'用户列表页面'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 对页面 abcd, abxcd, ab123cd, 等响应GET请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/ab*cd GET 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'正则匹配'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  node express_demo2.js</div><div class=\"line\">  应用实例，访问地址为 http://0.0.0.0:8081</div><div class=\"line\">```        </div><div class=\"line\">接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</div><div class=\"line\">  访问 http://127.0.0.1:8081/list_user 结果：用户列表页</div><div class=\"line\">  访问 http://127.0.0.1:8081/abcd 结果：正则匹配</div><div class=\"line\">  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址</div><div class=\"line\">#### 静态文件</div><div class=\"line\">Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</div><div class=\"line\">``` javascript</div><div class=\"line\">        app.use(express.static(&apos;public&apos;));//public为放置静态文件的目录</div></pre></td></tr></table></figure></p>\n<p>我们可以到 public/images 目录下放些图片,如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">node_modules</div><div class=\"line\">server.js</div><div class=\"line\">public/</div><div class=\"line\">public/images</div><div class=\"line\">public/images/logo.png</div></pre></td></tr></table></figure></p>\n<p>让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。<br>创建 express_demo3.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node express_demo3.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/images/logo.png\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/images/logo.png</a> ,结果展示了图片。</p>\n<h4 id=\"GET-方法\"><a href=\"#GET-方法\" class=\"headerlink\" title=\"GET 方法\"></a>GET 方法</h4><p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://127.0.0.1:8081/process_get\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"GET\"</span>&gt;</span></div><div class=\"line\">      First Name:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first_name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">      Last Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"last_name\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.get(<span class=\"string\">'/process_get'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//输出JSON格式</span></div><div class=\"line\">  response = &#123;</div><div class=\"line\">    first_name:req.query.first_name,</div><div class=\"line\">    last_name:req.query.last_name</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);         </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>\n<h4 id=\"POST-方法\"><a href=\"#POST-方法\" class=\"headerlink\" title=\"POST 方法\"></a>POST 方法</h4><p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码修改如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://127.0.0.1:8081/process_post\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></div><div class=\"line\">      First Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first_name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">      Last Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"last_name\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js 文件代码修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"comment\">//创建application/x-www-form-urlencode编码解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">false</span>&#125;);</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.post(<span class=\"string\">'/process_post'</span>, urlencodedParser, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//输出 JSON 格式</span></div><div class=\"line\">  response = &#123;</div><div class=\"line\">    first_name:req.body.first_name,</div><div class=\"line\">    last_name:req.body.last_name</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);         </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。<br>index.htm 文件代码修改如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文件上传表单<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>文件上传：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    选择一个文件上传: <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/file_upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"50\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传文件\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js 文件代码修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">false</span>&#125;));</div><div class=\"line\">app.use(multer(&#123;<span class=\"attr\">dest</span>:<span class=\"string\">'/tmp/'</span>&#125;).array(<span class=\"string\">'image'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.post(<span class=\"string\">'/file_upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(req.files[<span class=\"number\">0</span>]);<span class=\"comment\">//上传文件信息</span></div><div class=\"line\">  <span class=\"keyword\">var</span> des_file = __dirname + <span class=\"string\">\"/\"</span> + req.files[<span class=\"number\">0</span>].originalname;</div><div class=\"line\">  fs.readFile(req. files[<span class=\"number\">0</span>].path, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    fs.writeFile(des_file, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        response = &#123;</div><div class=\"line\">          message:<span class=\"string\">'File uploaded successfully'</span>,</div><div class=\"line\">          filename:req.files[<span class=\"number\">0</span>].originalname</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">      res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：</a><br>  <code>{&quot;message&quot;:&quot;File uploaded successfully&quot;,&quot;filename&quot;:&quot;a.jpg&quot;}</code></p>\n<h4 id=\"Cookie-管理\"><a href=\"#Cookie-管理\" class=\"headerlink\" title=\"Cookie 管理\"></a>Cookie 管理</h4><p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：<br>express_cookie.js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(cookieParser());</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Cookies: \"</span>, req.cookies);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">8081</span>);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"15、Node-js-Express-框架\"><a href=\"#15、Node-js-Express-框架\" class=\"headerlink\" title=\"15、Node.js Express 框架\"></a>15、Node.js Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<br>1、可以设置中间件来响应 HTTP 请求。<br>2、定义了路由表用于执行不同的 HTTP 请求动作。<br>3、可以通过向模板传递参数来动态渲染 HTML 页面。<br>","more":"</p>\n<h4 id=\"安装-Express\"><a href=\"#安装-Express\" class=\"headerlink\" title=\"安装 Express\"></a>安装 Express</h4><p>安装 Express 并将其保存到依赖列表中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express --save</div></pre></td></tr></table></figure></p>\n<p>以上命令会将 Express 框架安装在当期目录的 <code>node_modules</code> 目录中， <code>node_modules</code> 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</div><div class=\"line\">//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</div><div class=\"line\">//multer - node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</div><div class=\"line\">  npm install body-parser --save</div><div class=\"line\">  npm install cookie-parser --save</div><div class=\"line\">  npm install multer --save</div></pre></td></tr></table></figure></p>\n<h4 id=\"第一个-Express-框架实例\"><a href=\"#第一个-Express-框架实例\" class=\"headerlink\" title=\"第一个 Express 框架实例\"></a>第一个 Express 框架实例</h4><p>接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br>创建 express_demo.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node express_demo.js</div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081，结果如下所示：</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World</div></pre></td></tr></table></figure></p>\n<h4 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h4><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p>\n<h4 id=\"Request-对象\"><a href=\"#Request-对象\" class=\"headerlink\" title=\"Request 对象\"></a>Request 对象</h4><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例<br><code>req.baseUrl</code>：获取路由当前安装的URL路径<br><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies<br><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」<br><code>req.hostname / req.ip</code>：获取主机名和IP地址<br><code>req.originalUrl</code>：获取原始请求URL<br><code>req.params</code>：获取路由的parameters<br><code>req.path</code>：获取请求路径<br><code>req.protocol</code>：获取协议类型<br><code>req.query</code>：获取URL的查询参数串<br><code>req.route</code>：获取当前匹配的路由<br><code>req.subdomains</code>：获取子域名<br><code>req.accpets（）</code>：检查请求的Accept头的请求类型<br><code>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</code><br><code>req.get（）</code>：获取指定的HTTP请求头<br><code>req.is（）</code>：判断请求头Content-Type的MIME类型</p>\n<h4 id=\"Response-对象\"><a href=\"#Response-对象\" class=\"headerlink\" title=\"Response 对象\"></a>Response 对象</h4><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br><code>res.app</code>：同req.app一样<br><code>res.append（）</code>：追加指定HTTP头<br><code>res.set（）</code>在res.append（）后将重置之前设置的头<br><code>res.cookie（name，value [，option]）</code>：设置Cookie<br><code>opition</code>: domain / expires / httpOnly / maxAge / path / secure / signed<br><code>res.clearCookie（）</code>：清除Cookie<br><code>res.download（）</code>：传送指定路径的文件<br><code>res.get（）</code>：返回指定的HTTP头<br><code>res.json（）</code>：传送JSON响应<br><code>res.jsonp（）</code>：传送JSONP响应<br><code>res.location（）</code>：只设置响应的Location HTTP头，不设置状态码或者close response<br><code>res.redirect（）</code>：设置响应的Location HTTP头，并且设置状态码302<br><code>res.send（）</code>：传送HTTP响应<br><code>res.sendFile（path [，options] [，fn]）</code>：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br><code>res.set（）</code>：设置HTTP头，传入object可以一次设置多个头<br><code>res.status（）</code>：设置HTTP状态码<br><code>res.type（）</code>：设置Content-Type的MIME类型</p>\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。<br>创建 express_demo2.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//主页输出\"Hello World\"</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页GET请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'Hello GET'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//POST请求</span></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 POST 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'Hello POST'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// /del_user页面响应</span></div><div class=\"line\">app.delete(<span class=\"string\">'/del_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/del_user响应 DELETE 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'删除页面'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// /list_user 页面 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/list_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/list_user 页面 GET 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'用户列表页面'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 对页面 abcd, abxcd, ab123cd, 等响应GET请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/ab*cd GET 请求\"</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'正则匹配'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  node express_demo2.js</div><div class=\"line\">  应用实例，访问地址为 http://0.0.0.0:8081</div><div class=\"line\">```        </div><div class=\"line\">接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</div><div class=\"line\">  访问 http://127.0.0.1:8081/list_user 结果：用户列表页</div><div class=\"line\">  访问 http://127.0.0.1:8081/abcd 结果：正则匹配</div><div class=\"line\">  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址</div><div class=\"line\">#### 静态文件</div><div class=\"line\">Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</div><div class=\"line\">``` javascript</div><div class=\"line\">        app.use(express.static(&apos;public&apos;));//public为放置静态文件的目录</div></pre></td></tr></table></figure></p>\n<p>我们可以到 public/images 目录下放些图片,如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">node_modules</div><div class=\"line\">server.js</div><div class=\"line\">public/</div><div class=\"line\">public/images</div><div class=\"line\">public/images/logo.png</div></pre></td></tr></table></figure></p>\n<p>让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。<br>创建 express_demo3.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node express_demo3.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/images/logo.png\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/images/logo.png</a> ,结果展示了图片。</p>\n<h4 id=\"GET-方法\"><a href=\"#GET-方法\" class=\"headerlink\" title=\"GET 方法\"></a>GET 方法</h4><p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://127.0.0.1:8081/process_get\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"GET\"</span>&gt;</span></div><div class=\"line\">      First Name:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first_name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">      Last Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"last_name\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.get(<span class=\"string\">'/process_get'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//输出JSON格式</span></div><div class=\"line\">  response = &#123;</div><div class=\"line\">    first_name:req.query.first_name,</div><div class=\"line\">    last_name:req.query.last_name</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);         </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>\n<h4 id=\"POST-方法\"><a href=\"#POST-方法\" class=\"headerlink\" title=\"POST 方法\"></a>POST 方法</h4><p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码修改如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://127.0.0.1:8081/process_post\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></div><div class=\"line\">      First Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first_name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">      Last Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"last_name\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js 文件代码修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"comment\">//创建application/x-www-form-urlencode编码解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">false</span>&#125;);</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.post(<span class=\"string\">'/process_post'</span>, urlencodedParser, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//输出 JSON 格式</span></div><div class=\"line\">  response = &#123;</div><div class=\"line\">    first_name:req.body.first_name,</div><div class=\"line\">    last_name:req.body.last_name</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);         </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p>\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。<br>index.htm 文件代码修改如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文件上传表单<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>文件上传：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    选择一个文件上传: <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/file_upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"50\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传文件\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>server.js 文件代码修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>);</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">false</span>&#125;));</div><div class=\"line\">app.use(multer(&#123;<span class=\"attr\">dest</span>:<span class=\"string\">'/tmp/'</span>&#125;).array(<span class=\"string\">'image'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.sendFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.post(<span class=\"string\">'/file_upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(req.files[<span class=\"number\">0</span>]);<span class=\"comment\">//上传文件信息</span></div><div class=\"line\">  <span class=\"keyword\">var</span> des_file = __dirname + <span class=\"string\">\"/\"</span> + req.files[<span class=\"number\">0</span>].originalname;</div><div class=\"line\">  fs.readFile(req. files[<span class=\"number\">0</span>].path, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    fs.writeFile(des_file, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        response = &#123;</div><div class=\"line\">          message:<span class=\"string\">'File uploaded successfully'</span>,</div><div class=\"line\">          filename:req.files[<span class=\"number\">0</span>].originalname</div><div class=\"line\">        &#125;;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">      res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 <a href=\"http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：</a><br>  <code>{&quot;message&quot;:&quot;File uploaded successfully&quot;,&quot;filename&quot;:&quot;a.jpg&quot;}</code></p>\n<h4 id=\"Cookie-管理\"><a href=\"#Cookie-管理\" class=\"headerlink\" title=\"Cookie 管理\"></a>Cookie 管理</h4><p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：<br>express_cookie.js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(cookieParser());</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Cookies: \"</span>, req.cookies);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">8081</span>);</div></pre></td></tr></table></figure></p>"},{"title":"Node.js GET/POST请求(12)","date":"2016-06-29T07:38:20.000Z","_content":"\n### 12、Node.js GET/POST请求\n#### 获取GET请求内容\n由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。\n``` javascript\n  var http = require('http');\n  var url = require('url');\n  var util = require('util');\n  http.createServer(function(req, res){\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n  }).listen(3000);\n```\n在浏览器中访问`http://localhost:3000/user?name=w3c&email=w3c@w3cschool.cc` 然后查看返回结果: \n<!-- more -->\n``` javascript\n  Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?name=w3c&email=w3c@w3cschool.cc',\n    query: { name: 'w3c', email: 'w3c@w3cschool.cc' },\n    pathname: '/user',\n    path: '/user?name=w3c&email=w3c@w3cschool.cc',\n    href: '/user?name=w3c&email=w3c@w3cschool.cc' }\n```\n#### 获取POST请求内容\nPOST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。\n``` javascript\n  var http = require('http');\n  var querystring = require('querystring');\n  var util = require('util');\n  http.createServer(function(req, res){\n    var post = '';//定义了一个post变量，用于暂存请求体的信息\n    req.on('data',function(chunk){//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n      post += chunk;\n    });\n    req.on('end',function(){//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。\n      post = querystring.parse(post);\n      res.end(util.inspect(post));\n    });\n  }).listen(3000);\n```","source":"_posts/Node.js GET POST请求.md","raw":"---\ntitle: Node.js GET/POST请求(12)\ndate: 2016-06-29 15:38:20\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 12、Node.js GET/POST请求\n#### 获取GET请求内容\n由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。\n``` javascript\n  var http = require('http');\n  var url = require('url');\n  var util = require('util');\n  http.createServer(function(req, res){\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n  }).listen(3000);\n```\n在浏览器中访问`http://localhost:3000/user?name=w3c&email=w3c@w3cschool.cc` 然后查看返回结果: \n<!-- more -->\n``` javascript\n  Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?name=w3c&email=w3c@w3cschool.cc',\n    query: { name: 'w3c', email: 'w3c@w3cschool.cc' },\n    pathname: '/user',\n    path: '/user?name=w3c&email=w3c@w3cschool.cc',\n    href: '/user?name=w3c&email=w3c@w3cschool.cc' }\n```\n#### 获取POST请求内容\nPOST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。\n``` javascript\n  var http = require('http');\n  var querystring = require('querystring');\n  var util = require('util');\n  http.createServer(function(req, res){\n    var post = '';//定义了一个post变量，用于暂存请求体的信息\n    req.on('data',function(chunk){//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n      post += chunk;\n    });\n    req.on('end',function(){//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。\n      post = querystring.parse(post);\n      res.end(util.inspect(post));\n    });\n  }).listen(3000);\n```","slug":"Node.js GET POST请求","published":1,"updated":"2017-07-30T07:21:47.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvtg000xv0uilhse2thu","content":"<h3 id=\"12、Node-js-GET-POST请求\"><a href=\"#12、Node-js-GET-POST请求\" class=\"headerlink\" title=\"12、Node.js GET/POST请求\"></a>12、Node.js GET/POST请求</h3><h4 id=\"获取GET请求内容\"><a href=\"#获取GET请求内容\" class=\"headerlink\" title=\"获取GET请求内容\"></a>获取GET请求内容</h4><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问<code>http://localhost:3000/user?name=w3c&amp;email=w3c@w3cschool.cc</code> 然后查看返回结果:<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Url &#123;</div><div class=\"line\">  protocol: <span class=\"literal\">null</span>,</div><div class=\"line\">  slashes: <span class=\"literal\">null</span>,</div><div class=\"line\">  auth: <span class=\"literal\">null</span>,</div><div class=\"line\">  host: <span class=\"literal\">null</span>,</div><div class=\"line\">  port: <span class=\"literal\">null</span>,</div><div class=\"line\">  hostname: <span class=\"literal\">null</span>,</div><div class=\"line\">  hash: <span class=\"literal\">null</span>,</div><div class=\"line\">  search: <span class=\"string\">'?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class=\"line\">  query: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'w3c'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'w3c@w3cschool.cc'</span> &#125;,</div><div class=\"line\">  pathname: <span class=\"string\">'/user'</span>,</div><div class=\"line\">  path: <span class=\"string\">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class=\"line\">  href: <span class=\"string\">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span> &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取POST请求内容\"><a href=\"#获取POST请求内容\" class=\"headerlink\" title=\"获取POST请求内容\"></a>获取POST请求内容</h4><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;<span class=\"comment\">//定义了一个post变量，用于暂存请求体的信息</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;<span class=\"comment\">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class=\"line\">    post += chunk;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class=\"line\">    post = querystring.parse(post);</div><div class=\"line\">    res.end(util.inspect(post));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"12、Node-js-GET-POST请求\"><a href=\"#12、Node-js-GET-POST请求\" class=\"headerlink\" title=\"12、Node.js GET/POST请求\"></a>12、Node.js GET/POST请求</h3><h4 id=\"获取GET请求内容\"><a href=\"#获取GET请求内容\" class=\"headerlink\" title=\"获取GET请求内容\"></a>获取GET请求内容</h4><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问<code>http://localhost:3000/user?name=w3c&amp;email=w3c@w3cschool.cc</code> 然后查看返回结果:<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Url &#123;</div><div class=\"line\">  protocol: <span class=\"literal\">null</span>,</div><div class=\"line\">  slashes: <span class=\"literal\">null</span>,</div><div class=\"line\">  auth: <span class=\"literal\">null</span>,</div><div class=\"line\">  host: <span class=\"literal\">null</span>,</div><div class=\"line\">  port: <span class=\"literal\">null</span>,</div><div class=\"line\">  hostname: <span class=\"literal\">null</span>,</div><div class=\"line\">  hash: <span class=\"literal\">null</span>,</div><div class=\"line\">  search: <span class=\"string\">'?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class=\"line\">  query: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'w3c'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'w3c@w3cschool.cc'</span> &#125;,</div><div class=\"line\">  pathname: <span class=\"string\">'/user'</span>,</div><div class=\"line\">  path: <span class=\"string\">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</div><div class=\"line\">  href: <span class=\"string\">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span> &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取POST请求内容\"><a href=\"#获取POST请求内容\" class=\"headerlink\" title=\"获取POST请求内容\"></a>获取POST请求内容</h4><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;<span class=\"comment\">//定义了一个post变量，用于暂存请求体的信息</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;<span class=\"comment\">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class=\"line\">    post += chunk;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class=\"line\">    post = querystring.parse(post);</div><div class=\"line\">    res.end(util.inspect(post));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>"},{"title":"Node.js JXcore 打包(18)","date":"2016-06-29T12:14:59.000Z","_content":"\n### 18、Node.js JXcore 打包\nJXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。\n#### JXcore 安装\n下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。\n<!-- more -->\n步骤1、下载\n    1、下载 JXcore 安装包 `http://jxcore.com/downloads/`，你需要根据你自己的系统环境来下载安装包。\n    2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：\n``` bash\n    wget https://s3.amazonaws.com/nodejx/jx_rh64.zip\n    unzip jx_rh64.zip\n    cp jx_rh64/jx /usr/bin\n```\n将 /usr/bin 添加到 PATH 路径中：\n``` bash\n    export PATH=$PATH:/usr/bin\n```\n以上步骤如果操作正确，使用以下命令，会输出版本号信息：\n``` bash\n    jx --version\n    v0.10.32\n```\n#### 包代码\n例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：\n``` bash\n    drwxr-xr-x  2 root root  4096 Nov 13 12:42 images\n    -rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm\n    -rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js\n    drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules\n    drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts\n    drwxr-xr-x  2 root root  4096 Feb 15 11:56 style\n```\n接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：\n``` bash\n  jx package index.js index\n```\n以上命令执行成功，会生成以下两个文件：\n  index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。\n  index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。\n#### 载入 JX 文件\n我们使用 jx 命令打包项目：\n``` bash\n  node index.js command_line_arguments\n```\n使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：\n``` bash\n  jx index.jx command_line_arguments\n```\n更多 JXcore 功能特性你可以参考官网：http://jxcore.com/","source":"_posts/Node.js JXcore打包.md","raw":"---\ntitle: Node.js JXcore 打包(18)\ndate: 2016-06-29 20:14:59\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 18、Node.js JXcore 打包\nJXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。\n#### JXcore 安装\n下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。\n<!-- more -->\n步骤1、下载\n    1、下载 JXcore 安装包 `http://jxcore.com/downloads/`，你需要根据你自己的系统环境来下载安装包。\n    2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：\n``` bash\n    wget https://s3.amazonaws.com/nodejx/jx_rh64.zip\n    unzip jx_rh64.zip\n    cp jx_rh64/jx /usr/bin\n```\n将 /usr/bin 添加到 PATH 路径中：\n``` bash\n    export PATH=$PATH:/usr/bin\n```\n以上步骤如果操作正确，使用以下命令，会输出版本号信息：\n``` bash\n    jx --version\n    v0.10.32\n```\n#### 包代码\n例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：\n``` bash\n    drwxr-xr-x  2 root root  4096 Nov 13 12:42 images\n    -rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm\n    -rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js\n    drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules\n    drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts\n    drwxr-xr-x  2 root root  4096 Feb 15 11:56 style\n```\n接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：\n``` bash\n  jx package index.js index\n```\n以上命令执行成功，会生成以下两个文件：\n  index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。\n  index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。\n#### 载入 JX 文件\n我们使用 jx 命令打包项目：\n``` bash\n  node index.js command_line_arguments\n```\n使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：\n``` bash\n  jx index.jx command_line_arguments\n```\n更多 JXcore 功能特性你可以参考官网：http://jxcore.com/","slug":"Node.js JXcore打包","published":1,"updated":"2017-07-30T07:21:47.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvtl000zv0uiw38fze1j","content":"<h3 id=\"18、Node-js-JXcore-打包\"><a href=\"#18、Node-js-JXcore-打包\" class=\"headerlink\" title=\"18、Node.js JXcore 打包\"></a>18、Node.js JXcore 打包</h3><p>JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。</p>\n<h4 id=\"JXcore-安装\"><a href=\"#JXcore-安装\" class=\"headerlink\" title=\"JXcore 安装\"></a>JXcore 安装</h4><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。<br><a id=\"more\"></a><br>步骤1、下载<br>    1、下载 JXcore 安装包 <code>http://jxcore.com/downloads/</code>，你需要根据你自己的系统环境来下载安装包。<br>    2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://s3.amazonaws.com/nodejx/jx_rh64.zip</div><div class=\"line\">unzip jx_rh64.zip</div><div class=\"line\">cp jx_rh64/jx /usr/bin</div></pre></td></tr></table></figure></p>\n<p>将 /usr/bin 添加到 PATH 路径中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/bin</div></pre></td></tr></table></figure></p>\n<p>以上步骤如果操作正确，使用以下命令，会输出版本号信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx --version</div><div class=\"line\">v0.10.32</div></pre></td></tr></table></figure></p>\n<h4 id=\"包代码\"><a href=\"#包代码\" class=\"headerlink\" title=\"包代码\"></a>包代码</h4><p>例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxr-xr-x  2 root root  4096 Nov 13 12:42 images</div><div class=\"line\">-rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm</div><div class=\"line\">-rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js</div><div class=\"line\">drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules</div><div class=\"line\">drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts</div><div class=\"line\">drwxr-xr-x  2 root root  4096 Feb 15 11:56 style</div></pre></td></tr></table></figure></p>\n<p>接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx package index.js index</div></pre></td></tr></table></figure></p>\n<p>以上命令执行成功，会生成以下两个文件：<br>  index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。<br>  index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。</p>\n<h4 id=\"载入-JX-文件\"><a href=\"#载入-JX-文件\" class=\"headerlink\" title=\"载入 JX 文件\"></a>载入 JX 文件</h4><p>我们使用 jx 命令打包项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js command_line_arguments</div></pre></td></tr></table></figure></p>\n<p>使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx index.jx command_line_arguments</div></pre></td></tr></table></figure></p>\n<p>更多 JXcore 功能特性你可以参考官网：<a href=\"http://jxcore.com/\" target=\"_blank\" rel=\"external\">http://jxcore.com/</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"18、Node-js-JXcore-打包\"><a href=\"#18、Node-js-JXcore-打包\" class=\"headerlink\" title=\"18、Node.js JXcore 打包\"></a>18、Node.js JXcore 打包</h3><p>JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。但我们这篇文章主要是要教大家介绍 JXcore 的打包功能。</p>\n<h4 id=\"JXcore-安装\"><a href=\"#JXcore-安装\" class=\"headerlink\" title=\"JXcore 安装\"></a>JXcore 安装</h4><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。<br>","more":"<br>步骤1、下载<br>    1、下载 JXcore 安装包 <code>http://jxcore.com/downloads/</code>，你需要根据你自己的系统环境来下载安装包。<br>    2、Linux/OSX 下载安装命令，直接下载解压包下的 jx 二进制文件拷贝到 /usr/bin 目录下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://s3.amazonaws.com/nodejx/jx_rh64.zip</div><div class=\"line\">unzip jx_rh64.zip</div><div class=\"line\">cp jx_rh64/jx /usr/bin</div></pre></td></tr></table></figure></p>\n<p>将 /usr/bin 添加到 PATH 路径中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/bin</div></pre></td></tr></table></figure></p>\n<p>以上步骤如果操作正确，使用以下命令，会输出版本号信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx --version</div><div class=\"line\">v0.10.32</div></pre></td></tr></table></figure></p>\n<h4 id=\"包代码\"><a href=\"#包代码\" class=\"headerlink\" title=\"包代码\"></a>包代码</h4><p>例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxr-xr-x  2 root root  4096 Nov 13 12:42 images</div><div class=\"line\">-rwxr-xr-x  1 root root 30457 Mar  6 12:19 index.htm</div><div class=\"line\">-rwxr-xr-x  1 root root 30452 Mar  1 12:54 index.js</div><div class=\"line\">drwxr-xr-x 23 root root  4096 Jan 15 03:48 node_modules</div><div class=\"line\">drwxr-xr-x  2 root root  4096 Mar 21 06:10 scripts</div><div class=\"line\">drwxr-xr-x  2 root root  4096 Feb 15 11:56 style</div></pre></td></tr></table></figure></p>\n<p>接下来我们使用 jx 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx package index.js index</div></pre></td></tr></table></figure></p>\n<p>以上命令执行成功，会生成以下两个文件：<br>  index.jxp //这是一个中间件文件，包含了需要编译的完整项目信息。<br>  index.jx  //这是一个完整包信息的二进制文件，可运行在客户端上。</p>\n<h4 id=\"载入-JX-文件\"><a href=\"#载入-JX-文件\" class=\"headerlink\" title=\"载入 JX 文件\"></a>载入 JX 文件</h4><p>我们使用 jx 命令打包项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js command_line_arguments</div></pre></td></tr></table></figure></p>\n<p>使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jx index.jx command_line_arguments</div></pre></td></tr></table></figure></p>\n<p>更多 JXcore 功能特性你可以参考官网：<a href=\"http://jxcore.com/\" target=\"_blank\" rel=\"external\">http://jxcore.com/</a></p>"},{"title":"Node.js RESTful API(16)","date":"2016-06-30T03:38:20.000Z","_content":"\n### 16、Node.js RESTful API */\nREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。\n<!-- more -->\n#### HTTP 方法\n以下为 REST 基本架构的四个方法：\n```\n    GET - 用于获取数据。\n    PUT - 用于添加数据。\n    DELETE - 用于删除数据。\n    POST - 用于更新或添加数据。\n```\n#### 创建 RESTful\n首先，创建一个 json 数据资源文件 users.json，内容如下：\n``` json\n  {\n     \"user1\" : {\n        \"name\" : \"mahesh\",\n      \"password\" : \"password1\",\n      \"profession\" : \"teacher\",\n      \"id\": 1\n     },\n     \"user2\" : {\n        \"name\" : \"suresh\",\n      \"password\" : \"password2\",\n      \"profession\" : \"librarian\",\n      \"id\": 2\n     },\n     \"user3\" : {\n        \"name\" : \"ramesh\",\n      \"password\" : \"password3\",\n      \"profession\" : \"clerk\",\n      \"id\": 3\n     }\n  }\n```\n基于以上数据，我们创建以下 RESTful API：\n```\n    序号  URI       HTTP方法  发送内容   结果\n      1   listUsers   GET     空          显示所有用户列表\n      2   addUser   POST      JSON 字符串   添加新用户\n      3   deleteUser  DELETE    JSON 字符串   删除用户\n      4   :id       GET     空          显示用户详细信息\n```\n#### 获取用户列表：listUsers\n创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./listUsers', function (req, res){\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      console.log(data);\n      res.end(data);\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/listUsers，结果如下所示：\n``` json\n  {\n     \"user1\" : {\n        \"name\" : \"mahesh\",\n        \"password\" : \"password1\",\n        \"profession\" : \"teacher\",\n        \"id\": 1\n     },\n     \"user2\" : {\n        \"name\" : \"suresh\",\n        \"password\" : \"password2\",\n        \"profession\" : \"librarian\",\n        \"id\": 2\n     },\n     \"user3\" : {\n        \"name\" : \"ramesh\",\n        \"password\" : \"password3\",\n        \"profession\" : \"clerk\",\n        \"id\": 3\n     }\n  }\n```\n#### 添加用户：addUser\n创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  //添加的新用户数据\n  var user = {\n    \"user4\" : {\n        \"name\" : \"mohit\",\n        \"password\" : \"password4\",\n        \"profession\" : \"teacher\",\n        \"id\": 4\n    }\n  };\n  app.get('./addUser', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      data[\"user4\"] = user[\"user4\"];\n      console.log(data);\n      res.end(JSON.stringify(data));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/addUser，结果如下所示：\n``` json\n  { user1:\n     { name: 'mahesh',\n       password: 'password1',\n       profession: 'teacher',\n       id: 1 },\n    user2:\n     { name: 'suresh',\n       password: 'password2',\n       profession: 'librarian',\n       id: 2 },\n    user3:\n     { name: 'ramesh',\n       password: 'password3',\n       profession: 'clerk',\n       id: 3 },\n    user4:\n     { name: 'mohit',\n       password: 'password4',\n       profession: 'teacher',\n       id: 4 } \n  }\n```\n#### 删除用户：deleteUser\n创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./deleteUser', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      delete data[\"user\"+2];\n      console.log(data);\n      res.end(JSON.stringify(data));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/deleteUser，结果如下所示：\n``` json\n  { user1:\n     { name: 'mahesh',\n       password: 'password1',\n       profession: 'teacher',\n       id: 1 },\n    user3:\n     { name: 'ramesh',\n       password: 'password3',\n       profession: 'clerk',\n       id: 3 },\n  }\n```\n#### 显示用户详情：:id(用户id)\n创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./:id', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      var user = data[\"user\" + req.params.id]\n      console.log(user);\n      res.end(JSON.stringify(user));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/2，结果如下所示：\n``` json\n  {\n     \"name\":\"suresh\",\n     \"password\":\"password2\",\n     \"profession\":\"librarian\",\n     \"id\":2\n  }\n```\n","source":"_posts/Node.js RESTful API.md","raw":"---\ntitle: Node.js RESTful API(16)\ndate: 2016-06-30 11:38:20\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 16、Node.js RESTful API */\nREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。\n<!-- more -->\n#### HTTP 方法\n以下为 REST 基本架构的四个方法：\n```\n    GET - 用于获取数据。\n    PUT - 用于添加数据。\n    DELETE - 用于删除数据。\n    POST - 用于更新或添加数据。\n```\n#### 创建 RESTful\n首先，创建一个 json 数据资源文件 users.json，内容如下：\n``` json\n  {\n     \"user1\" : {\n        \"name\" : \"mahesh\",\n      \"password\" : \"password1\",\n      \"profession\" : \"teacher\",\n      \"id\": 1\n     },\n     \"user2\" : {\n        \"name\" : \"suresh\",\n      \"password\" : \"password2\",\n      \"profession\" : \"librarian\",\n      \"id\": 2\n     },\n     \"user3\" : {\n        \"name\" : \"ramesh\",\n      \"password\" : \"password3\",\n      \"profession\" : \"clerk\",\n      \"id\": 3\n     }\n  }\n```\n基于以上数据，我们创建以下 RESTful API：\n```\n    序号  URI       HTTP方法  发送内容   结果\n      1   listUsers   GET     空          显示所有用户列表\n      2   addUser   POST      JSON 字符串   添加新用户\n      3   deleteUser  DELETE    JSON 字符串   删除用户\n      4   :id       GET     空          显示用户详细信息\n```\n#### 获取用户列表：listUsers\n创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./listUsers', function (req, res){\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      console.log(data);\n      res.end(data);\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/listUsers，结果如下所示：\n``` json\n  {\n     \"user1\" : {\n        \"name\" : \"mahesh\",\n        \"password\" : \"password1\",\n        \"profession\" : \"teacher\",\n        \"id\": 1\n     },\n     \"user2\" : {\n        \"name\" : \"suresh\",\n        \"password\" : \"password2\",\n        \"profession\" : \"librarian\",\n        \"id\": 2\n     },\n     \"user3\" : {\n        \"name\" : \"ramesh\",\n        \"password\" : \"password3\",\n        \"profession\" : \"clerk\",\n        \"id\": 3\n     }\n  }\n```\n#### 添加用户：addUser\n创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  //添加的新用户数据\n  var user = {\n    \"user4\" : {\n        \"name\" : \"mohit\",\n        \"password\" : \"password4\",\n        \"profession\" : \"teacher\",\n        \"id\": 4\n    }\n  };\n  app.get('./addUser', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      data[\"user4\"] = user[\"user4\"];\n      console.log(data);\n      res.end(JSON.stringify(data));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/addUser，结果如下所示：\n``` json\n  { user1:\n     { name: 'mahesh',\n       password: 'password1',\n       profession: 'teacher',\n       id: 1 },\n    user2:\n     { name: 'suresh',\n       password: 'password2',\n       profession: 'librarian',\n       id: 2 },\n    user3:\n     { name: 'ramesh',\n       password: 'password3',\n       profession: 'clerk',\n       id: 3 },\n    user4:\n     { name: 'mohit',\n       password: 'password4',\n       profession: 'teacher',\n       id: 4 } \n  }\n```\n#### 删除用户：deleteUser\n创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./deleteUser', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      delete data[\"user\"+2];\n      console.log(data);\n      res.end(JSON.stringify(data));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/deleteUser，结果如下所示：\n``` json\n  { user1:\n     { name: 'mahesh',\n       password: 'password1',\n       profession: 'teacher',\n       id: 1 },\n    user3:\n     { name: 'ramesh',\n       password: 'password3',\n       profession: 'clerk',\n       id: 3 },\n  }\n```\n#### 显示用户详情：:id(用户id)\n创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：\n``` javascript\n  var express = require('express');\n  var app = express();\n  var fs = require('fs');\n  app.get('./:id', function (req, res){\n    //读取已存在的数据\n    fs.readFile(__dirname + \"/\" + \"users.Json\", 'utf8', function (err, data){\n      data = JSON.parse(data);\n      var user = data[\"user\" + req.params.id]\n      console.log(user);\n      res.end(JSON.stringify(user));\n    });\n  });\n  var server = app.listen(8081, function(){\n    var host = server.address().address;\n    var port = server.address().port;\n    console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n  });\n```\n接下来执行以下命令：\n```\n  node server.js \n  应用实例，访问地址为 http://0.0.0.0:8081\n```\n在浏览器中访问 http://127.0.0.1:8081/2，结果如下所示：\n``` json\n  {\n     \"name\":\"suresh\",\n     \"password\":\"password2\",\n     \"profession\":\"librarian\",\n     \"id\":2\n  }\n```\n","slug":"Node.js RESTful API","published":1,"updated":"2017-07-30T07:21:47.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvtp0013v0ui4ayxdijd","content":"<h3 id=\"16、Node-js-RESTful-API\"><a href=\"#16、Node-js-RESTful-API\" class=\"headerlink\" title=\"16、Node.js RESTful API */\"></a>16、Node.js RESTful API */</h3><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。<br><a id=\"more\"></a></p>\n<h4 id=\"HTTP-方法\"><a href=\"#HTTP-方法\" class=\"headerlink\" title=\"HTTP 方法\"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET - 用于获取数据。</div><div class=\"line\">PUT - 用于添加数据。</div><div class=\"line\">DELETE - 用于删除数据。</div><div class=\"line\">POST - 用于更新或添加数据。</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建-RESTful\"><a href=\"#创建-RESTful\" class=\"headerlink\" title=\"创建 RESTful\"></a>创建 RESTful</h4><p>首先，创建一个 json 数据资源文件 users.json，内容如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"user1\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"mahesh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user2\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user3\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"ramesh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"clerk\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>基于以上数据，我们创建以下 RESTful API：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">序号  URI       HTTP方法  发送内容   结果</div><div class=\"line\">  1   listUsers   GET     空          显示所有用户列表</div><div class=\"line\">  2   addUser   POST      JSON 字符串   添加新用户</div><div class=\"line\">  3   deleteUser  DELETE    JSON 字符串   删除用户</div><div class=\"line\">  4   :id       GET     空          显示用户详细信息</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取用户列表：listUsers\"><a href=\"#获取用户列表：listUsers\" class=\"headerlink\" title=\"获取用户列表：listUsers\"></a>获取用户列表：listUsers</h4><p>创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./listUsers'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/listUsers，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/listUsers，结果如下所示：</a><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"user1\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"mahesh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password1\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user2\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password2\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user3\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"ramesh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password3\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"clerk\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加用户：addUser\"><a href=\"#添加用户：addUser\" class=\"headerlink\" title=\"添加用户：addUser\"></a>添加用户：addUser</h4><p>创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"comment\">//添加的新用户数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123;</div><div class=\"line\">  <span class=\"string\">\"user4\"</span> : &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span> : <span class=\"string\">\"mohit\"</span>,</div><div class=\"line\">      <span class=\"string\">\"password\"</span> : <span class=\"string\">\"password4\"</span>,</div><div class=\"line\">      <span class=\"string\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">app.get(<span class=\"string\">'./addUser'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    data[<span class=\"string\">\"user4\"</span>] = user[<span class=\"string\">\"user4\"</span>];</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(data));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/addUser，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/addUser，结果如下所示：</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; user1:</div><div class=\"line\">   &#123; name: 'mahesh',</div><div class=\"line\">     password: 'password1',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 1 &#125;,</div><div class=\"line\">  user2:</div><div class=\"line\">   &#123; name: 'suresh',</div><div class=\"line\">     password: 'password2',</div><div class=\"line\">     profession: 'librarian',</div><div class=\"line\">     id: 2 &#125;,</div><div class=\"line\">  user3:</div><div class=\"line\">   &#123; name: 'ramesh',</div><div class=\"line\">     password: 'password3',</div><div class=\"line\">     profession: 'clerk',</div><div class=\"line\">     id: 3 &#125;,</div><div class=\"line\">  user4:</div><div class=\"line\">   &#123; name: 'mohit',</div><div class=\"line\">     password: 'password4',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 4 &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除用户：deleteUser\"><a href=\"#删除用户：deleteUser\" class=\"headerlink\" title=\"删除用户：deleteUser\"></a>删除用户：deleteUser</h4><p>创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./deleteUser'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    <span class=\"keyword\">delete</span> data[<span class=\"string\">\"user\"</span>+<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(data));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/deleteUser，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/deleteUser，结果如下所示：</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; user1:</div><div class=\"line\">   &#123; name: 'mahesh',</div><div class=\"line\">     password: 'password1',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 1 &#125;,</div><div class=\"line\">  user3:</div><div class=\"line\">   &#123; name: 'ramesh',</div><div class=\"line\">     password: 'password3',</div><div class=\"line\">     profession: 'clerk',</div><div class=\"line\">     id: 3 &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"显示用户详情：-id-用户id\"><a href=\"#显示用户详情：-id-用户id\" class=\"headerlink\" title=\"显示用户详情：:id(用户id)\"></a>显示用户详情：:id(用户id)</h4><p>创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = data[<span class=\"string\">\"user\"</span> + req.params.id]</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(user));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/2，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/2，结果如下所示：</a><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"password2\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"profession\"</span>:<span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"id\"</span>:<span class=\"number\">2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"16、Node-js-RESTful-API\"><a href=\"#16、Node-js-RESTful-API\" class=\"headerlink\" title=\"16、Node.js RESTful API */\"></a>16、Node.js RESTful API */</h3><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。<br>","more":"</p>\n<h4 id=\"HTTP-方法\"><a href=\"#HTTP-方法\" class=\"headerlink\" title=\"HTTP 方法\"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET - 用于获取数据。</div><div class=\"line\">PUT - 用于添加数据。</div><div class=\"line\">DELETE - 用于删除数据。</div><div class=\"line\">POST - 用于更新或添加数据。</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建-RESTful\"><a href=\"#创建-RESTful\" class=\"headerlink\" title=\"创建 RESTful\"></a>创建 RESTful</h4><p>首先，创建一个 json 数据资源文件 users.json，内容如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"user1\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"mahesh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user2\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user3\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"ramesh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"clerk\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>基于以上数据，我们创建以下 RESTful API：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">序号  URI       HTTP方法  发送内容   结果</div><div class=\"line\">  1   listUsers   GET     空          显示所有用户列表</div><div class=\"line\">  2   addUser   POST      JSON 字符串   添加新用户</div><div class=\"line\">  3   deleteUser  DELETE    JSON 字符串   删除用户</div><div class=\"line\">  4   :id       GET     空          显示用户详细信息</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取用户列表：listUsers\"><a href=\"#获取用户列表：listUsers\" class=\"headerlink\" title=\"获取用户列表：listUsers\"></a>获取用户列表：listUsers</h4><p>创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./listUsers'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/listUsers，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/listUsers，结果如下所示：</a><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"user1\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"mahesh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password1\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user2\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password2\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">\"user3\"</span> : &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"ramesh\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"password\"</span> : <span class=\"string\">\"password3\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"profession\"</span> : <span class=\"string\">\"clerk\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加用户：addUser\"><a href=\"#添加用户：addUser\" class=\"headerlink\" title=\"添加用户：addUser\"></a>添加用户：addUser</h4><p>创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"comment\">//添加的新用户数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123;</div><div class=\"line\">  <span class=\"string\">\"user4\"</span> : &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span> : <span class=\"string\">\"mohit\"</span>,</div><div class=\"line\">      <span class=\"string\">\"password\"</span> : <span class=\"string\">\"password4\"</span>,</div><div class=\"line\">      <span class=\"string\">\"profession\"</span> : <span class=\"string\">\"teacher\"</span>,</div><div class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">app.get(<span class=\"string\">'./addUser'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    data[<span class=\"string\">\"user4\"</span>] = user[<span class=\"string\">\"user4\"</span>];</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(data));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/addUser，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/addUser，结果如下所示：</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; user1:</div><div class=\"line\">   &#123; name: 'mahesh',</div><div class=\"line\">     password: 'password1',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 1 &#125;,</div><div class=\"line\">  user2:</div><div class=\"line\">   &#123; name: 'suresh',</div><div class=\"line\">     password: 'password2',</div><div class=\"line\">     profession: 'librarian',</div><div class=\"line\">     id: 2 &#125;,</div><div class=\"line\">  user3:</div><div class=\"line\">   &#123; name: 'ramesh',</div><div class=\"line\">     password: 'password3',</div><div class=\"line\">     profession: 'clerk',</div><div class=\"line\">     id: 3 &#125;,</div><div class=\"line\">  user4:</div><div class=\"line\">   &#123; name: 'mohit',</div><div class=\"line\">     password: 'password4',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 4 &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除用户：deleteUser\"><a href=\"#删除用户：deleteUser\" class=\"headerlink\" title=\"删除用户：deleteUser\"></a>删除用户：deleteUser</h4><p>创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./deleteUser'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    <span class=\"keyword\">delete</span> data[<span class=\"string\">\"user\"</span>+<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(data));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/deleteUser，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/deleteUser，结果如下所示：</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; user1:</div><div class=\"line\">   &#123; name: 'mahesh',</div><div class=\"line\">     password: 'password1',</div><div class=\"line\">     profession: 'teacher',</div><div class=\"line\">     id: 1 &#125;,</div><div class=\"line\">  user3:</div><div class=\"line\">   &#123; name: 'ramesh',</div><div class=\"line\">     password: 'password3',</div><div class=\"line\">     profession: 'clerk',</div><div class=\"line\">     id: 3 &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"显示用户详情：-id-用户id\"><a href=\"#显示用户详情：-id-用户id\" class=\"headerlink\" title=\"显示用户详情：:id(用户id)\"></a>显示用户详情：:id(用户id)</h4><p>创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">app.get(<span class=\"string\">'./:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//读取已存在的数据</span></div><div class=\"line\">  fs.readFile(__dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"users.Json\"</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    data = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = data[<span class=\"string\">\"user\"</span> + req.params.id]</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">    res.end(<span class=\"built_in\">JSON</span>.stringify(user));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>接下来执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js </div><div class=\"line\">应用实例，访问地址为 http://0.0.0.0:8081</div></pre></td></tr></table></figure></p>\n<p>在浏览器中访问 <a href=\"http://127.0.0.1:8081/2，结果如下所示：\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8081/2，结果如下所示：</a><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"suresh\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"password2\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"profession\"</span>:<span class=\"string\">\"librarian\"</span>,</div><div class=\"line\">   <span class=\"attr\">\"id\"</span>:<span class=\"number\">2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Node.js Stream流(5)","date":"2016-06-28T01:50:03.000Z","_content":"\n\n### 5、Node.js Stream(流)\n`Stream` 是一个抽象接口，`Node` 中有很多对象实现了这个接口。例如，对`http` 服务器发起请求的`request` 对象就是一个 `Stream`，还有`stdout`（标准输出）。\nStream有四种流类型：\n  `Readable` //可读操作。\n  `Writable` //可写操作。\n  `Duplex`   //可读写操作。\n  `Transform`//操作被写入数据，然后读出数据。\n所有的`Stream`对象都是`EventEmitter`的实例。\n<!-- more -->\n常用事件：\n      `data`  //当有数据可读时触发。\n      `end  ` //没有更多数据可读时触发。\n      `error` //在接收和写入过程中发生错误时触发。\n      `finish`//所有数据已被写入到底层系统时触发。\n#### 从流中读取数据实例\n创建input.txt文件，内容自定。\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var data = '';\n  //创建可读流\n  var readerStream = fs.createReadStream('input.txt');\n  //设置编码为 utf8。\n  readerStream.setEncoding('UTF8');\n  //处理流事件-->data,end,and errror\n  readerStream.on('data',function(chunk){\n    data += chunk;\n  });\n  readerStream.on('end',function(){\n    console.log(data);\n  });\n  readerStream.on('error',function(err){\n    console.log(err.stack);\n  });\n  console.log(\"程序执行完毕\");\n```\n#### 写入流实例\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var data = '我是被写入的数据';\n  //创建一个可以写入的流，写入到output.txt中\n  var writerStream = fs.createWriteStream('output.txt');\n  //使用utf8编码写入数据\n  writerStream.write(data,'UTF8');\n  //标记文件末尾\n  writerStream.end();\n  //处理流事件-->finish, errror\n  readerStream.on('finish',function(){\n    console.log(\"写入完成。\");\n  });\n  readerStream.on('error',function(err){\n    console.log(err.stack);\n  });\n  console.log(\"程序执行完毕\");\n```\n####　管道流实例\n创建input.txt文件，内容自定。\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  //创建一个可读流\n  var readerStream = fs.createReadStream('input.txt');\n  //创建一个可写流\n  var writerStream = fs.createWriteStream('output.txt');\n  //管道读写操作，读取input.txt内容，并写入到output.txt文件中。\n  readerStream.pipe(writerStream);\n  console.log(\"程序执行完毕\");\n```\n####　链式流实例\n创建compress.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var zlib = require('zlib');\n  //压缩input.txt文件为input.txt.gz\n  fs.createReadStream('input.txt').pipe(zlib.createGzip()).pipe(fs.createWriteStream('input.txt.gz'));\n  console.log(\"文件压缩完成。\");\n  //执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。接下来，让我们来解压该文件\n  //创建 decompress.js 文件:\n  var fs = require(\"fs\");\n  var zlib = require('zlib');\n  //解压input.txt.gz文件为input.txt\n  fs.createReadStream('input.txt.gz').pipe(zlib.createGunzip()).pipe(fs.createWriteStream('input.txt'));\n  console.log(\"文件解压完成。\"); \n```\n","source":"_posts/Node.js Stream流.md","raw":"---\ntitle: Node.js Stream流(5)\ndate: 2016-06-28 9:50:03\ntags: node\ncategories: nodeJS学习笔记\n---\n\n\n### 5、Node.js Stream(流)\n`Stream` 是一个抽象接口，`Node` 中有很多对象实现了这个接口。例如，对`http` 服务器发起请求的`request` 对象就是一个 `Stream`，还有`stdout`（标准输出）。\nStream有四种流类型：\n  `Readable` //可读操作。\n  `Writable` //可写操作。\n  `Duplex`   //可读写操作。\n  `Transform`//操作被写入数据，然后读出数据。\n所有的`Stream`对象都是`EventEmitter`的实例。\n<!-- more -->\n常用事件：\n      `data`  //当有数据可读时触发。\n      `end  ` //没有更多数据可读时触发。\n      `error` //在接收和写入过程中发生错误时触发。\n      `finish`//所有数据已被写入到底层系统时触发。\n#### 从流中读取数据实例\n创建input.txt文件，内容自定。\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var data = '';\n  //创建可读流\n  var readerStream = fs.createReadStream('input.txt');\n  //设置编码为 utf8。\n  readerStream.setEncoding('UTF8');\n  //处理流事件-->data,end,and errror\n  readerStream.on('data',function(chunk){\n    data += chunk;\n  });\n  readerStream.on('end',function(){\n    console.log(data);\n  });\n  readerStream.on('error',function(err){\n    console.log(err.stack);\n  });\n  console.log(\"程序执行完毕\");\n```\n#### 写入流实例\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var data = '我是被写入的数据';\n  //创建一个可以写入的流，写入到output.txt中\n  var writerStream = fs.createWriteStream('output.txt');\n  //使用utf8编码写入数据\n  writerStream.write(data,'UTF8');\n  //标记文件末尾\n  writerStream.end();\n  //处理流事件-->finish, errror\n  readerStream.on('finish',function(){\n    console.log(\"写入完成。\");\n  });\n  readerStream.on('error',function(err){\n    console.log(err.stack);\n  });\n  console.log(\"程序执行完毕\");\n```\n####　管道流实例\n创建input.txt文件，内容自定。\n创建main.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  //创建一个可读流\n  var readerStream = fs.createReadStream('input.txt');\n  //创建一个可写流\n  var writerStream = fs.createWriteStream('output.txt');\n  //管道读写操作，读取input.txt内容，并写入到output.txt文件中。\n  readerStream.pipe(writerStream);\n  console.log(\"程序执行完毕\");\n```\n####　链式流实例\n创建compress.js文件：\n``` javascript\n  var fs = require(\"fs\");\n  var zlib = require('zlib');\n  //压缩input.txt文件为input.txt.gz\n  fs.createReadStream('input.txt').pipe(zlib.createGzip()).pipe(fs.createWriteStream('input.txt.gz'));\n  console.log(\"文件压缩完成。\");\n  //执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。接下来，让我们来解压该文件\n  //创建 decompress.js 文件:\n  var fs = require(\"fs\");\n  var zlib = require('zlib');\n  //解压input.txt.gz文件为input.txt\n  fs.createReadStream('input.txt.gz').pipe(zlib.createGunzip()).pipe(fs.createWriteStream('input.txt'));\n  console.log(\"文件解压完成。\"); \n```\n","slug":"Node.js Stream流","published":1,"updated":"2017-07-30T07:21:47.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvts0014v0ui3shsqy4q","content":"<h3 id=\"5、Node-js-Stream-流\"><a href=\"#5、Node-js-Stream-流\" class=\"headerlink\" title=\"5、Node.js Stream(流)\"></a>5、Node.js Stream(流)</h3><p><code>Stream</code> 是一个抽象接口，<code>Node</code> 中有很多对象实现了这个接口。例如，对<code>http</code> 服务器发起请求的<code>request</code> 对象就是一个 <code>Stream</code>，还有<code>stdout</code>（标准输出）。<br>Stream有四种流类型：<br>  <code>Readable</code> //可读操作。<br>  <code>Writable</code> //可写操作。<br>  <code>Duplex</code>   //可读写操作。<br>  <code>Transform</code>//操作被写入数据，然后读出数据。<br>所有的<code>Stream</code>对象都是<code>EventEmitter</code>的实例。<br><a id=\"more\"></a><br>常用事件：<br>      <code>data</code>  //当有数据可读时触发。<br>      <code>end</code> //没有更多数据可读时触发。<br>      <code>error</code> //在接收和写入过程中发生错误时触发。<br>      <code>finish</code>//所有数据已被写入到底层系统时触发。</p>\n<h4 id=\"从流中读取数据实例\"><a href=\"#从流中读取数据实例\" class=\"headerlink\" title=\"从流中读取数据实例\"></a>从流中读取数据实例</h4><p>创建input.txt文件，内容自定。<br>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"comment\">//创建可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//设置编码为 utf8。</span></div><div class=\"line\">readerStream.setEncoding(<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"><span class=\"comment\">//处理流事件--&gt;data,end,and errror</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">  data += chunk;</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"写入流实例\"><a href=\"#写入流实例\" class=\"headerlink\" title=\"写入流实例\"></a>写入流实例</h4><p>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">'我是被写入的数据'</span>;</div><div class=\"line\"><span class=\"comment\">//创建一个可以写入的流，写入到output.txt中</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//使用utf8编码写入数据</span></div><div class=\"line\">writerStream.write(data,<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"><span class=\"comment\">//标记文件末尾</span></div><div class=\"line\">writerStream.end();</div><div class=\"line\"><span class=\"comment\">//处理流事件--&gt;finish, errror</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'finish'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入完成。\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>####　管道流实例<br>创建input.txt文件，内容自定。<br>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"comment\">//创建一个可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//创建一个可写流</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//管道读写操作，读取input.txt内容，并写入到output.txt文件中。</span></div><div class=\"line\">readerStream.pipe(writerStream);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>####　链式流实例<br>创建compress.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"><span class=\"comment\">//压缩input.txt文件为input.txt.gz</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt'</span>).pipe(zlib.createGzip()).pipe(fs.createWriteStream(<span class=\"string\">'input.txt.gz'</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件压缩完成。\"</span>);</div><div class=\"line\"><span class=\"comment\">//执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。接下来，让我们来解压该文件</span></div><div class=\"line\"><span class=\"comment\">//创建 decompress.js 文件:</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"><span class=\"comment\">//解压input.txt.gz文件为input.txt</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt.gz'</span>).pipe(zlib.createGunzip()).pipe(fs.createWriteStream(<span class=\"string\">'input.txt'</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件解压完成。\"</span>);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"5、Node-js-Stream-流\"><a href=\"#5、Node-js-Stream-流\" class=\"headerlink\" title=\"5、Node.js Stream(流)\"></a>5、Node.js Stream(流)</h3><p><code>Stream</code> 是一个抽象接口，<code>Node</code> 中有很多对象实现了这个接口。例如，对<code>http</code> 服务器发起请求的<code>request</code> 对象就是一个 <code>Stream</code>，还有<code>stdout</code>（标准输出）。<br>Stream有四种流类型：<br>  <code>Readable</code> //可读操作。<br>  <code>Writable</code> //可写操作。<br>  <code>Duplex</code>   //可读写操作。<br>  <code>Transform</code>//操作被写入数据，然后读出数据。<br>所有的<code>Stream</code>对象都是<code>EventEmitter</code>的实例。<br>","more":"<br>常用事件：<br>      <code>data</code>  //当有数据可读时触发。<br>      <code>end</code> //没有更多数据可读时触发。<br>      <code>error</code> //在接收和写入过程中发生错误时触发。<br>      <code>finish</code>//所有数据已被写入到底层系统时触发。</p>\n<h4 id=\"从流中读取数据实例\"><a href=\"#从流中读取数据实例\" class=\"headerlink\" title=\"从流中读取数据实例\"></a>从流中读取数据实例</h4><p>创建input.txt文件，内容自定。<br>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"comment\">//创建可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//设置编码为 utf8。</span></div><div class=\"line\">readerStream.setEncoding(<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"><span class=\"comment\">//处理流事件--&gt;data,end,and errror</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">  data += chunk;</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"写入流实例\"><a href=\"#写入流实例\" class=\"headerlink\" title=\"写入流实例\"></a>写入流实例</h4><p>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">'我是被写入的数据'</span>;</div><div class=\"line\"><span class=\"comment\">//创建一个可以写入的流，写入到output.txt中</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//使用utf8编码写入数据</span></div><div class=\"line\">writerStream.write(data,<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"><span class=\"comment\">//标记文件末尾</span></div><div class=\"line\">writerStream.end();</div><div class=\"line\"><span class=\"comment\">//处理流事件--&gt;finish, errror</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'finish'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入完成。\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>####　管道流实例<br>创建input.txt文件，内容自定。<br>创建main.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"comment\">//创建一个可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//创建一个可写流</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"><span class=\"comment\">//管道读写操作，读取input.txt内容，并写入到output.txt文件中。</span></div><div class=\"line\">readerStream.pipe(writerStream);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>####　链式流实例<br>创建compress.js文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"><span class=\"comment\">//压缩input.txt文件为input.txt.gz</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt'</span>).pipe(zlib.createGzip()).pipe(fs.createWriteStream(<span class=\"string\">'input.txt.gz'</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件压缩完成。\"</span>);</div><div class=\"line\"><span class=\"comment\">//执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。接下来，让我们来解压该文件</span></div><div class=\"line\"><span class=\"comment\">//创建 decompress.js 文件:</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"><span class=\"comment\">//解压input.txt.gz文件为input.txt</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt.gz'</span>).pipe(zlib.createGunzip()).pipe(fs.createWriteStream(<span class=\"string\">'input.txt'</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件解压完成。\"</span>);</div></pre></td></tr></table></figure></p>"},{"title":"Node.js Web 模块(14)","date":"2016-06-29T12:51:36.000Z","_content":"\n\n### 14、Node.js Web 模块\n使用 Node 创建 Web 服务器\nNode.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：\n``` javascript\n  var http = require('http');\n```\n以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：\n<!-- more -->\n``` javascript\n  var http = require('http');\n  var fs = require('fs');\n  var url = require('url');\n  //创建服务器\n  http.createServer(function(request,response){\n    //解析请求，包括文件名\n    var pathname = url.parse(request.url).pathname;\n    //输出请求文件名\n    console.log(\"Request for \" + pathname + \" received.\");\n    //从文件系统中读取请求的文件内容\n    fs.readFile(pathname.substr(1), function (err, data){\n      if (err) {\n        console.log(err);\n        //HTTP 状态码：404：NOT FOUND\n        //Content Type：text/plain\n        response.writeHead(404, {'Content-Type': 'text/html'});\n      } else{\n        //HTTP 状态码：200：OK\n        //Content Type：text/plain\n        response.writeHead(200, {'Content-Type': 'text/html'});\n        //响应文件内容\n        response.write(data.toString());\n      };\n      //发送响应数据\n      response.end();\n    });\n  }).listen(8081);\n```\n控制台会输出以下信息\n``` javascript\n  console.log('Server running at http://127.0.0.1:8081/');\n```\n接下来我们在该目录下创建一个 index.htm 文件，代码如下：\n``` html\n        <html>\n        <head>\n        <title>Sample Page</title>\n        </head>\n        <body>\n            Hello World!\n        </body>\n        </html>\n```\n执行 server.js 文件：\n```\n  node server.js\n  Server running at http://127.0.0.1:8081/\n```\n\n#### 使用 Node 创建 Web 客户端\nNode 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：\n``` javascript\n  var http = require('http');\n  //用于请求选项\n  var optionss = {\n    host:'localhost',\n    port:'8081'\n    path:'/index.htm'\n  };\n  //处理响应的回调函数\n  var callback = function(response){\n    //不断更新数据\n    var body = '';\n    response.on('data', function(data){\n      body += data;\n    });\n    response.on('end', function(){\n      //数据接收完成\n      console.log(body);\n    });\n  }\n  //向服务器端发送请求\n  var req = http.request(options, callback);\n  req.end();\n```\n新开一个终端，执行 client.js 文件，输出结果如下：\n```\n  node client.js\n```\n``` html\n  <html>\n    <head>\n      <title>Sample Page</title>\n    </head>\n    <body>\n      Hello World!\n    </body>\n  </html>\n```\n执行 server.js 的控制台输出信息如下：\n```\n  Server running at http://127.0.0.1:8081/\n  Request for /index.htm received.   # 客户端请求信息\n```\n","source":"_posts/Node.js Web模块.md","raw":"---\ntitle: Node.js Web 模块(14)\ndate: 2016-06-29 20:51:36\ntags: node\ncategories: nodeJS学习笔记\n---\n\n\n### 14、Node.js Web 模块\n使用 Node 创建 Web 服务器\nNode.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：\n``` javascript\n  var http = require('http');\n```\n以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：\n<!-- more -->\n``` javascript\n  var http = require('http');\n  var fs = require('fs');\n  var url = require('url');\n  //创建服务器\n  http.createServer(function(request,response){\n    //解析请求，包括文件名\n    var pathname = url.parse(request.url).pathname;\n    //输出请求文件名\n    console.log(\"Request for \" + pathname + \" received.\");\n    //从文件系统中读取请求的文件内容\n    fs.readFile(pathname.substr(1), function (err, data){\n      if (err) {\n        console.log(err);\n        //HTTP 状态码：404：NOT FOUND\n        //Content Type：text/plain\n        response.writeHead(404, {'Content-Type': 'text/html'});\n      } else{\n        //HTTP 状态码：200：OK\n        //Content Type：text/plain\n        response.writeHead(200, {'Content-Type': 'text/html'});\n        //响应文件内容\n        response.write(data.toString());\n      };\n      //发送响应数据\n      response.end();\n    });\n  }).listen(8081);\n```\n控制台会输出以下信息\n``` javascript\n  console.log('Server running at http://127.0.0.1:8081/');\n```\n接下来我们在该目录下创建一个 index.htm 文件，代码如下：\n``` html\n        <html>\n        <head>\n        <title>Sample Page</title>\n        </head>\n        <body>\n            Hello World!\n        </body>\n        </html>\n```\n执行 server.js 文件：\n```\n  node server.js\n  Server running at http://127.0.0.1:8081/\n```\n\n#### 使用 Node 创建 Web 客户端\nNode 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：\n``` javascript\n  var http = require('http');\n  //用于请求选项\n  var optionss = {\n    host:'localhost',\n    port:'8081'\n    path:'/index.htm'\n  };\n  //处理响应的回调函数\n  var callback = function(response){\n    //不断更新数据\n    var body = '';\n    response.on('data', function(data){\n      body += data;\n    });\n    response.on('end', function(){\n      //数据接收完成\n      console.log(body);\n    });\n  }\n  //向服务器端发送请求\n  var req = http.request(options, callback);\n  req.end();\n```\n新开一个终端，执行 client.js 文件，输出结果如下：\n```\n  node client.js\n```\n``` html\n  <html>\n    <head>\n      <title>Sample Page</title>\n    </head>\n    <body>\n      Hello World!\n    </body>\n  </html>\n```\n执行 server.js 的控制台输出信息如下：\n```\n  Server running at http://127.0.0.1:8081/\n  Request for /index.htm received.   # 客户端请求信息\n```\n","slug":"Node.js Web模块","published":1,"updated":"2017-07-30T07:21:47.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvty0018v0uigbo7vup9","content":"<h3 id=\"14、Node-js-Web-模块\"><a href=\"#14、Node-js-Web-模块\" class=\"headerlink\" title=\"14、Node.js Web 模块\"></a>14、Node.js Web 模块</h3><p>使用 Node 创建 Web 服务器<br>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div></pre></td></tr></table></figure></p>\n<p>以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"comment\">//创建服务器</span></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//解析请求，包括文件名</span></div><div class=\"line\">  <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">  <span class=\"comment\">//输出请求文件名</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">  <span class=\"comment\">//从文件系统中读取请求的文件内容</span></div><div class=\"line\">  fs.readFile(pathname.substr(<span class=\"number\">1</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">      <span class=\"comment\">//HTTP 状态码：404：NOT FOUND</span></div><div class=\"line\">      <span class=\"comment\">//Content Type：text/plain</span></div><div class=\"line\">      response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//HTTP 状态码：200：OK</span></div><div class=\"line\">      <span class=\"comment\">//Content Type：text/plain</span></div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">      <span class=\"comment\">//响应文件内容</span></div><div class=\"line\">      response.write(data.toString());</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//发送响应数据</span></div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8081</span>);</div></pre></td></tr></table></figure></p>\n<p>控制台会输出以下信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们在该目录下创建一个 index.htm 文件，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    Hello World!</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>执行 server.js 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http://127.0.0.1:8081/</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用-Node-创建-Web-客户端\"><a href=\"#使用-Node-创建-Web-客户端\" class=\"headerlink\" title=\"使用 Node 创建 Web 客户端\"></a>使用 Node 创建 Web 客户端</h4><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"comment\">//用于请求选项</span></div><div class=\"line\"><span class=\"keyword\">var</span> optionss = &#123;</div><div class=\"line\">  host:<span class=\"string\">'localhost'</span>,</div><div class=\"line\">  port:<span class=\"string\">'8081'</span></div><div class=\"line\">  path:<span class=\"string\">'/index.htm'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//处理响应的回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不断更新数据</span></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;</div><div class=\"line\">  response.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    body += data;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  response.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//数据接收完成</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(body);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//向服务器端发送请求</span></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, callback);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure></p>\n<p>新开一个终端，执行 client.js 文件，输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node client.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    Hello World!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>执行 server.js 的控制台输出信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server running at http://127.0.0.1:8081/</div><div class=\"line\">Request for /index.htm received.   # 客户端请求信息</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"14、Node-js-Web-模块\"><a href=\"#14、Node-js-Web-模块\" class=\"headerlink\" title=\"14、Node.js Web 模块\"></a>14、Node.js Web 模块</h3><p>使用 Node 创建 Web 服务器<br>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div></pre></td></tr></table></figure></p>\n<p>以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"comment\">//创建服务器</span></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//解析请求，包括文件名</span></div><div class=\"line\">  <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">  <span class=\"comment\">//输出请求文件名</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">  <span class=\"comment\">//从文件系统中读取请求的文件内容</span></div><div class=\"line\">  fs.readFile(pathname.substr(<span class=\"number\">1</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">      <span class=\"comment\">//HTTP 状态码：404：NOT FOUND</span></div><div class=\"line\">      <span class=\"comment\">//Content Type：text/plain</span></div><div class=\"line\">      response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//HTTP 状态码：200：OK</span></div><div class=\"line\">      <span class=\"comment\">//Content Type：text/plain</span></div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">      <span class=\"comment\">//响应文件内容</span></div><div class=\"line\">      response.write(data.toString());</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//发送响应数据</span></div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8081</span>);</div></pre></td></tr></table></figure></p>\n<p>控制台会输出以下信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure></p>\n<p>接下来我们在该目录下创建一个 index.htm 文件，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    Hello World!</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>执行 server.js 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http://127.0.0.1:8081/</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用-Node-创建-Web-客户端\"><a href=\"#使用-Node-创建-Web-客户端\" class=\"headerlink\" title=\"使用 Node 创建 Web 客户端\"></a>使用 Node 创建 Web 客户端</h4><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"comment\">//用于请求选项</span></div><div class=\"line\"><span class=\"keyword\">var</span> optionss = &#123;</div><div class=\"line\">  host:<span class=\"string\">'localhost'</span>,</div><div class=\"line\">  port:<span class=\"string\">'8081'</span></div><div class=\"line\">  path:<span class=\"string\">'/index.htm'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//处理响应的回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//不断更新数据</span></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;</div><div class=\"line\">  response.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    body += data;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  response.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//数据接收完成</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(body);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//向服务器端发送请求</span></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, callback);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure></p>\n<p>新开一个终端，执行 client.js 文件，输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node client.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Sample Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    Hello World!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>执行 server.js 的控制台输出信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server running at http://127.0.0.1:8081/</div><div class=\"line\">Request for /index.htm received.   # 客户端请求信息</div></pre></td></tr></table></figure></p>"},{"title":"NodeJs学习笔记(2)","date":"2016-06-27T04:55:00.000Z","_content":"\n### 2、Node.js 事件循环\n\nNode.js 有多个内置的事件，我们可以通过引入 `events` 模块，并通过实例化 `EventEmitter` 类来绑定和监听事件，如下实例：\n<!-- more -->\n``` javascript\n  //引入events模块\n  var events = require('events');\n  //创建eventEmitter对象\n  var eventEmitter = new events.EventEmitter();\n  //创建时间处理程序\n  var connectHander = function connected() {\n    console.log('连接成功。');\n    //触发data_received事件\n    eventEmitter.emit('data_received');\n  }\n  //绑定connection事件处理程序\n  eventEmitter.on('connection', connectHandler);\n  //使用匿名函数绑定data_received事件\n  eventEmitter.on('data_received', function(){\n    console.log('数据接收成功。');\n  });\n  //触发connection事件\n  eventEmitter.emit('connection');\n  console.log(\"程序执行完毕。\");\n```\n\n##### node应用程序如何工作\n\n创建一个input.txt文件，内容如下：\n``` \n  Hello World;\n```\n创建main.js文件，代码如下：\n``` javascript\n  var fs = require(\"fs\");\n  fs.readFile('input.txt', function (err, data) {\n    if (err) {\n      console.log(err.stack);\n    }\n    console.log(data.toString());\n  });\n  console.log(\"程序执行完毕\");\n```\n以上程序中 `fs.readFile()` 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。执行以上代码，执行结果如下：\n``` \n  Hello World;\n```\n接下来我们删除 input.txt 文件，执行结果如下所示：\n``` \n  程序执行完毕\n  Error: ENOENT, open 'input.txt'\n```","source":"_posts/Node.js 事件循环.md","raw":"---\ntitle: NodeJs学习笔记(2)\ndate: 2016-06-27 12:55:00\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 2、Node.js 事件循环\n\nNode.js 有多个内置的事件，我们可以通过引入 `events` 模块，并通过实例化 `EventEmitter` 类来绑定和监听事件，如下实例：\n<!-- more -->\n``` javascript\n  //引入events模块\n  var events = require('events');\n  //创建eventEmitter对象\n  var eventEmitter = new events.EventEmitter();\n  //创建时间处理程序\n  var connectHander = function connected() {\n    console.log('连接成功。');\n    //触发data_received事件\n    eventEmitter.emit('data_received');\n  }\n  //绑定connection事件处理程序\n  eventEmitter.on('connection', connectHandler);\n  //使用匿名函数绑定data_received事件\n  eventEmitter.on('data_received', function(){\n    console.log('数据接收成功。');\n  });\n  //触发connection事件\n  eventEmitter.emit('connection');\n  console.log(\"程序执行完毕。\");\n```\n\n##### node应用程序如何工作\n\n创建一个input.txt文件，内容如下：\n``` \n  Hello World;\n```\n创建main.js文件，代码如下：\n``` javascript\n  var fs = require(\"fs\");\n  fs.readFile('input.txt', function (err, data) {\n    if (err) {\n      console.log(err.stack);\n    }\n    console.log(data.toString());\n  });\n  console.log(\"程序执行完毕\");\n```\n以上程序中 `fs.readFile()` 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。执行以上代码，执行结果如下：\n``` \n  Hello World;\n```\n接下来我们删除 input.txt 文件，执行结果如下所示：\n``` \n  程序执行完毕\n  Error: ENOENT, open 'input.txt'\n```","slug":"Node.js 事件循环","published":1,"updated":"2017-07-30T07:21:47.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvu20019v0uiq9g4qy87","content":"<h3 id=\"2、Node-js-事件循环\"><a href=\"#2、Node-js-事件循环\" class=\"headerlink\" title=\"2、Node.js 事件循环\"></a>2、Node.js 事件循环</h3><p>Node.js 有多个内置的事件，我们可以通过引入 <code>events</code> 模块，并通过实例化 <code>EventEmitter</code> 类来绑定和监听事件，如下实例：<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//引入events模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">//创建eventEmitter对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">//创建时间处理程序</span></div><div class=\"line\"><span class=\"keyword\">var</span> connectHander = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connected</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功。'</span>);</div><div class=\"line\">  <span class=\"comment\">//触发data_received事件</span></div><div class=\"line\">  eventEmitter.emit(<span class=\"string\">'data_received'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//绑定connection事件处理程序</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'connection'</span>, connectHandler);</div><div class=\"line\"><span class=\"comment\">//使用匿名函数绑定data_received事件</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'data_received'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据接收成功。'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//触发connection事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"node应用程序如何工作\"><a href=\"#node应用程序如何工作\" class=\"headerlink\" title=\"node应用程序如何工作\"></a>node应用程序如何工作</h5><p>创建一个input.txt文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World;</div></pre></td></tr></table></figure></p>\n<p>创建main.js文件，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'input.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上程序中 <code>fs.readFile()</code> 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。执行以上代码，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World;</div></pre></td></tr></table></figure></p>\n<p>接下来我们删除 input.txt 文件，执行结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序执行完毕</div><div class=\"line\">Error: ENOENT, open &apos;input.txt&apos;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"2、Node-js-事件循环\"><a href=\"#2、Node-js-事件循环\" class=\"headerlink\" title=\"2、Node.js 事件循环\"></a>2、Node.js 事件循环</h3><p>Node.js 有多个内置的事件，我们可以通过引入 <code>events</code> 模块，并通过实例化 <code>EventEmitter</code> 类来绑定和监听事件，如下实例：<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//引入events模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">//创建eventEmitter对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">//创建时间处理程序</span></div><div class=\"line\"><span class=\"keyword\">var</span> connectHander = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connected</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功。'</span>);</div><div class=\"line\">  <span class=\"comment\">//触发data_received事件</span></div><div class=\"line\">  eventEmitter.emit(<span class=\"string\">'data_received'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//绑定connection事件处理程序</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'connection'</span>, connectHandler);</div><div class=\"line\"><span class=\"comment\">//使用匿名函数绑定data_received事件</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'data_received'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据接收成功。'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//触发connection事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'connection'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"node应用程序如何工作\"><a href=\"#node应用程序如何工作\" class=\"headerlink\" title=\"node应用程序如何工作\"></a>node应用程序如何工作</h5><p>创建一个input.txt文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World;</div></pre></td></tr></table></figure></p>\n<p>创建main.js文件，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'input.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上程序中 <code>fs.readFile()</code> 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。执行以上代码，执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World;</div></pre></td></tr></table></figure></p>\n<p>接下来我们删除 input.txt 文件，执行结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序执行完毕</div><div class=\"line\">Error: ENOENT, open &apos;input.txt&apos;</div></pre></td></tr></table></figure></p>"},{"title":"Node.js 全局对象(9)","date":"2016-06-28T12:42:07.000Z","_content":"\n### 9、Node.js 全局对象\n在浏览器 `JavaScript` 中，通常 `window` 是全局对象， 而 `Node.js` 中的全局对象是 `global`，所有全局变量（除了 `global `本身以外）都是 `global` 对象的属性。 在 `Node.js` 我们可以直接访问到 `global` 的属性，而不需要在应用中包含它。\n<!-- more -->\n#### 全局对象与全局变量\n`global` 全局对象最根本的作用是作为全局变量的宿主。按照 `ECMAScript` 的定义，满足以下条 件的变量是全局变量：\n  -在最外层定义的变量；\n  -全局对象的属性；\n  -隐式定义的变量（未定义直接赋值的变量）。\n当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。\n##### __filename\n`__filename`表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。\n实例：创建`main.js`：\n输出全局变量 `__filename` 的值\n``` javascript\n  console.log( __filename );\n```\n执行 main.js 文件:\n``` javascript\n  node main.js\n  /web/com/runoob/nodejs/main.js\n```\n##### __dirname\n`__dirname` 表示当前执行脚本所在的目录。\n实例：创建`main.js`：\n输出全局变量 `__dirname` 的值\n``` javascript\n  console.log( __dirname );\n```\n执行 main.js 文件:\n``` javascript\n  node main.js\n  /web/com/runoob/nodejs\n```\n##### setTimeout(cb, ms)\n`setTimeout(cb, ms)` 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：`setTimeout()`只执行一次指定函数。返回一个代表定时器的句柄值。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  setTimeout(printHello, 2000);\n```\n//执行 main.js 文件:\n``` javascript\n  node main.js\n  Hello, World!\n```\n##### clearTimeout(t)\nclearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  var t = setTimeout(printHello, 2000);\n  //清除定时器\n  clearTimeout(t)\n```\n执行 main.js 文件:\n```\n  node main.js\n```\n##### setInterval(cb, ms), clearInterval(t)\n`setInterval(cb, ms)` 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 `clearInterval(t)` 函数来清除定时器。`setInterval()` 方法会不停地调用函数，直到 `clearInterval()` 被调用或窗口被关闭。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  setInterval(printHello, 2000);\n```\n执行 main.js 文件:\n```\n  node main.js\n  Hello, World! Hello, World! Hello, World ……\n```\n以上程序每隔两秒就会输出一次\"Hello, World!\"，且会永久执行下去，直到你按下 `ctrl + c` 按钮.\n##### console\nconsole 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。\nconsole方法：\n-`console.log([data], [...])`//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。\n-`console.info([data], [...])`//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。\n-`console.error([data], [...])`//输出错误消息的。控制台在出现错误时会显示是红色的叉子。\n-`console.warn([data], [...])`//输出警告消息。控制台出现有黄色的惊叹号。\n-`console.dir(obj, [options])`//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。\n-`console.time(label)`//输出时间，表示计时开始。\n-`console.timeEnd(label)`//结束时间，表示计时结束。\n-`console.trace(message, [...])`//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。\n-`console.assert(value, [message], [...])`//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。\n##### process\n`process` 是一个全局变量，即 `global` 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。\n###### process 对象的一些最常用的成员方法:\n-`exit`//当进程准备退出时触发。\n-`beforeExit`//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。\n-`uncaughtException`//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。\n-`Signal` 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。\n-退出状态码：1,2,3,4,5,6,7,8,9,10,12,>128\n###### Process属性：\n-`stdout`//标准输出流。\n-`stderr`//标准错误流\n-`stdin`//标准输入流。\n-`argv`//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。\n-`execPath`//返回执行当前脚本的 Node 二进制文件的绝对路径。\n-`execArgv`//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。\n-`env`//返回一个对象，成员为当前 shell 的环境变量\n-`exitCode`//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。\n-`version`//Node 的版本，比如v0.10.18。\n-`versions`//一个属性，包含了 node 的版本和依赖.\n-`config`//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 \"config.gypi\" 文件相同。\n-`pid`//当前进程的进程号。\n-`title`//进程名，默认值为\"node\"，可以自定义该值。\n-`arch`//当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。\n-`platform`//运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'\n-`mainModule`//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。\n##### 方法参考手册:\n-`abort()`//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。\n-`chdir(directory)`//改变当前工作进程的目录，如果操作失败抛出异常。\n-`cwd()`//返回当前进程的工作目录\n-`exit([code])`//使用指定的 code 结束进程。如果忽略，将会使用 code 0。\n-`getgid()`//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setgid(id)`//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。\n//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`getuid()`//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setuid(id)`//设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。\n//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`getgroups()`//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setgroups(groups)`//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`initgroups(user, extra_group)`//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`kill(pid, [signal])`//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。\n-`memoryUsage()`//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。\n-`nextTick(callback)`//一旦当前事件循环结束，调用回到函数。\n-`umask([mask])`//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。\n-`uptime()`//返回 Node 已经运行的秒数。\n-`hrtime()`//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。","source":"_posts/Node.js 全局对象.md","raw":"---\ntitle: Node.js 全局对象(9)\ndate: 2016-06-28 20:42:07\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 9、Node.js 全局对象\n在浏览器 `JavaScript` 中，通常 `window` 是全局对象， 而 `Node.js` 中的全局对象是 `global`，所有全局变量（除了 `global `本身以外）都是 `global` 对象的属性。 在 `Node.js` 我们可以直接访问到 `global` 的属性，而不需要在应用中包含它。\n<!-- more -->\n#### 全局对象与全局变量\n`global` 全局对象最根本的作用是作为全局变量的宿主。按照 `ECMAScript` 的定义，满足以下条 件的变量是全局变量：\n  -在最外层定义的变量；\n  -全局对象的属性；\n  -隐式定义的变量（未定义直接赋值的变量）。\n当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。\n##### __filename\n`__filename`表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。\n实例：创建`main.js`：\n输出全局变量 `__filename` 的值\n``` javascript\n  console.log( __filename );\n```\n执行 main.js 文件:\n``` javascript\n  node main.js\n  /web/com/runoob/nodejs/main.js\n```\n##### __dirname\n`__dirname` 表示当前执行脚本所在的目录。\n实例：创建`main.js`：\n输出全局变量 `__dirname` 的值\n``` javascript\n  console.log( __dirname );\n```\n执行 main.js 文件:\n``` javascript\n  node main.js\n  /web/com/runoob/nodejs\n```\n##### setTimeout(cb, ms)\n`setTimeout(cb, ms)` 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：`setTimeout()`只执行一次指定函数。返回一个代表定时器的句柄值。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  setTimeout(printHello, 2000);\n```\n//执行 main.js 文件:\n``` javascript\n  node main.js\n  Hello, World!\n```\n##### clearTimeout(t)\nclearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  var t = setTimeout(printHello, 2000);\n  //清除定时器\n  clearTimeout(t)\n```\n执行 main.js 文件:\n```\n  node main.js\n```\n##### setInterval(cb, ms), clearInterval(t)\n`setInterval(cb, ms)` 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 `clearInterval(t)` 函数来清除定时器。`setInterval()` 方法会不停地调用函数，直到 `clearInterval()` 被调用或窗口被关闭。\n实例:创建文件 main.js:\n``` javascript\n  function printHello(){\n    console.log(\"Hello, World!\");\n  }\n  //两秒后执行以上函数\n  setInterval(printHello, 2000);\n```\n执行 main.js 文件:\n```\n  node main.js\n  Hello, World! Hello, World! Hello, World ……\n```\n以上程序每隔两秒就会输出一次\"Hello, World!\"，且会永久执行下去，直到你按下 `ctrl + c` 按钮.\n##### console\nconsole 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。\nconsole方法：\n-`console.log([data], [...])`//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。\n-`console.info([data], [...])`//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。\n-`console.error([data], [...])`//输出错误消息的。控制台在出现错误时会显示是红色的叉子。\n-`console.warn([data], [...])`//输出警告消息。控制台出现有黄色的惊叹号。\n-`console.dir(obj, [options])`//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。\n-`console.time(label)`//输出时间，表示计时开始。\n-`console.timeEnd(label)`//结束时间，表示计时结束。\n-`console.trace(message, [...])`//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。\n-`console.assert(value, [message], [...])`//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。\n##### process\n`process` 是一个全局变量，即 `global` 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。\n###### process 对象的一些最常用的成员方法:\n-`exit`//当进程准备退出时触发。\n-`beforeExit`//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。\n-`uncaughtException`//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。\n-`Signal` 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。\n-退出状态码：1,2,3,4,5,6,7,8,9,10,12,>128\n###### Process属性：\n-`stdout`//标准输出流。\n-`stderr`//标准错误流\n-`stdin`//标准输入流。\n-`argv`//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。\n-`execPath`//返回执行当前脚本的 Node 二进制文件的绝对路径。\n-`execArgv`//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。\n-`env`//返回一个对象，成员为当前 shell 的环境变量\n-`exitCode`//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。\n-`version`//Node 的版本，比如v0.10.18。\n-`versions`//一个属性，包含了 node 的版本和依赖.\n-`config`//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 \"config.gypi\" 文件相同。\n-`pid`//当前进程的进程号。\n-`title`//进程名，默认值为\"node\"，可以自定义该值。\n-`arch`//当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。\n-`platform`//运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'\n-`mainModule`//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。\n##### 方法参考手册:\n-`abort()`//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。\n-`chdir(directory)`//改变当前工作进程的目录，如果操作失败抛出异常。\n-`cwd()`//返回当前进程的工作目录\n-`exit([code])`//使用指定的 code 结束进程。如果忽略，将会使用 code 0。\n-`getgid()`//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setgid(id)`//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。\n//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`getuid()`//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setuid(id)`//设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。\n//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`getgroups()`//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`setgroups(groups)`//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`initgroups(user, extra_group)`//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。\n-`kill(pid, [signal])`//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。\n-`memoryUsage()`//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。\n-`nextTick(callback)`//一旦当前事件循环结束，调用回到函数。\n-`umask([mask])`//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。\n-`uptime()`//返回 Node 已经运行的秒数。\n-`hrtime()`//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。","slug":"Node.js 全局对象","published":1,"updated":"2017-07-30T07:21:47.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvub001cv0ui8et7zj75","content":"<h3 id=\"9、Node-js-全局对象\"><a href=\"#9、Node-js-全局对象\" class=\"headerlink\" title=\"9、Node.js 全局对象\"></a>9、Node.js 全局对象</h3><p>在浏览器 <code>JavaScript</code> 中，通常 <code>window</code> 是全局对象， 而 <code>Node.js</code> 中的全局对象是 <code>global</code>，所有全局变量（除了 <code>global</code>本身以外）都是 <code>global</code> 对象的属性。 在 <code>Node.js</code> 我们可以直接访问到 <code>global</code> 的属性，而不需要在应用中包含它。<br><a id=\"more\"></a></p>\n<h4 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h4><p><code>global</code> 全局对象最根本的作用是作为全局变量的宿主。按照 <code>ECMAScript</code> 的定义，满足以下条 件的变量是全局变量：<br>  -在最外层定义的变量；<br>  -全局对象的属性；<br>  -隐式定义的变量（未定义直接赋值的变量）。<br>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。</p>\n<h5 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"__filename\"></a>__filename</h5><p><code>__filename</code>表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__filename</code> 的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log( __filename );</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">/web/com/runoob/nodejs/main.js</div></pre></td></tr></table></figure></p>\n<h5 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"__dirname\"></a>__dirname</h5><p><code>__dirname</code> 表示当前执行脚本所在的目录。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__dirname</code> 的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log( __dirname );</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">/web/com/runoob/nodejs</div></pre></td></tr></table></figure></p>\n<h5 id=\"setTimeout-cb-ms\"><a href=\"#setTimeout-cb-ms\" class=\"headerlink\" title=\"setTimeout(cb, ms)\"></a>setTimeout(cb, ms)</h5><p><code>setTimeout(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：<code>setTimeout()</code>只执行一次指定函数。返回一个代表定时器的句柄值。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\">setTimeout(printHello, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<p>//执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">Hello, World!</div></pre></td></tr></table></figure></p>\n<h5 id=\"clearTimeout-t\"><a href=\"#clearTimeout-t\" class=\"headerlink\" title=\"clearTimeout(t)\"></a>clearTimeout(t)</h5><p>clearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = setTimeout(printHello, <span class=\"number\">2000</span>);</div><div class=\"line\"><span class=\"comment\">//清除定时器</span></div><div class=\"line\">clearTimeout(t)</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div></pre></td></tr></table></figure></p>\n<h5 id=\"setInterval-cb-ms-clearInterval-t\"><a href=\"#setInterval-cb-ms-clearInterval-t\" class=\"headerlink\" title=\"setInterval(cb, ms), clearInterval(t)\"></a>setInterval(cb, ms), clearInterval(t)</h5><p><code>setInterval(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 <code>clearInterval(t)</code> 函数来清除定时器。<code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\">setInterval(printHello, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">Hello, World! Hello, World! Hello, World ……</div></pre></td></tr></table></figure></p>\n<p>以上程序每隔两秒就会输出一次”Hello, World!”，且会永久执行下去，直到你按下 <code>ctrl + c</code> 按钮.</p>\n<h5 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h5><p>console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。<br>console方法：<br>-<code>console.log([data], [...])</code>//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。<br>-<code>console.info([data], [...])</code>//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。<br>-<code>console.error([data], [...])</code>//输出错误消息的。控制台在出现错误时会显示是红色的叉子。<br>-<code>console.warn([data], [...])</code>//输出警告消息。控制台出现有黄色的惊叹号。<br>-<code>console.dir(obj, [options])</code>//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。<br>-<code>console.time(label)</code>//输出时间，表示计时开始。<br>-<code>console.timeEnd(label)</code>//结束时间，表示计时结束。<br>-<code>console.trace(message, [...])</code>//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。<br>-<code>console.assert(value, [message], [...])</code>//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</p>\n<h5 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h5><p><code>process</code> 是一个全局变量，即 <code>global</code> 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。</p>\n<h6 id=\"process-对象的一些最常用的成员方法\"><a href=\"#process-对象的一些最常用的成员方法\" class=\"headerlink\" title=\"process 对象的一些最常用的成员方法:\"></a>process 对象的一些最常用的成员方法:</h6><p>-<code>exit</code>//当进程准备退出时触发。<br>-<code>beforeExit</code>//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 ‘beforeExit’ 的监听器可以异步调用，这样 node 就会继续执行。<br>-<code>uncaughtException</code>//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。<br>-<code>Signal</code> 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。<br>-退出状态码：1,2,3,4,5,6,7,8,9,10,12,&gt;128</p>\n<h6 id=\"Process属性：\"><a href=\"#Process属性：\" class=\"headerlink\" title=\"Process属性：\"></a>Process属性：</h6><p>-<code>stdout</code>//标准输出流。<br>-<code>stderr</code>//标准错误流<br>-<code>stdin</code>//标准输入流。<br>-<code>argv</code>//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。<br>-<code>execPath</code>//返回执行当前脚本的 Node 二进制文件的绝对路径。<br>-<code>execArgv</code>//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。<br>-<code>env</code>//返回一个对象，成员为当前 shell 的环境变量<br>-<code>exitCode</code>//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。<br>-<code>version</code>//Node 的版本，比如v0.10.18。<br>-<code>versions</code>//一个属性，包含了 node 的版本和依赖.<br>-<code>config</code>//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 “config.gypi” 文件相同。<br>-<code>pid</code>//当前进程的进程号。<br>-<code>title</code>//进程名，默认值为”node”，可以自定义该值。<br>-<code>arch</code>//当前 CPU 的架构：’arm’、’ia32’ 或者 ‘x64’。<br>-<code>platform</code>//运行程序所在的平台系统 ‘darwin’, ‘freebsd’, ‘linux’, ‘sunos’ 或 ‘win32’<br>-<code>mainModule</code>//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。</p>\n<h5 id=\"方法参考手册\"><a href=\"#方法参考手册\" class=\"headerlink\" title=\"方法参考手册:\"></a>方法参考手册:</h5><p>-<code>abort()</code>//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。<br>-<code>chdir(directory)</code>//改变当前工作进程的目录，如果操作失败抛出异常。<br>-<code>cwd()</code>//返回当前进程的工作目录<br>-<code>exit([code])</code>//使用指定的 code 结束进程。如果忽略，将会使用 code 0。<br>-<code>getgid()</code>//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgid(id)</code>//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getuid()</code>//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setuid(id)</code>//设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getgroups()</code>//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgroups(groups)</code>//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>initgroups(user, extra_group)</code>//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>kill(pid, [signal])</code>//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 ‘SIGINT’ 或 ‘SIGHUP’。如果忽略，信号会是 ‘SIGTERM’。<br>-<code>memoryUsage()</code>//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。<br>-<code>nextTick(callback)</code>//一旦当前事件循环结束，调用回到函数。<br>-<code>umask([mask])</code>//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。<br>-<code>uptime()</code>//返回 Node 已经运行的秒数。<br>-<code>hrtime()</code>//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"9、Node-js-全局对象\"><a href=\"#9、Node-js-全局对象\" class=\"headerlink\" title=\"9、Node.js 全局对象\"></a>9、Node.js 全局对象</h3><p>在浏览器 <code>JavaScript</code> 中，通常 <code>window</code> 是全局对象， 而 <code>Node.js</code> 中的全局对象是 <code>global</code>，所有全局变量（除了 <code>global</code>本身以外）都是 <code>global</code> 对象的属性。 在 <code>Node.js</code> 我们可以直接访问到 <code>global</code> 的属性，而不需要在应用中包含它。<br>","more":"</p>\n<h4 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h4><p><code>global</code> 全局对象最根本的作用是作为全局变量的宿主。按照 <code>ECMAScript</code> 的定义，满足以下条 件的变量是全局变量：<br>  -在最外层定义的变量；<br>  -全局对象的属性；<br>  -隐式定义的变量（未定义直接赋值的变量）。<br>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。</p>\n<h5 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"__filename\"></a>__filename</h5><p><code>__filename</code>表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__filename</code> 的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log( __filename );</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">/web/com/runoob/nodejs/main.js</div></pre></td></tr></table></figure></p>\n<h5 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"__dirname\"></a>__dirname</h5><p><code>__dirname</code> 表示当前执行脚本所在的目录。<br>实例：创建<code>main.js</code>：<br>输出全局变量 <code>__dirname</code> 的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log( __dirname );</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">/web/com/runoob/nodejs</div></pre></td></tr></table></figure></p>\n<h5 id=\"setTimeout-cb-ms\"><a href=\"#setTimeout-cb-ms\" class=\"headerlink\" title=\"setTimeout(cb, ms)\"></a>setTimeout(cb, ms)</h5><p><code>setTimeout(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：<code>setTimeout()</code>只执行一次指定函数。返回一个代表定时器的句柄值。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\">setTimeout(printHello, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<p>//执行 main.js 文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">Hello, World!</div></pre></td></tr></table></figure></p>\n<h5 id=\"clearTimeout-t\"><a href=\"#clearTimeout-t\" class=\"headerlink\" title=\"clearTimeout(t)\"></a>clearTimeout(t)</h5><p>clearTimeout(t) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = setTimeout(printHello, <span class=\"number\">2000</span>);</div><div class=\"line\"><span class=\"comment\">//清除定时器</span></div><div class=\"line\">clearTimeout(t)</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div></pre></td></tr></table></figure></p>\n<h5 id=\"setInterval-cb-ms-clearInterval-t\"><a href=\"#setInterval-cb-ms-clearInterval-t\" class=\"headerlink\" title=\"setInterval(cb, ms), clearInterval(t)\"></a>setInterval(cb, ms), clearInterval(t)</h5><p><code>setInterval(cb, ms)</code> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。返回一个代表定时器的句柄值。可以使用 <code>clearInterval(t)</code> 函数来清除定时器。<code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。<br>实例:创建文件 main.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//两秒后执行以上函数</span></div><div class=\"line\">setInterval(printHello, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<p>执行 main.js 文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js</div><div class=\"line\">Hello, World! Hello, World! Hello, World ……</div></pre></td></tr></table></figure></p>\n<p>以上程序每隔两秒就会输出一次”Hello, World!”，且会永久执行下去，直到你按下 <code>ctrl + c</code> 按钮.</p>\n<h5 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h5><p>console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的事实标准。Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。<br>console方法：<br>-<code>console.log([data], [...])</code>//向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。<br>-<code>console.info([data], [...])</code>//P该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。<br>-<code>console.error([data], [...])</code>//输出错误消息的。控制台在出现错误时会显示是红色的叉子。<br>-<code>console.warn([data], [...])</code>//输出警告消息。控制台出现有黄色的惊叹号。<br>-<code>console.dir(obj, [options])</code>//用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。<br>-<code>console.time(label)</code>//输出时间，表示计时开始。<br>-<code>console.timeEnd(label)</code>//结束时间，表示计时结束。<br>-<code>console.trace(message, [...])</code>//当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。<br>-<code>console.assert(value, [message], [...])</code>//用于判断某个表达式或变量是否为真，接手两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</p>\n<h5 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h5><p><code>process</code> 是一个全局变量，即 <code>global</code> 对象的属性。它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。</p>\n<h6 id=\"process-对象的一些最常用的成员方法\"><a href=\"#process-对象的一些最常用的成员方法\" class=\"headerlink\" title=\"process 对象的一些最常用的成员方法:\"></a>process 对象的一些最常用的成员方法:</h6><p>-<code>exit</code>//当进程准备退出时触发。<br>-<code>beforeExit</code>//当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 ‘beforeExit’ 的监听器可以异步调用，这样 node 就会继续执行。<br>-<code>uncaughtException</code>//当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。<br>-<code>Signal</code> 事件//当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。<br>-退出状态码：1,2,3,4,5,6,7,8,9,10,12,&gt;128</p>\n<h6 id=\"Process属性：\"><a href=\"#Process属性：\" class=\"headerlink\" title=\"Process属性：\"></a>Process属性：</h6><p>-<code>stdout</code>//标准输出流。<br>-<code>stderr</code>//标准错误流<br>-<code>stdin</code>//标准输入流。<br>-<code>argv</code>//argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。<br>-<code>execPath</code>//返回执行当前脚本的 Node 二进制文件的绝对路径。<br>-<code>execArgv</code>//返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。<br>-<code>env</code>//返回一个对象，成员为当前 shell 的环境变量<br>-<code>exitCode</code>//进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。<br>-<code>version</code>//Node 的版本，比如v0.10.18。<br>-<code>versions</code>//一个属性，包含了 node 的版本和依赖.<br>-<code>config</code>//一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 “config.gypi” 文件相同。<br>-<code>pid</code>//当前进程的进程号。<br>-<code>title</code>//进程名，默认值为”node”，可以自定义该值。<br>-<code>arch</code>//当前 CPU 的架构：’arm’、’ia32’ 或者 ‘x64’。<br>-<code>platform</code>//运行程序所在的平台系统 ‘darwin’, ‘freebsd’, ‘linux’, ‘sunos’ 或 ‘win32’<br>-<code>mainModule</code>//require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。</p>\n<h5 id=\"方法参考手册\"><a href=\"#方法参考手册\" class=\"headerlink\" title=\"方法参考手册:\"></a>方法参考手册:</h5><p>-<code>abort()</code>//这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。<br>-<code>chdir(directory)</code>//改变当前工作进程的目录，如果操作失败抛出异常。<br>-<code>cwd()</code>//返回当前进程的工作目录<br>-<code>exit([code])</code>//使用指定的 code 结束进程。如果忽略，将会使用 code 0。<br>-<code>getgid()</code>//获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgid(id)</code>//设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getuid()</code>//获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setuid(id)</code>//设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。<br>//注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>getgroups()</code>//返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>setgroups(groups)</code>//设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>initgroups(user, extra_group)</code>//读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。<br>-<code>kill(pid, [signal])</code>//发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 ‘SIGINT’ 或 ‘SIGHUP’。如果忽略，信号会是 ‘SIGTERM’。<br>-<code>memoryUsage()</code>//返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。<br>-<code>nextTick(callback)</code>//一旦当前事件循环结束，调用回到函数。<br>-<code>umask([mask])</code>//设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。<br>-<code>uptime()</code>//返回 Node 已经运行的秒数。<br>-<code>hrtime()</code>//返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。</p>"},{"title":"Node.js 多进程(17)","date":"2016-06-30T07:42:28.000Z","_content":"\n### 17、Node.js 多进程\n我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。\nNode 提供了 child_process 模块来创建子进程，方法有：\n<!-- more -->\n    `exec - child_process.exec`//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。\n    `spawn - child_process.spawn`//使用指定的命令行参数创建新线程。\n    `fork - child_process.fork`//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。\n#### exec()方法\nchild_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：\n``` javascript\n  child_process.exec(command[, options], callback)\n```\n参数说明如下：\n  `command`//字符串， 将要运行的命令，参数使用空格隔开\n  `options`//对象，可以是：\n    /*cwd ，字符串，子进程的当前工作目录\n      env，对象 环境变量键值对\n      encoding ，字符串，字符编码（默认： 'utf8'）\n      shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）\n      timeout，数字，超时时间（默认： 0）\n      maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200*1024）\n      killSignal ，字符串，结束信号（默认：'SIGTERM'）\n      uid，数字，设置用户进程的 ID\n      gid，数字，设置进程组的 ID*/\n  callback//回调函数，包含三个参数error, stdout 和 stderr。\n\nexec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js 文件代码：\n  console.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n```\n``` javascript\n//master.js 文件代码：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var workerProcess = child_process.exec('node support.js' + i, function (error, stdout, stderr){\n      if (error) {\n        console.log(error.stack);\n        console.log('Error code: ' + error.code);\n        console.log('Signal received: ' + error.signal);\n      } \n      console.log('stdout: ' + stdout);\n      console.log('stderr: ' + stderr);\n    });\n    workerProcess.on('exit', function (code){\n      console.log('子进程已退出，退出码 ' + code);\n    });\n  };\n```\n//执行以上代码，结果如下所示：\n```\n  node master.js \n  子进程已退出，退出码 0\n  stdout: 进程 1 执行。\n\n  stderr: \n  子进程已退出，退出码 0\n  stdout: 进程 0 执行。\n\n  stderr: \n  子进程已退出，退出码 0\n  stdout: 进程 2 执行。\n\n  stderr: \n```\n#### spawn() 方法\nchild_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：\n``` javascript\n  child_process.spawn(command[, args][, options])\n```\n参数说明如下：\n  `command` //将要运行的命令\n  `args` // Array 字符串参数数组\n  `options` //Object\n    /*cwd String 子进程的当前工作目录\n      env Object 环境变量键值对\n      stdio Array|String 子进程的 stdio 配置\n      detached Boolean 这个子进程将会变成进程组的领导\n      uid Number 设置用户进程的 ID\n      gid Number 设置进程组的 ID*/\nspawn() 方法返回流 (stdout & stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js 文件代码：\n  console.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n```\n``` javascript\n//master.js 文件代码：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var workerProcess = child_process.spawn('node', ['support.js', i]);\n    workerProcess.stdout.on('data', function (data){\n      console.log('stdout: ' + data);\n    });\n    workerProcess.stderr.on('data', function (data){\n      console.log('stderr: ' + data);\n    }); \n    workerProcess.on('close', function (data){\n      console.log('子进程已退出，退出码' + code);\n    });         \n  };\n```\n//执行以上代码，输出结果为：\n```\n  node master.js stdout: 进程 0 执行。\n\n  子进程已退出，退出码 0\n  stdout: 进程 1 执行。\n\n  子进程已退出，退出码 0\n  stdout: 进程 2 执行。\n\n  子进程已退出，退出码 0\n```\n#### fork 方法\nchild_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：\n``` javascript\n  child_process.fork(modulePath[, args][, options])\n```\n参数说明如下：\n  `modulePath`//String，将要在子进程中运行的模块\n  `args`// Array 字符串参数数组\n  `options`//Object\n    /*cwd String 子进程的当前工作目录\n      env Object 环境变量键值对\n      execPath String 创建子进程的可执行文件\n      execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）\n      silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）\n      uid Number 设置用户进程的 ID\n      gid Number 设置进程组的 ID*/\n返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js文件，代码如下：\n  console.log(\"进程\" + process.argv[2] + \"执行。\");\n```\n``` javascript\n//master.js文件，代码如下：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var worker_process = child_process.fork(\"support.js\", [i]);\n    worker_process.on('close', function (code){\n      console.log('子进程已退出，退出码' + code);\n    });\n  };\n```\n//执行以上代码，输出结果为：\n```\n  node master.js \n  进程 0 执行。\n  子进程已退出，退出码 0\n  进程 1 执行。\n  子进程已退出，退出码 0\n  进程 2 执行。\n  子进程已退出，退出码 0\n```\n","source":"_posts/Node.js 多进程.md","raw":"---\ntitle: Node.js 多进程(17)\ndate: 2016-06-30 15:42:28\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 17、Node.js 多进程\n我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。\nNode 提供了 child_process 模块来创建子进程，方法有：\n<!-- more -->\n    `exec - child_process.exec`//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。\n    `spawn - child_process.spawn`//使用指定的命令行参数创建新线程。\n    `fork - child_process.fork`//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。\n#### exec()方法\nchild_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：\n``` javascript\n  child_process.exec(command[, options], callback)\n```\n参数说明如下：\n  `command`//字符串， 将要运行的命令，参数使用空格隔开\n  `options`//对象，可以是：\n    /*cwd ，字符串，子进程的当前工作目录\n      env，对象 环境变量键值对\n      encoding ，字符串，字符编码（默认： 'utf8'）\n      shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）\n      timeout，数字，超时时间（默认： 0）\n      maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200*1024）\n      killSignal ，字符串，结束信号（默认：'SIGTERM'）\n      uid，数字，设置用户进程的 ID\n      gid，数字，设置进程组的 ID*/\n  callback//回调函数，包含三个参数error, stdout 和 stderr。\n\nexec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js 文件代码：\n  console.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n```\n``` javascript\n//master.js 文件代码：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var workerProcess = child_process.exec('node support.js' + i, function (error, stdout, stderr){\n      if (error) {\n        console.log(error.stack);\n        console.log('Error code: ' + error.code);\n        console.log('Signal received: ' + error.signal);\n      } \n      console.log('stdout: ' + stdout);\n      console.log('stderr: ' + stderr);\n    });\n    workerProcess.on('exit', function (code){\n      console.log('子进程已退出，退出码 ' + code);\n    });\n  };\n```\n//执行以上代码，结果如下所示：\n```\n  node master.js \n  子进程已退出，退出码 0\n  stdout: 进程 1 执行。\n\n  stderr: \n  子进程已退出，退出码 0\n  stdout: 进程 0 执行。\n\n  stderr: \n  子进程已退出，退出码 0\n  stdout: 进程 2 执行。\n\n  stderr: \n```\n#### spawn() 方法\nchild_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：\n``` javascript\n  child_process.spawn(command[, args][, options])\n```\n参数说明如下：\n  `command` //将要运行的命令\n  `args` // Array 字符串参数数组\n  `options` //Object\n    /*cwd String 子进程的当前工作目录\n      env Object 环境变量键值对\n      stdio Array|String 子进程的 stdio 配置\n      detached Boolean 这个子进程将会变成进程组的领导\n      uid Number 设置用户进程的 ID\n      gid Number 设置进程组的 ID*/\nspawn() 方法返回流 (stdout & stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js 文件代码：\n  console.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n```\n``` javascript\n//master.js 文件代码：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var workerProcess = child_process.spawn('node', ['support.js', i]);\n    workerProcess.stdout.on('data', function (data){\n      console.log('stdout: ' + data);\n    });\n    workerProcess.stderr.on('data', function (data){\n      console.log('stderr: ' + data);\n    }); \n    workerProcess.on('close', function (data){\n      console.log('子进程已退出，退出码' + code);\n    });         \n  };\n```\n//执行以上代码，输出结果为：\n```\n  node master.js stdout: 进程 0 执行。\n\n  子进程已退出，退出码 0\n  stdout: 进程 1 执行。\n\n  子进程已退出，退出码 0\n  stdout: 进程 2 执行。\n\n  子进程已退出，退出码 0\n```\n#### fork 方法\nchild_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：\n``` javascript\n  child_process.fork(modulePath[, args][, options])\n```\n参数说明如下：\n  `modulePath`//String，将要在子进程中运行的模块\n  `args`// Array 字符串参数数组\n  `options`//Object\n    /*cwd String 子进程的当前工作目录\n      env Object 环境变量键值对\n      execPath String 创建子进程的可执行文件\n      execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）\n      silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）\n      uid Number 设置用户进程的 ID\n      gid Number 设置进程组的 ID*/\n返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。\n##### 实例\n让我们创建两个 js 文件 support.js 和 master.js。\n``` javascript\n//support.js文件，代码如下：\n  console.log(\"进程\" + process.argv[2] + \"执行。\");\n```\n``` javascript\n//master.js文件，代码如下：\n  const fs = require('fs');\n  const child_process = require('child_process');\n  for (var i = 0; i < 3; i++) {\n    var worker_process = child_process.fork(\"support.js\", [i]);\n    worker_process.on('close', function (code){\n      console.log('子进程已退出，退出码' + code);\n    });\n  };\n```\n//执行以上代码，输出结果为：\n```\n  node master.js \n  进程 0 执行。\n  子进程已退出，退出码 0\n  进程 1 执行。\n  子进程已退出，退出码 0\n  进程 2 执行。\n  子进程已退出，退出码 0\n```\n","slug":"Node.js 多进程","published":1,"updated":"2017-07-30T07:21:47.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvuj001gv0ui8d22w8b7","content":"<h3 id=\"17、Node-js-多进程\"><a href=\"#17、Node-js-多进程\" class=\"headerlink\" title=\"17、Node.js 多进程\"></a>17、Node.js 多进程</h3><p>我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。<br>Node 提供了 child_process 模块来创建子进程，方法有：<br><a id=\"more\"></a><br>    <code>exec - child_process.exec</code>//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。<br>    <code>spawn - child_process.spawn</code>//使用指定的命令行参数创建新线程。<br>    <code>fork - child_process.fork</code>//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</p>\n<h4 id=\"exec-方法\"><a href=\"#exec-方法\" class=\"headerlink\" title=\"exec()方法\"></a>exec()方法</h4><p>child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.exec(command[, options], callback)</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>command</code>//字符串， 将要运行的命令，参数使用空格隔开<br>  <code>options</code>//对象，可以是：<br>    /<em>cwd ，字符串，子进程的当前工作目录<br>      env，对象 环境变量键值对<br>      encoding ，字符串，字符编码（默认： ‘utf8’）<br>      shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）<br>      timeout，数字，超时时间（默认： 0）<br>      maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200</em>1024）<br>      killSignal ，字符串，结束信号（默认：’SIGTERM’）<br>      uid，数字，设置用户进程的 ID<br>      gid，数字，设置进程组的 ID*/<br>  callback//回调函数，包含三个参数error, stdout 和 stderr。</p>\n<p>exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js 文件代码：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js 文件代码：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> workerProcess = child_process.exec(<span class=\"string\">'node support.js'</span> + i, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error.stack);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error code: '</span> + error.code);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Signal received: '</span> + error.signal);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + stdout);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + stderr);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    workerProcess.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码 '</span> + code);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">stderr:</div></pre></td></tr></table></figure></p>\n<h4 id=\"spawn-方法\"><a href=\"#spawn-方法\" class=\"headerlink\" title=\"spawn() 方法\"></a>spawn() 方法</h4><p>child_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.spawn(command[, args][, options])</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>command</code> //将要运行的命令<br>  <code>args</code> // Array 字符串参数数组<br>  <code>options</code> //Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      stdio Array|String 子进程的 stdio 配置<br>      detached Boolean 这个子进程将会变成进程组的领导<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>spawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js 文件代码：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js 文件代码：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> workerProcess = child_process.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'support.js'</span>, i]);</div><div class=\"line\">    workerProcess.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    workerProcess.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + data);</div><div class=\"line\">    &#125;); </div><div class=\"line\">    workerProcess.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码'</span> + code);</div><div class=\"line\">    &#125;);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>\n<h4 id=\"fork-方法\"><a href=\"#fork-方法\" class=\"headerlink\" title=\"fork 方法\"></a>fork 方法</h4><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.fork(modulePath[, args][, options])</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>modulePath</code>//String，将要在子进程中运行的模块<br>  <code>args</code>// Array 字符串参数数组<br>  <code>options</code>//Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      execPath String 创建子进程的可执行文件<br>      execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）<br>      silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js文件，代码如下：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程\"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\"执行。\"</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js文件，代码如下：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> worker_process = child_process.fork(<span class=\"string\">\"support.js\"</span>, [i]);</div><div class=\"line\">    worker_process.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码'</span> + code);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js </div><div class=\"line\">进程 0 执行。</div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">进程 1 执行。</div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">进程 2 执行。</div><div class=\"line\">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"17、Node-js-多进程\"><a href=\"#17、Node-js-多进程\" class=\"headerlink\" title=\"17、Node.js 多进程\"></a>17、Node.js 多进程</h3><p>我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。每个子进程总是带有三个流对象：child.stdin, child.stdout 和child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。<br>Node 提供了 child_process 模块来创建子进程，方法有：<br>","more":"<br>    <code>exec - child_process.exec</code>//使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。<br>    <code>spawn - child_process.spawn</code>//使用指定的命令行参数创建新线程。<br>    <code>fork - child_process.fork</code>//是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</p>\n<h4 id=\"exec-方法\"><a href=\"#exec-方法\" class=\"headerlink\" title=\"exec()方法\"></a>exec()方法</h4><p>child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。语法如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.exec(command[, options], callback)</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>command</code>//字符串， 将要运行的命令，参数使用空格隔开<br>  <code>options</code>//对象，可以是：<br>    /<em>cwd ，字符串，子进程的当前工作目录<br>      env，对象 环境变量键值对<br>      encoding ，字符串，字符编码（默认： ‘utf8’）<br>      shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）<br>      timeout，数字，超时时间（默认： 0）<br>      maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200</em>1024）<br>      killSignal ，字符串，结束信号（默认：’SIGTERM’）<br>      uid，数字，设置用户进程的 ID<br>      gid，数字，设置进程组的 ID*/<br>  callback//回调函数，包含三个参数error, stdout 和 stderr。</p>\n<p>exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js 文件代码：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js 文件代码：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> workerProcess = child_process.exec(<span class=\"string\">'node support.js'</span> + i, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(error.stack);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error code: '</span> + error.code);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Signal received: '</span> + error.signal);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + stdout);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + stderr);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    workerProcess.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码 '</span> + code);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">stderr:</div></pre></td></tr></table></figure></p>\n<h4 id=\"spawn-方法\"><a href=\"#spawn-方法\" class=\"headerlink\" title=\"spawn() 方法\"></a>spawn() 方法</h4><p>child_process.spawn 使用指定的命令行参数创建新线程，语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.spawn(command[, args][, options])</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>command</code> //将要运行的命令<br>  <code>args</code> // Array 字符串参数数组<br>  <code>options</code> //Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      stdio Array|String 子进程的 stdio 配置<br>      detached Boolean 这个子进程将会变成进程组的领导<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>spawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js 文件代码：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js 文件代码：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> workerProcess = child_process.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'support.js'</span>, i]);</div><div class=\"line\">    workerProcess.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    workerProcess.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + data);</div><div class=\"line\">    &#125;); </div><div class=\"line\">    workerProcess.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码'</span> + code);</div><div class=\"line\">    &#125;);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>\n<h4 id=\"fork-方法\"><a href=\"#fork-方法\" class=\"headerlink\" title=\"fork 方法\"></a>fork 方法</h4><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">child_process.fork(modulePath[, args][, options])</div></pre></td></tr></table></figure></p>\n<p>参数说明如下：<br>  <code>modulePath</code>//String，将要在子进程中运行的模块<br>  <code>args</code>// Array 字符串参数数组<br>  <code>options</code>//Object<br>    /<em>cwd String 子进程的当前工作目录<br>      env Object 环境变量键值对<br>      execPath String 创建子进程的可执行文件<br>      execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）<br>      silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）<br>      uid Number 设置用户进程的 ID<br>      gid Number 设置进程组的 ID</em>/<br>返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>让我们创建两个 js 文件 support.js 和 master.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//support.js文件，代码如下：</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程\"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\"执行。\"</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//master.js文件，代码如下：</span></div><div class=\"line\">  <span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> worker_process = child_process.fork(<span class=\"string\">\"support.js\"</span>, [i]);</div><div class=\"line\">    worker_process.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码'</span> + code);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>//执行以上代码，输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">node master.js </div><div class=\"line\">进程 0 执行。</div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">进程 1 执行。</div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">进程 2 执行。</div><div class=\"line\">子进程已退出，退出码 0</div></pre></td></tr></table></figure></p>"},{"title":"Node.js 工具模块(13)","date":"2016-06-29T10:38:26.000Z","_content":"\n### 13、Node.js 工具模块\n#### Node.js OS 模块\nNode.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：\n``` javascript \n  var os = require(\"os\");\n```\n##### 方法：\n1  `os.tmpdir()`//返回操作系统的默认临时文件夹。\n<!-- more -->\n2  `os.endianness()`//返回 CPU 的字节序，可能的是 \"BE\" 或 \"LE\"。\n3  `os.hostname()`//返回操作系统的主机名。\n4  `os.type()`//返回操作系统名\n5  `os.platform()`//返回操作系统名\n6  `os.arch()`//返回操作系统 CPU 架构，可能的值有 \"x64\"、\"arm\" 和 \"ia32\"。\n7  `os.release()`//返回操作系统的发行版本。\n8  `os.uptime()`//返回操作系统运行的时间，以秒为单位。\n9  `os.loadavg()`//返回一个包含 1、5、15 分钟平均负载的数组。\n10  `os.totalmem()`//返回系统内存总量，单位为字节。\n11  `os.freemem()`//返回操作系统空闲内存量，单位是字节。\n12  `os.cpus()`//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。\n13  `os.networkInterfaces()`//获得网络接口列表。\n##### 属性：\n`os.EOL`//定义了操作系统的行尾符的常量。\n实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var os = require(\"os\");\n  console.log('endianness : ' + os.endianness());// CPU 的字节序\n  console.log('type : ' + os.type());// 操作系统名\n  console.log('platform : ' + os.platform());// 操作系统名\n  console.log('total memory : ' + os.totalmem() + \" bytes.\");// 系统内存总量\n  console.log('free memory : ' + os.freemem() + \" bytes.\");// 操作系统空闲内存量\n```\n代码执行结果如下：\n```\n  node main.js \n  endianness : LE\n  type : Linux\n  platform : linux\n  total memory : 25103400960 bytes.\n  free memory : 20676710400 bytes.\n```\n\n#### Node.js Path 模块\nNode.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：\n``` javascript\n  var path = require(\"path\");\n```\n##### 方法\n1  `path.normalize(p)`//规范化路径，注意'..' 和 '.'。\n2  `path.join([path1][, path2][, ...])`//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是\"/\"，Windows系统是\"\\\"。\n3  `path.resolve([from ...], to)`//将 to 参数解析为绝对路径。\n4  `path.isAbsolute(path)`//判断参数 path 是否是绝对路径。\n5  `path.relative(from, to)`//用于将相对路径转为绝对路径。\n6  `path.dirname(p)`//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。\n7  `path.basename(p[, ext])`//返回路径中的最后一部分。同 Unix 命令 bashname 类似。\n8  `path.extname(p)`//返回路径中文件的后缀名，即路径中最后一个'.'之后的部分。如果一个路径中并不包含'.'或该路径只包含一个'.' 且这个'.'为路径的第一个字符，则此命令返回空字符串。\n9  `path.parse(pathString)`//返回路径字符串的对象。\n10  `path.format(pathObject)`//从对象中返回路径字符串，和 path.parse 相反。\n##### 属性\n1  `path.sep`//平台的文件路径分隔符，'\\\\' 或 '/'。\n2  `path.delimiter`//平台的分隔符, ; or ':'.\n3  `path.posix`//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。\n4  `path.win32`//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。\n##### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var path = require(\"path\");\n  // 格式化路径\n  console.log('normalization : ' + path.normalize('/test/test1//2slashes/1slash/tab/..'));\n  // 连接路径\n  console.log('joint path : ' + path.join('/test', 'test1', '2slashes/1slash', 'tab', '..'));\n  // 转换为绝对路径\n  console.log('resolve : ' + path.resolve('main.js'));\n  // 路径中文件的后缀名\n  console.log('ext name : ' + path.extname('main.js'));\n```\n代码执行结果如下：\n``` javascript\n  node main.js \n  normalization : /test/test1/2slashes/1slash\n  joint path : /test/test1/2slashes/1slash\n  resolve : /web/com/1427176256_27423/main.js\n  ext name : .js\n```\n\n#### Node.js Net 模块\nNode.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：\n``` javascript\n  var net = require(\"net\")\n```\n##### 方法：\n1  `net.createServer([options][, connectionListener])`//创建一个 TCP 服务器。参数 connectionListener 自动给 'connection' 事件创建监听器。\n2  `net.connect(options[, connectionListener])`//返回一个新的 'net.Socket'，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 'connect' 事件。\n3  `net.createConnection(options[, connectionListener])`//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 'localhost'。\n4  `net.connect(port[, host][, connectListener])`//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 'localhost'。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n5  `net.createConnection(port[, host][, connectListener])`//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 'localhost'。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n6  `net.connect(path[, connectListener])`//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 'connect' 事件上。返回 'net.Socket'。\n7  `net.createConnection(path[, connectListener])`//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n8  `net.isIP(input)`//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。\n9  `net.isIPv4(input)`//如果输入的地址为 IPV4， 返回 true，否则返回 false。\n10  `net.isIPv6(input)`//如果输入的地址为 IPV6， 返回 true，否则返回 false。\n\n#### net.Server\nnet.Server通常用于创建一个 TCP 或本地服务器。\n##### net.Server方法：\n1  `server.listen(port[, host][, backlog][, callback])`//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。\n2  `server.listen(path[, callback])`//通过指定 path 的连接，启动一个本地 socket 服务器。\n3  `server.listen(handle[, callback])`//通过指定句柄连接。\n4  `server.listen(options[, callback])`//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。\n5  `server.close([callback])`//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 'close' 事件。\n6  `server.address()`//操作系统返回绑定的地址，协议族名和服务器端口。\n7  `server.unref()`//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。\n8  `server.ref()`//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。\n9  `server.getConnections(callback)`//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。\n##### net.Server事件：\n1  `listening`//当服务器调用 server.listen 绑定后会触发。\n2  `connection`//当新连接创建后会被触发。socket 是 net.Socket实例。\n3  `close`//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。\n4  `error`//发生错误时触发。'close' 事件将被下列事件直接调用。\n\n#### net.Socket\nnet.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。\n##### net.Socket事件：\n1  `lookup`//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。\n2  `connect`//成功建立 socket 连接时触发。\n3  `data`//当接收到数据时触发。\n4  `end`//当 socket 另一端发送 FIN 包时，触发该事件。\n5  `timeout`//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。\n6  `drain`//当写缓存为空得时候触发。可用来控制上传。\n7  `error`//错误发生时触发。\n8  `close`//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。\n##### net.Socket属性：\n1  `socket.bufferSize`//该属性显示了要写入缓冲区的字节数。\n2  `socket.remoteAddress`//远程的 IP 地址字符串，例如：'74.125.127.100' or '2001:4860:a005::68'。\n3  `socket.remoteFamily`//远程IP协议族字符串，比如 'IPv4' or 'IPv6'。\n4  `socket.remotePort`//远程端口，数字表示，例如：80 or 21。\n5  `socket.localAddress`//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听'0.0.0.0'而客户端连接在'192.168.1.1'，这个值就会是 '192.168.1.1'。\n6  `socket.localPort`//本地端口地址，数字表示。例如：80 or 21。\n7  `socket.bytesRead`//接收到得字节数。\n8  `socket.bytesWritten`//发送的字节数。\n##### net.Socket方法：\n1  `new net.Socket([options])`//构造一个新的 socket 对象。\n2  `socket.connect(port[, host][, connectListener])`//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。\n3  `socket.connect(path[, connectListener])`//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。\n4  `socket.setEncoding([encoding])`//设置编码\n5  `socket.write(data[, encoding][, callback])`//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。\n6  `socket.end([data][, encoding])`//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。\n7  `socket.destroy()`//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。\n8  `socket.pause()`//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。\n9  `socket.resume()`//调用 pause() 后想恢复读取数据。\n10  `socket.setTimeout(timeout[, callback])`//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。\n11  `socket.setNoDelay([noDelay])`//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。\n12  `socket.setKeepAlive([enable][, initialDelay])`//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.\n13  `socket.address()`//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: 'IPv4', address: '127.0.0.1' }。\n14  `socket.unref()`//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。\n15  `socket.ref()`//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。\n###### 实例\n创建 server.js 文件，代码如下所示：\n``` javascript\n  var net = require('net');\n  var server = net.createServer(function(connection){\n    console.log('client connected');\n    connection.on('end', function(){\n      console.log('客户端关闭连接');\n    });\n    connection.write('Hello World!\\r\\n');\n    connection.pipe(connection);\n  });\n  server.listen(8080,function(){\n    console.log('server is listening');\n  });\n```\n执行以上服务端代码：\n```\n  node server.js\n  server is listening # 服务已创建并监听8080端口\n```\n新开一个窗口，创建client.js文件，代码如下：\n``` javascript\n  var net = require('net');\n  var client = net.connect({port: 8080},function(){\n    console.log('连接服务器！');\n  });\n  client.on('data', function(data){\n    console.log(data.toString());\n    client.end();\n  });\n  client.on('end',function(){\n    console.log('断开与服务器的连接');\n  });\n```\n执行以上客户端的代码：\n```\n  连接服务器！\n  Hello World!\n  断开与服务器的连接\n```\n\n#### Node.js DNS 模块\nNode.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：\n``` javascript\n  var dns = require(\"dns\")\n```\n##### 方法：\n1  `dns.lookup(hostname[, options], callback)`//将域名（比如 'runoob.com'）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。\n2  `dns.lookupService(address, port, callback)`//使用 getnameinfo 解析传入的地址和端口为域名和服务。\n3  `dns.resolve(hostname[, rrtype], callback)`//将一个域名（如 'runoob.com'）解析为一个 rrtype 指定记录类型的数组。\n4  `dns.resolve4(hostname, callback)`//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，['74.125.79.104', '74.125.79.105', '74.125.79.106']）。\n5  `dns.resolve6(hostname, callback)`//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）\n6  `dns.resolveMx(hostname, callback)`//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。\n7  `dns.resolveTxt(hostname, callback)`//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。\n8  `dns.resolveSrv(hostname, callback)`//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]）。\n9  `dns.resolveSoa(hostname, callback)`//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。\n10  `dns.resolveNs(hostname, callback)`//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, ['ns1.example.com', 'ns2.example.com']）。\n11  `dns.resolveCname(hostname, callback)`//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, ['bar.example.com']）。\n12  `dns.reverse(ip, callback)`//反向解析 IP 地址，指向该 IP 地址的域名数组。\n13  `dns.getServers()`//返回一个用于当前解析的 IP 地址数组的字符串。\n14  `dns.setServers(servers)`//指定一组 IP 地址作为解析服务器。\n##### rrtypes\ndns.resolve()方法中有效的rrtypes值：\n```          \n  'A' IPV4 地址, 默认\n  'AAAA' IPV6 地址\n  'MX' 邮件交换记录\n  'TXT' text 记录\n  'SRV' SRV 记录\n  'PTR' 用来反向 IP 查找\n  'NS' 域名服务器记录\n  'CNAME' 别名记录\n  'SOA' 授权记录的初始值\n```\n##### 错误码\n每次 DNS 查询都可能返回以下错误码:\n```       \n  dns.NODATA: 无数据响应。\n  dns.FORMERR: 查询格式错误。\n  dns.SERVFAIL: 常规失败。\n  dns.NOTFOUND: 没有找到域名。\n  dns.NOTIMP: 未实现请求的操作。\n  dns.REFUSED: 拒绝查询。\n  dns.BADQUERY: 查询格式错误。\n  dns.BADNAME: 域名格式错误。\n  dns.BADFAMILY: 地址协议不支持。\n  dns.BADRESP: 回复格式错误。\n  dns.CONNREFUSED: 无法连接到 DNS 服务器。\n  dns.TIMEOUT: 连接 DNS 服务器超时。\n  dns.EOF: 文件末端。\n  dns.FILE: 读文件错误。\n  dns.NOMEM: 内存溢出。\n  dns.DESTRUCTION: 通道被摧毁。\n  dns.BADSTR: 字符串格式错误。\n  dns.BADFLAGS: 非法标识符。\n  dns.NONAME: 所给主机不是数字。\n  dns.BADHINTS: 非法HINTS标识符。\n  dns.NOTINITIALIZED: c c-ares 库尚未初始化。\n  dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。\n  dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。\n  dns.CANCELLED: 取消 DNS 查询。\n```\n###### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var dns = require('dns');\n  dns.lookup('www.github.com',function onLookup(err, address, family){\n    console.log('ip 地址：', address);\n    dns.reverse(address, function(err, hostname){\n      if (err) {\n        console.log(err.stack);\n      }\n      console.log('反向解析' + address + ':' + JSON.stringify(hostname));\n    });\n  });\n```\n执行以上代码，结果如下所示：\n```\n  address: 192.30.252.130\n  reverse for 192.30.252.130: [\"github.com\"]\n```\n\n#### Node.js Domain 模块\nNode.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：\n``` javascript\n  var domain = require(\"domain\")\n```\ndomain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on('uncaughtException')不同。\nDomain 模块可分为隐式绑定和显式绑定：\n1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象\n2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象\n##### 方法：\n1  `domain.run(function)`//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。\n2  `domain.add(emitter)`//显式的增加事件\n3  `domain.remove(emitter)`//删除事件。\n4  `domain.bind(callback)`//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。\n5  `domain.intercept(callback)`//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。\n6  `domain.enter()`//进入一个异步调用的上下文，绑定到domain。\n7  `domain.exit()`//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。\n8  `domain.dispose()`//释放一个domain对象，让node进程回收这部分资源。\n9  `domain.create()`//返回一个domain对象。\n##### 事件：\n1  `domain.menbers`//已加入domain对象的域定时器和事件发射器的数组。\n###### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var EventEmitter = require(\"events\").EventEmitter;\n  var domain = require(\"domain\");\n  var emitter1 = new EventEmitter();\n  // 创建域\n  var domain1 = domain.create();\n  domain1.on('error', function(err){\n     console.log(\"domain1 处理这个错误 (\"+err.message+\")\");\n  });\n  // 显式绑定\n  domain1.add(emitter1);\n  emitter1.on('error',function(err){\n     console.log(\"监听器处理此错误 (\"+err.message+\")\");\n  });\n  emitter1.emit('error',new Error('通过监听器来处理'));\n  emitter1.removeAllListeners('error');\n  emitter1.emit('error',new Error('通过 domain1 处理'));\n  var domain2 = domain.create();\n  domain2.on('error', function(err){\n     console.log(\"domain2 处理这个错误 (\"+err.message+\")\");\n  });\n  // 隐式绑定\n  domain2.run(function(){\n     var emitter2 = new EventEmitter();\n     emitter2.emit('error',new Error('通过 domain2 处理'));   \n  });\n  domain1.remove(emitter1);\n  emitter1.emit('error', new Error('转换为异常，系统将崩溃!'));\n```\n执行以上代码，结果如下所示:\n```\n  监听器处理此错误 (通过监听器来处理)\n  domain1 处理这个错误 (通过 domain1 处理)\n  domain2 处理这个错误 (通过 domain2 处理)\n  events.js:72\n          throw er; // Unhandled 'error' event\n                ^\n  Error: 转换为异常，系统将崩溃!\n      at Object.<anonymous> (/www/node/main.js:40:24)\n      at Module._compile (module.js:456:26)\n      at Object.Module._extensions..js (module.js:474:10)\n      at Module.load (module.js:356:32)\n      at Function.Module._load (module.js:312:12)\n      at Function.Module.runMain (module.js:497:10)\n      at startup (node.js:119:16)\n      at node.js:929:3\n```","source":"_posts/Node.js 工具模块.md","raw":"---\ntitle: Node.js 工具模块(13)\ndate: 2016-06-29 18:38:26\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 13、Node.js 工具模块\n#### Node.js OS 模块\nNode.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：\n``` javascript \n  var os = require(\"os\");\n```\n##### 方法：\n1  `os.tmpdir()`//返回操作系统的默认临时文件夹。\n<!-- more -->\n2  `os.endianness()`//返回 CPU 的字节序，可能的是 \"BE\" 或 \"LE\"。\n3  `os.hostname()`//返回操作系统的主机名。\n4  `os.type()`//返回操作系统名\n5  `os.platform()`//返回操作系统名\n6  `os.arch()`//返回操作系统 CPU 架构，可能的值有 \"x64\"、\"arm\" 和 \"ia32\"。\n7  `os.release()`//返回操作系统的发行版本。\n8  `os.uptime()`//返回操作系统运行的时间，以秒为单位。\n9  `os.loadavg()`//返回一个包含 1、5、15 分钟平均负载的数组。\n10  `os.totalmem()`//返回系统内存总量，单位为字节。\n11  `os.freemem()`//返回操作系统空闲内存量，单位是字节。\n12  `os.cpus()`//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。\n13  `os.networkInterfaces()`//获得网络接口列表。\n##### 属性：\n`os.EOL`//定义了操作系统的行尾符的常量。\n实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var os = require(\"os\");\n  console.log('endianness : ' + os.endianness());// CPU 的字节序\n  console.log('type : ' + os.type());// 操作系统名\n  console.log('platform : ' + os.platform());// 操作系统名\n  console.log('total memory : ' + os.totalmem() + \" bytes.\");// 系统内存总量\n  console.log('free memory : ' + os.freemem() + \" bytes.\");// 操作系统空闲内存量\n```\n代码执行结果如下：\n```\n  node main.js \n  endianness : LE\n  type : Linux\n  platform : linux\n  total memory : 25103400960 bytes.\n  free memory : 20676710400 bytes.\n```\n\n#### Node.js Path 模块\nNode.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：\n``` javascript\n  var path = require(\"path\");\n```\n##### 方法\n1  `path.normalize(p)`//规范化路径，注意'..' 和 '.'。\n2  `path.join([path1][, path2][, ...])`//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是\"/\"，Windows系统是\"\\\"。\n3  `path.resolve([from ...], to)`//将 to 参数解析为绝对路径。\n4  `path.isAbsolute(path)`//判断参数 path 是否是绝对路径。\n5  `path.relative(from, to)`//用于将相对路径转为绝对路径。\n6  `path.dirname(p)`//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。\n7  `path.basename(p[, ext])`//返回路径中的最后一部分。同 Unix 命令 bashname 类似。\n8  `path.extname(p)`//返回路径中文件的后缀名，即路径中最后一个'.'之后的部分。如果一个路径中并不包含'.'或该路径只包含一个'.' 且这个'.'为路径的第一个字符，则此命令返回空字符串。\n9  `path.parse(pathString)`//返回路径字符串的对象。\n10  `path.format(pathObject)`//从对象中返回路径字符串，和 path.parse 相反。\n##### 属性\n1  `path.sep`//平台的文件路径分隔符，'\\\\' 或 '/'。\n2  `path.delimiter`//平台的分隔符, ; or ':'.\n3  `path.posix`//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。\n4  `path.win32`//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。\n##### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var path = require(\"path\");\n  // 格式化路径\n  console.log('normalization : ' + path.normalize('/test/test1//2slashes/1slash/tab/..'));\n  // 连接路径\n  console.log('joint path : ' + path.join('/test', 'test1', '2slashes/1slash', 'tab', '..'));\n  // 转换为绝对路径\n  console.log('resolve : ' + path.resolve('main.js'));\n  // 路径中文件的后缀名\n  console.log('ext name : ' + path.extname('main.js'));\n```\n代码执行结果如下：\n``` javascript\n  node main.js \n  normalization : /test/test1/2slashes/1slash\n  joint path : /test/test1/2slashes/1slash\n  resolve : /web/com/1427176256_27423/main.js\n  ext name : .js\n```\n\n#### Node.js Net 模块\nNode.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：\n``` javascript\n  var net = require(\"net\")\n```\n##### 方法：\n1  `net.createServer([options][, connectionListener])`//创建一个 TCP 服务器。参数 connectionListener 自动给 'connection' 事件创建监听器。\n2  `net.connect(options[, connectionListener])`//返回一个新的 'net.Socket'，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 'connect' 事件。\n3  `net.createConnection(options[, connectionListener])`//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 'localhost'。\n4  `net.connect(port[, host][, connectListener])`//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 'localhost'。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n5  `net.createConnection(port[, host][, connectListener])`//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 'localhost'。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n6  `net.connect(path[, connectListener])`//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 'connect' 事件上。返回 'net.Socket'。\n7  `net.createConnection(path[, connectListener])`//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 'connect' 事件。返回 'net.Socket'。\n8  `net.isIP(input)`//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。\n9  `net.isIPv4(input)`//如果输入的地址为 IPV4， 返回 true，否则返回 false。\n10  `net.isIPv6(input)`//如果输入的地址为 IPV6， 返回 true，否则返回 false。\n\n#### net.Server\nnet.Server通常用于创建一个 TCP 或本地服务器。\n##### net.Server方法：\n1  `server.listen(port[, host][, backlog][, callback])`//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。\n2  `server.listen(path[, callback])`//通过指定 path 的连接，启动一个本地 socket 服务器。\n3  `server.listen(handle[, callback])`//通过指定句柄连接。\n4  `server.listen(options[, callback])`//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。\n5  `server.close([callback])`//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 'close' 事件。\n6  `server.address()`//操作系统返回绑定的地址，协议族名和服务器端口。\n7  `server.unref()`//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。\n8  `server.ref()`//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。\n9  `server.getConnections(callback)`//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。\n##### net.Server事件：\n1  `listening`//当服务器调用 server.listen 绑定后会触发。\n2  `connection`//当新连接创建后会被触发。socket 是 net.Socket实例。\n3  `close`//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。\n4  `error`//发生错误时触发。'close' 事件将被下列事件直接调用。\n\n#### net.Socket\nnet.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。\n##### net.Socket事件：\n1  `lookup`//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。\n2  `connect`//成功建立 socket 连接时触发。\n3  `data`//当接收到数据时触发。\n4  `end`//当 socket 另一端发送 FIN 包时，触发该事件。\n5  `timeout`//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。\n6  `drain`//当写缓存为空得时候触发。可用来控制上传。\n7  `error`//错误发生时触发。\n8  `close`//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。\n##### net.Socket属性：\n1  `socket.bufferSize`//该属性显示了要写入缓冲区的字节数。\n2  `socket.remoteAddress`//远程的 IP 地址字符串，例如：'74.125.127.100' or '2001:4860:a005::68'。\n3  `socket.remoteFamily`//远程IP协议族字符串，比如 'IPv4' or 'IPv6'。\n4  `socket.remotePort`//远程端口，数字表示，例如：80 or 21。\n5  `socket.localAddress`//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听'0.0.0.0'而客户端连接在'192.168.1.1'，这个值就会是 '192.168.1.1'。\n6  `socket.localPort`//本地端口地址，数字表示。例如：80 or 21。\n7  `socket.bytesRead`//接收到得字节数。\n8  `socket.bytesWritten`//发送的字节数。\n##### net.Socket方法：\n1  `new net.Socket([options])`//构造一个新的 socket 对象。\n2  `socket.connect(port[, host][, connectListener])`//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。\n3  `socket.connect(path[, connectListener])`//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。\n4  `socket.setEncoding([encoding])`//设置编码\n5  `socket.write(data[, encoding][, callback])`//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。\n6  `socket.end([data][, encoding])`//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。\n7  `socket.destroy()`//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。\n8  `socket.pause()`//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。\n9  `socket.resume()`//调用 pause() 后想恢复读取数据。\n10  `socket.setTimeout(timeout[, callback])`//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。\n11  `socket.setNoDelay([noDelay])`//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。\n12  `socket.setKeepAlive([enable][, initialDelay])`//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.\n13  `socket.address()`//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: 'IPv4', address: '127.0.0.1' }。\n14  `socket.unref()`//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。\n15  `socket.ref()`//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。\n###### 实例\n创建 server.js 文件，代码如下所示：\n``` javascript\n  var net = require('net');\n  var server = net.createServer(function(connection){\n    console.log('client connected');\n    connection.on('end', function(){\n      console.log('客户端关闭连接');\n    });\n    connection.write('Hello World!\\r\\n');\n    connection.pipe(connection);\n  });\n  server.listen(8080,function(){\n    console.log('server is listening');\n  });\n```\n执行以上服务端代码：\n```\n  node server.js\n  server is listening # 服务已创建并监听8080端口\n```\n新开一个窗口，创建client.js文件，代码如下：\n``` javascript\n  var net = require('net');\n  var client = net.connect({port: 8080},function(){\n    console.log('连接服务器！');\n  });\n  client.on('data', function(data){\n    console.log(data.toString());\n    client.end();\n  });\n  client.on('end',function(){\n    console.log('断开与服务器的连接');\n  });\n```\n执行以上客户端的代码：\n```\n  连接服务器！\n  Hello World!\n  断开与服务器的连接\n```\n\n#### Node.js DNS 模块\nNode.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：\n``` javascript\n  var dns = require(\"dns\")\n```\n##### 方法：\n1  `dns.lookup(hostname[, options], callback)`//将域名（比如 'runoob.com'）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。\n2  `dns.lookupService(address, port, callback)`//使用 getnameinfo 解析传入的地址和端口为域名和服务。\n3  `dns.resolve(hostname[, rrtype], callback)`//将一个域名（如 'runoob.com'）解析为一个 rrtype 指定记录类型的数组。\n4  `dns.resolve4(hostname, callback)`//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，['74.125.79.104', '74.125.79.105', '74.125.79.106']）。\n5  `dns.resolve6(hostname, callback)`//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）\n6  `dns.resolveMx(hostname, callback)`//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。\n7  `dns.resolveTxt(hostname, callback)`//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。\n8  `dns.resolveSrv(hostname, callback)`//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{'priority': 10, 'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]）。\n9  `dns.resolveSoa(hostname, callback)`//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。\n10  `dns.resolveNs(hostname, callback)`//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, ['ns1.example.com', 'ns2.example.com']）。\n11  `dns.resolveCname(hostname, callback)`//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, ['bar.example.com']）。\n12  `dns.reverse(ip, callback)`//反向解析 IP 地址，指向该 IP 地址的域名数组。\n13  `dns.getServers()`//返回一个用于当前解析的 IP 地址数组的字符串。\n14  `dns.setServers(servers)`//指定一组 IP 地址作为解析服务器。\n##### rrtypes\ndns.resolve()方法中有效的rrtypes值：\n```          \n  'A' IPV4 地址, 默认\n  'AAAA' IPV6 地址\n  'MX' 邮件交换记录\n  'TXT' text 记录\n  'SRV' SRV 记录\n  'PTR' 用来反向 IP 查找\n  'NS' 域名服务器记录\n  'CNAME' 别名记录\n  'SOA' 授权记录的初始值\n```\n##### 错误码\n每次 DNS 查询都可能返回以下错误码:\n```       \n  dns.NODATA: 无数据响应。\n  dns.FORMERR: 查询格式错误。\n  dns.SERVFAIL: 常规失败。\n  dns.NOTFOUND: 没有找到域名。\n  dns.NOTIMP: 未实现请求的操作。\n  dns.REFUSED: 拒绝查询。\n  dns.BADQUERY: 查询格式错误。\n  dns.BADNAME: 域名格式错误。\n  dns.BADFAMILY: 地址协议不支持。\n  dns.BADRESP: 回复格式错误。\n  dns.CONNREFUSED: 无法连接到 DNS 服务器。\n  dns.TIMEOUT: 连接 DNS 服务器超时。\n  dns.EOF: 文件末端。\n  dns.FILE: 读文件错误。\n  dns.NOMEM: 内存溢出。\n  dns.DESTRUCTION: 通道被摧毁。\n  dns.BADSTR: 字符串格式错误。\n  dns.BADFLAGS: 非法标识符。\n  dns.NONAME: 所给主机不是数字。\n  dns.BADHINTS: 非法HINTS标识符。\n  dns.NOTINITIALIZED: c c-ares 库尚未初始化。\n  dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。\n  dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。\n  dns.CANCELLED: 取消 DNS 查询。\n```\n###### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var dns = require('dns');\n  dns.lookup('www.github.com',function onLookup(err, address, family){\n    console.log('ip 地址：', address);\n    dns.reverse(address, function(err, hostname){\n      if (err) {\n        console.log(err.stack);\n      }\n      console.log('反向解析' + address + ':' + JSON.stringify(hostname));\n    });\n  });\n```\n执行以上代码，结果如下所示：\n```\n  address: 192.30.252.130\n  reverse for 192.30.252.130: [\"github.com\"]\n```\n\n#### Node.js Domain 模块\nNode.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：\n``` javascript\n  var domain = require(\"domain\")\n```\ndomain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on('uncaughtException')不同。\nDomain 模块可分为隐式绑定和显式绑定：\n1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象\n2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象\n##### 方法：\n1  `domain.run(function)`//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。\n2  `domain.add(emitter)`//显式的增加事件\n3  `domain.remove(emitter)`//删除事件。\n4  `domain.bind(callback)`//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。\n5  `domain.intercept(callback)`//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。\n6  `domain.enter()`//进入一个异步调用的上下文，绑定到domain。\n7  `domain.exit()`//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。\n8  `domain.dispose()`//释放一个domain对象，让node进程回收这部分资源。\n9  `domain.create()`//返回一个domain对象。\n##### 事件：\n1  `domain.menbers`//已加入domain对象的域定时器和事件发射器的数组。\n###### 实例\n创建 main.js 文件，代码如下所示：\n``` javascript\n  var EventEmitter = require(\"events\").EventEmitter;\n  var domain = require(\"domain\");\n  var emitter1 = new EventEmitter();\n  // 创建域\n  var domain1 = domain.create();\n  domain1.on('error', function(err){\n     console.log(\"domain1 处理这个错误 (\"+err.message+\")\");\n  });\n  // 显式绑定\n  domain1.add(emitter1);\n  emitter1.on('error',function(err){\n     console.log(\"监听器处理此错误 (\"+err.message+\")\");\n  });\n  emitter1.emit('error',new Error('通过监听器来处理'));\n  emitter1.removeAllListeners('error');\n  emitter1.emit('error',new Error('通过 domain1 处理'));\n  var domain2 = domain.create();\n  domain2.on('error', function(err){\n     console.log(\"domain2 处理这个错误 (\"+err.message+\")\");\n  });\n  // 隐式绑定\n  domain2.run(function(){\n     var emitter2 = new EventEmitter();\n     emitter2.emit('error',new Error('通过 domain2 处理'));   \n  });\n  domain1.remove(emitter1);\n  emitter1.emit('error', new Error('转换为异常，系统将崩溃!'));\n```\n执行以上代码，结果如下所示:\n```\n  监听器处理此错误 (通过监听器来处理)\n  domain1 处理这个错误 (通过 domain1 处理)\n  domain2 处理这个错误 (通过 domain2 处理)\n  events.js:72\n          throw er; // Unhandled 'error' event\n                ^\n  Error: 转换为异常，系统将崩溃!\n      at Object.<anonymous> (/www/node/main.js:40:24)\n      at Module._compile (module.js:456:26)\n      at Object.Module._extensions..js (module.js:474:10)\n      at Module.load (module.js:356:32)\n      at Function.Module._load (module.js:312:12)\n      at Function.Module.runMain (module.js:497:10)\n      at startup (node.js:119:16)\n      at node.js:929:3\n```","slug":"Node.js 工具模块","published":1,"updated":"2017-07-30T07:21:47.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvup001kv0uimix96od0","content":"<h3 id=\"13、Node-js-工具模块\"><a href=\"#13、Node-js-工具模块\" class=\"headerlink\" title=\"13、Node.js 工具模块\"></a>13、Node.js 工具模块</h3><h4 id=\"Node-js-OS-模块\"><a href=\"#Node-js-OS-模块\" class=\"headerlink\" title=\"Node.js OS 模块\"></a>Node.js OS 模块</h4><p>Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">\"os\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>os.tmpdir()</code>//返回操作系统的默认临时文件夹。<br><a id=\"more\"></a><br>2  <code>os.endianness()</code>//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。<br>3  <code>os.hostname()</code>//返回操作系统的主机名。<br>4  <code>os.type()</code>//返回操作系统名<br>5  <code>os.platform()</code>//返回操作系统名<br>6  <code>os.arch()</code>//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。<br>7  <code>os.release()</code>//返回操作系统的发行版本。<br>8  <code>os.uptime()</code>//返回操作系统运行的时间，以秒为单位。<br>9  <code>os.loadavg()</code>//返回一个包含 1、5、15 分钟平均负载的数组。<br>10  <code>os.totalmem()</code>//返回系统内存总量，单位为字节。<br>11  <code>os.freemem()</code>//返回操作系统空闲内存量，单位是字节。<br>12  <code>os.cpus()</code>//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。<br>13  <code>os.networkInterfaces()</code>//获得网络接口列表。</p>\n<h5 id=\"属性：\"><a href=\"#属性：\" class=\"headerlink\" title=\"属性：\"></a>属性：</h5><p><code>os.EOL</code>//定义了操作系统的行尾符的常量。<br>实例<br>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">\"os\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'endianness : '</span> + os.endianness());<span class=\"comment\">// CPU 的字节序</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'type : '</span> + os.type());<span class=\"comment\">// 操作系统名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'platform : '</span> + os.platform());<span class=\"comment\">// 操作系统名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'total memory : '</span> + os.totalmem() + <span class=\"string\">\" bytes.\"</span>);<span class=\"comment\">// 系统内存总量</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'free memory : '</span> + os.freemem() + <span class=\"string\">\" bytes.\"</span>);<span class=\"comment\">// 操作系统空闲内存量</span></div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js </div><div class=\"line\">endianness : LE</div><div class=\"line\">type : Linux</div><div class=\"line\">platform : linux</div><div class=\"line\">total memory : 25103400960 bytes.</div><div class=\"line\">free memory : 20676710400 bytes.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Path-模块\"><a href=\"#Node-js-Path-模块\" class=\"headerlink\" title=\"Node.js Path 模块\"></a>Node.js Path 模块</h4><p>Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><p>1  <code>path.normalize(p)</code>//规范化路径，注意’..’ 和 ‘.’。<br>2  <code>path.join([path1][, path2][, ...])</code>//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\”。<br>3  <code>path.resolve([from ...], to)</code>//将 to 参数解析为绝对路径。<br>4  <code>path.isAbsolute(path)</code>//判断参数 path 是否是绝对路径。<br>5  <code>path.relative(from, to)</code>//用于将相对路径转为绝对路径。<br>6  <code>path.dirname(p)</code>//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。<br>7  <code>path.basename(p[, ext])</code>//返回路径中的最后一部分。同 Unix 命令 bashname 类似。<br>8  <code>path.extname(p)</code>//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。<br>9  <code>path.parse(pathString)</code>//返回路径字符串的对象。<br>10  <code>path.format(pathObject)</code>//从对象中返回路径字符串，和 path.parse 相反。</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>1  <code>path.sep</code>//平台的文件路径分隔符，’\\‘ 或 ‘/‘。<br>2  <code>path.delimiter</code>//平台的分隔符, ; or ‘:’.<br>3  <code>path.posix</code>//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。<br>4  <code>path.win32</code>//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div><div class=\"line\"><span class=\"comment\">// 格式化路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'normalization : '</span> + path.normalize(<span class=\"string\">'/test/test1//2slashes/1slash/tab/..'</span>));</div><div class=\"line\"><span class=\"comment\">// 连接路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'joint path : '</span> + path.join(<span class=\"string\">'/test'</span>, <span class=\"string\">'test1'</span>, <span class=\"string\">'2slashes/1slash'</span>, <span class=\"string\">'tab'</span>, <span class=\"string\">'..'</span>));</div><div class=\"line\"><span class=\"comment\">// 转换为绝对路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve : '</span> + path.resolve(<span class=\"string\">'main.js'</span>));</div><div class=\"line\"><span class=\"comment\">// 路径中文件的后缀名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ext name : '</span> + path.extname(<span class=\"string\">'main.js'</span>));</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js </div><div class=\"line\">normalization : <span class=\"regexp\">/test/</span>test1/<span class=\"number\">2</span>slashes/<span class=\"number\">1</span>slash</div><div class=\"line\">joint path : <span class=\"regexp\">/test/</span>test1/<span class=\"number\">2</span>slashes/<span class=\"number\">1</span>slash</div><div class=\"line\">resolve : <span class=\"regexp\">/web/</span>com/<span class=\"number\">1427176256</span>_27423/main.js</div><div class=\"line\">ext name : .js</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Net-模块\"><a href=\"#Node-js-Net-模块\" class=\"headerlink\" title=\"Node.js Net 模块\"></a>Node.js Net 模块</h4><p>Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：-1\"><a href=\"#方法：-1\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>net.createServer([options][, connectionListener])</code>//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。<br>2  <code>net.connect(options[, connectionListener])</code>//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 ‘connect’ 事件。<br>3  <code>net.createConnection(options[, connectionListener])</code>//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。<br>4  <code>net.connect(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>5  <code>net.createConnection(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>6  <code>net.connect(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。<br>7  <code>net.createConnection(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>8  <code>net.isIP(input)</code>//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。<br>9  <code>net.isIPv4(input)</code>//如果输入的地址为 IPV4， 返回 true，否则返回 false。<br>10  <code>net.isIPv6(input)</code>//如果输入的地址为 IPV6， 返回 true，否则返回 false。</p>\n<h4 id=\"net-Server\"><a href=\"#net-Server\" class=\"headerlink\" title=\"net.Server\"></a>net.Server</h4><p>net.Server通常用于创建一个 TCP 或本地服务器。</p>\n<h5 id=\"net-Server方法：\"><a href=\"#net-Server方法：\" class=\"headerlink\" title=\"net.Server方法：\"></a>net.Server方法：</h5><p>1  <code>server.listen(port[, host][, backlog][, callback])</code>//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。<br>2  <code>server.listen(path[, callback])</code>//通过指定 path 的连接，启动一个本地 socket 服务器。<br>3  <code>server.listen(handle[, callback])</code>//通过指定句柄连接。<br>4  <code>server.listen(options[, callback])</code>//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。<br>5  <code>server.close([callback])</code>//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。<br>6  <code>server.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。<br>7  <code>server.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。<br>8  <code>server.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。<br>9  <code>server.getConnections(callback)</code>//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。</p>\n<h5 id=\"net-Server事件：\"><a href=\"#net-Server事件：\" class=\"headerlink\" title=\"net.Server事件：\"></a>net.Server事件：</h5><p>1  <code>listening</code>//当服务器调用 server.listen 绑定后会触发。<br>2  <code>connection</code>//当新连接创建后会被触发。socket 是 net.Socket实例。<br>3  <code>close</code>//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。<br>4  <code>error</code>//发生错误时触发。’close’ 事件将被下列事件直接调用。</p>\n<h4 id=\"net-Socket\"><a href=\"#net-Socket\" class=\"headerlink\" title=\"net.Socket\"></a>net.Socket</h4><p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。</p>\n<h5 id=\"net-Socket事件：\"><a href=\"#net-Socket事件：\" class=\"headerlink\" title=\"net.Socket事件：\"></a>net.Socket事件：</h5><p>1  <code>lookup</code>//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。<br>2  <code>connect</code>//成功建立 socket 连接时触发。<br>3  <code>data</code>//当接收到数据时触发。<br>4  <code>end</code>//当 socket 另一端发送 FIN 包时，触发该事件。<br>5  <code>timeout</code>//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。<br>6  <code>drain</code>//当写缓存为空得时候触发。可用来控制上传。<br>7  <code>error</code>//错误发生时触发。<br>8  <code>close</code>//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。</p>\n<h5 id=\"net-Socket属性：\"><a href=\"#net-Socket属性：\" class=\"headerlink\" title=\"net.Socket属性：\"></a>net.Socket属性：</h5><p>1  <code>socket.bufferSize</code>//该属性显示了要写入缓冲区的字节数。<br>2  <code>socket.remoteAddress</code>//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。<br>3  <code>socket.remoteFamily</code>//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。<br>4  <code>socket.remotePort</code>//远程端口，数字表示，例如：80 or 21。<br>5  <code>socket.localAddress</code>//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。<br>6  <code>socket.localPort</code>//本地端口地址，数字表示。例如：80 or 21。<br>7  <code>socket.bytesRead</code>//接收到得字节数。<br>8  <code>socket.bytesWritten</code>//发送的字节数。</p>\n<h5 id=\"net-Socket方法：\"><a href=\"#net-Socket方法：\" class=\"headerlink\" title=\"net.Socket方法：\"></a>net.Socket方法：</h5><p>1  <code>new net.Socket([options])</code>//构造一个新的 socket 对象。<br>2  <code>socket.connect(port[, host][, connectListener])</code>//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>3  <code>socket.connect(path[, connectListener])</code>//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>4  <code>socket.setEncoding([encoding])</code>//设置编码<br>5  <code>socket.write(data[, encoding][, callback])</code>//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。<br>6  <code>socket.end([data][, encoding])</code>//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。<br>7  <code>socket.destroy()</code>//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。<br>8  <code>socket.pause()</code>//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。<br>9  <code>socket.resume()</code>//调用 pause() 后想恢复读取数据。<br>10  <code>socket.setTimeout(timeout[, callback])</code>//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。<br>11  <code>socket.setNoDelay([noDelay])</code>//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。<br>12  <code>socket.setKeepAlive([enable][, initialDelay])</code>//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.<br>13  <code>socket.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。<br>14  <code>socket.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。<br>15  <code>socket.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。</p>\n<h6 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 server.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">connection</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">  connection.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端关闭连接'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  connection.write(<span class=\"string\">'Hello World!\\r\\n'</span>);</div><div class=\"line\">  connection.pipe(connection);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8080</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server is listening'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上服务端代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">server is listening # 服务已创建并监听8080端口</div></pre></td></tr></table></figure></p>\n<p>新开一个窗口，创建client.js文件，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;<span class=\"attr\">port</span>: <span class=\"number\">8080</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接服务器！'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">  client.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'断开与服务器的连接'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上客户端的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">连接服务器！</div><div class=\"line\">Hello World!</div><div class=\"line\">断开与服务器的连接</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-DNS-模块\"><a href=\"#Node-js-DNS-模块\" class=\"headerlink\" title=\"Node.js DNS 模块\"></a>Node.js DNS 模块</h4><p>Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">\"dns\"</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：-2\"><a href=\"#方法：-2\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>dns.lookup(hostname[, options], callback)</code>//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。<br>2  <code>dns.lookupService(address, port, callback)</code>//使用 getnameinfo 解析传入的地址和端口为域名和服务。<br>3  <code>dns.resolve(hostname[, rrtype], callback)</code>//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。<br>4  <code>dns.resolve4(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。<br>5  <code>dns.resolve6(hostname, callback)</code>//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）<br>6  <code>dns.resolveMx(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。<br>7  <code>dns.resolveTxt(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。<br>8  <code>dns.resolveSrv(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。<br>9  <code>dns.resolveSoa(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。<br>10  <code>dns.resolveNs(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。<br>11  <code>dns.resolveCname(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。<br>12  <code>dns.reverse(ip, callback)</code>//反向解析 IP 地址，指向该 IP 地址的域名数组。<br>13  <code>dns.getServers()</code>//返回一个用于当前解析的 IP 地址数组的字符串。<br>14  <code>dns.setServers(servers)</code>//指定一组 IP 地址作为解析服务器。</p>\n<h5 id=\"rrtypes\"><a href=\"#rrtypes\" class=\"headerlink\" title=\"rrtypes\"></a>rrtypes</h5><p>dns.resolve()方法中有效的rrtypes值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;A&apos; IPV4 地址, 默认</div><div class=\"line\">&apos;AAAA&apos; IPV6 地址</div><div class=\"line\">&apos;MX&apos; 邮件交换记录</div><div class=\"line\">&apos;TXT&apos; text 记录</div><div class=\"line\">&apos;SRV&apos; SRV 记录</div><div class=\"line\">&apos;PTR&apos; 用来反向 IP 查找</div><div class=\"line\">&apos;NS&apos; 域名服务器记录</div><div class=\"line\">&apos;CNAME&apos; 别名记录</div><div class=\"line\">&apos;SOA&apos; 授权记录的初始值</div></pre></td></tr></table></figure></p>\n<h5 id=\"错误码\"><a href=\"#错误码\" class=\"headerlink\" title=\"错误码\"></a>错误码</h5><p>每次 DNS 查询都可能返回以下错误码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">dns.NODATA: 无数据响应。</div><div class=\"line\">dns.FORMERR: 查询格式错误。</div><div class=\"line\">dns.SERVFAIL: 常规失败。</div><div class=\"line\">dns.NOTFOUND: 没有找到域名。</div><div class=\"line\">dns.NOTIMP: 未实现请求的操作。</div><div class=\"line\">dns.REFUSED: 拒绝查询。</div><div class=\"line\">dns.BADQUERY: 查询格式错误。</div><div class=\"line\">dns.BADNAME: 域名格式错误。</div><div class=\"line\">dns.BADFAMILY: 地址协议不支持。</div><div class=\"line\">dns.BADRESP: 回复格式错误。</div><div class=\"line\">dns.CONNREFUSED: 无法连接到 DNS 服务器。</div><div class=\"line\">dns.TIMEOUT: 连接 DNS 服务器超时。</div><div class=\"line\">dns.EOF: 文件末端。</div><div class=\"line\">dns.FILE: 读文件错误。</div><div class=\"line\">dns.NOMEM: 内存溢出。</div><div class=\"line\">dns.DESTRUCTION: 通道被摧毁。</div><div class=\"line\">dns.BADSTR: 字符串格式错误。</div><div class=\"line\">dns.BADFLAGS: 非法标识符。</div><div class=\"line\">dns.NONAME: 所给主机不是数字。</div><div class=\"line\">dns.BADHINTS: 非法HINTS标识符。</div><div class=\"line\">dns.NOTINITIALIZED: c c-ares 库尚未初始化。</div><div class=\"line\">dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。</div><div class=\"line\">dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。</div><div class=\"line\">dns.CANCELLED: 取消 DNS 查询。</div></pre></td></tr></table></figure></p>\n<h6 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);</div><div class=\"line\">dns.lookup(<span class=\"string\">'www.github.com'</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLookup</span>(<span class=\"params\">err, address, family</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ip 地址：'</span>, address);</div><div class=\"line\">  dns.reverse(address, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, hostname</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'反向解析'</span> + address + <span class=\"string\">':'</span> + <span class=\"built_in\">JSON</span>.stringify(hostname));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码，结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">address: 192.30.252.130</div><div class=\"line\">reverse for 192.30.252.130: [&quot;github.com&quot;]</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Domain-模块\"><a href=\"#Node-js-Domain-模块\" class=\"headerlink\" title=\"Node.js Domain 模块\"></a>Node.js Domain 模块</h4><p>Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">require</span>(<span class=\"string\">\"domain\"</span>)</div></pre></td></tr></table></figure></p>\n<p>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。<br>Domain 模块可分为隐式绑定和显式绑定：<br>1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象<br>2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</p>\n<h5 id=\"方法：-3\"><a href=\"#方法：-3\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>domain.run(function)</code>//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。<br>2  <code>domain.add(emitter)</code>//显式的增加事件<br>3  <code>domain.remove(emitter)</code>//删除事件。<br>4  <code>domain.bind(callback)</code>//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。<br>5  <code>domain.intercept(callback)</code>//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。<br>6  <code>domain.enter()</code>//进入一个异步调用的上下文，绑定到domain。<br>7  <code>domain.exit()</code>//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。<br>8  <code>domain.dispose()</code>//释放一个domain对象，让node进程回收这部分资源。<br>9  <code>domain.create()</code>//返回一个domain对象。</p>\n<h5 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h5><p>1  <code>domain.menbers</code>//已加入domain对象的域定时器和事件发射器的数组。</p>\n<h6 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">\"events\"</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">require</span>(<span class=\"string\">\"domain\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter1 = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 创建域</span></div><div class=\"line\"><span class=\"keyword\">var</span> domain1 = domain.create();</div><div class=\"line\">domain1.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"domain1 处理这个错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 显式绑定</span></div><div class=\"line\">domain1.add(emitter1);</div><div class=\"line\">emitter1.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"监听器处理此错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过监听器来处理'</span>));</div><div class=\"line\">emitter1.removeAllListeners(<span class=\"string\">'error'</span>);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过 domain1 处理'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> domain2 = domain.create();</div><div class=\"line\">domain2.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"domain2 处理这个错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 隐式绑定</span></div><div class=\"line\">domain2.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> emitter2 = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">   emitter2.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过 domain2 处理'</span>));   </div><div class=\"line\">&#125;);</div><div class=\"line\">domain1.remove(emitter1);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'转换为异常，系统将崩溃!'</span>));</div></pre></td></tr></table></figure></p>\n<p>执行以上代码，结果如下所示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">监听器处理此错误 (通过监听器来处理)</div><div class=\"line\">domain1 处理这个错误 (通过 domain1 处理)</div><div class=\"line\">domain2 处理这个错误 (通过 domain2 处理)</div><div class=\"line\">events.js:72</div><div class=\"line\">        throw er; // Unhandled &apos;error&apos; event</div><div class=\"line\">              ^</div><div class=\"line\">Error: 转换为异常，系统将崩溃!</div><div class=\"line\">    at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)</div><div class=\"line\">    at Module._compile (module.js:456:26)</div><div class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</div><div class=\"line\">    at Module.load (module.js:356:32)</div><div class=\"line\">    at Function.Module._load (module.js:312:12)</div><div class=\"line\">    at Function.Module.runMain (module.js:497:10)</div><div class=\"line\">    at startup (node.js:119:16)</div><div class=\"line\">    at node.js:929:3</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"13、Node-js-工具模块\"><a href=\"#13、Node-js-工具模块\" class=\"headerlink\" title=\"13、Node.js 工具模块\"></a>13、Node.js 工具模块</h3><h4 id=\"Node-js-OS-模块\"><a href=\"#Node-js-OS-模块\" class=\"headerlink\" title=\"Node.js OS 模块\"></a>Node.js OS 模块</h4><p>Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">\"os\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>os.tmpdir()</code>//返回操作系统的默认临时文件夹。<br>","more":"<br>2  <code>os.endianness()</code>//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。<br>3  <code>os.hostname()</code>//返回操作系统的主机名。<br>4  <code>os.type()</code>//返回操作系统名<br>5  <code>os.platform()</code>//返回操作系统名<br>6  <code>os.arch()</code>//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。<br>7  <code>os.release()</code>//返回操作系统的发行版本。<br>8  <code>os.uptime()</code>//返回操作系统运行的时间，以秒为单位。<br>9  <code>os.loadavg()</code>//返回一个包含 1、5、15 分钟平均负载的数组。<br>10  <code>os.totalmem()</code>//返回系统内存总量，单位为字节。<br>11  <code>os.freemem()</code>//返回操作系统空闲内存量，单位是字节。<br>12  <code>os.cpus()</code>//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。<br>13  <code>os.networkInterfaces()</code>//获得网络接口列表。</p>\n<h5 id=\"属性：\"><a href=\"#属性：\" class=\"headerlink\" title=\"属性：\"></a>属性：</h5><p><code>os.EOL</code>//定义了操作系统的行尾符的常量。<br>实例<br>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">\"os\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'endianness : '</span> + os.endianness());<span class=\"comment\">// CPU 的字节序</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'type : '</span> + os.type());<span class=\"comment\">// 操作系统名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'platform : '</span> + os.platform());<span class=\"comment\">// 操作系统名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'total memory : '</span> + os.totalmem() + <span class=\"string\">\" bytes.\"</span>);<span class=\"comment\">// 系统内存总量</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'free memory : '</span> + os.freemem() + <span class=\"string\">\" bytes.\"</span>);<span class=\"comment\">// 操作系统空闲内存量</span></div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js </div><div class=\"line\">endianness : LE</div><div class=\"line\">type : Linux</div><div class=\"line\">platform : linux</div><div class=\"line\">total memory : 25103400960 bytes.</div><div class=\"line\">free memory : 20676710400 bytes.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Path-模块\"><a href=\"#Node-js-Path-模块\" class=\"headerlink\" title=\"Node.js Path 模块\"></a>Node.js Path 模块</h4><p>Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><p>1  <code>path.normalize(p)</code>//规范化路径，注意’..’ 和 ‘.’。<br>2  <code>path.join([path1][, path2][, ...])</code>//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\”。<br>3  <code>path.resolve([from ...], to)</code>//将 to 参数解析为绝对路径。<br>4  <code>path.isAbsolute(path)</code>//判断参数 path 是否是绝对路径。<br>5  <code>path.relative(from, to)</code>//用于将相对路径转为绝对路径。<br>6  <code>path.dirname(p)</code>//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。<br>7  <code>path.basename(p[, ext])</code>//返回路径中的最后一部分。同 Unix 命令 bashname 类似。<br>8  <code>path.extname(p)</code>//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。<br>9  <code>path.parse(pathString)</code>//返回路径字符串的对象。<br>10  <code>path.format(pathObject)</code>//从对象中返回路径字符串，和 path.parse 相反。</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>1  <code>path.sep</code>//平台的文件路径分隔符，’\\‘ 或 ‘/‘。<br>2  <code>path.delimiter</code>//平台的分隔符, ; or ‘:’.<br>3  <code>path.posix</code>//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。<br>4  <code>path.win32</code>//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div><div class=\"line\"><span class=\"comment\">// 格式化路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'normalization : '</span> + path.normalize(<span class=\"string\">'/test/test1//2slashes/1slash/tab/..'</span>));</div><div class=\"line\"><span class=\"comment\">// 连接路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'joint path : '</span> + path.join(<span class=\"string\">'/test'</span>, <span class=\"string\">'test1'</span>, <span class=\"string\">'2slashes/1slash'</span>, <span class=\"string\">'tab'</span>, <span class=\"string\">'..'</span>));</div><div class=\"line\"><span class=\"comment\">// 转换为绝对路径</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve : '</span> + path.resolve(<span class=\"string\">'main.js'</span>));</div><div class=\"line\"><span class=\"comment\">// 路径中文件的后缀名</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ext name : '</span> + path.extname(<span class=\"string\">'main.js'</span>));</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">node main.js </div><div class=\"line\">normalization : <span class=\"regexp\">/test/</span>test1/<span class=\"number\">2</span>slashes/<span class=\"number\">1</span>slash</div><div class=\"line\">joint path : <span class=\"regexp\">/test/</span>test1/<span class=\"number\">2</span>slashes/<span class=\"number\">1</span>slash</div><div class=\"line\">resolve : <span class=\"regexp\">/web/</span>com/<span class=\"number\">1427176256</span>_27423/main.js</div><div class=\"line\">ext name : .js</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Net-模块\"><a href=\"#Node-js-Net-模块\" class=\"headerlink\" title=\"Node.js Net 模块\"></a>Node.js Net 模块</h4><p>Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：-1\"><a href=\"#方法：-1\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>net.createServer([options][, connectionListener])</code>//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。<br>2  <code>net.connect(options[, connectionListener])</code>//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 ‘connect’ 事件。<br>3  <code>net.createConnection(options[, connectionListener])</code>//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。<br>4  <code>net.connect(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>5  <code>net.createConnection(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>6  <code>net.connect(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。<br>7  <code>net.createConnection(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>8  <code>net.isIP(input)</code>//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。<br>9  <code>net.isIPv4(input)</code>//如果输入的地址为 IPV4， 返回 true，否则返回 false。<br>10  <code>net.isIPv6(input)</code>//如果输入的地址为 IPV6， 返回 true，否则返回 false。</p>\n<h4 id=\"net-Server\"><a href=\"#net-Server\" class=\"headerlink\" title=\"net.Server\"></a>net.Server</h4><p>net.Server通常用于创建一个 TCP 或本地服务器。</p>\n<h5 id=\"net-Server方法：\"><a href=\"#net-Server方法：\" class=\"headerlink\" title=\"net.Server方法：\"></a>net.Server方法：</h5><p>1  <code>server.listen(port[, host][, backlog][, callback])</code>//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。<br>2  <code>server.listen(path[, callback])</code>//通过指定 path 的连接，启动一个本地 socket 服务器。<br>3  <code>server.listen(handle[, callback])</code>//通过指定句柄连接。<br>4  <code>server.listen(options[, callback])</code>//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。<br>5  <code>server.close([callback])</code>//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。<br>6  <code>server.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。<br>7  <code>server.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。<br>8  <code>server.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。<br>9  <code>server.getConnections(callback)</code>//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。</p>\n<h5 id=\"net-Server事件：\"><a href=\"#net-Server事件：\" class=\"headerlink\" title=\"net.Server事件：\"></a>net.Server事件：</h5><p>1  <code>listening</code>//当服务器调用 server.listen 绑定后会触发。<br>2  <code>connection</code>//当新连接创建后会被触发。socket 是 net.Socket实例。<br>3  <code>close</code>//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。<br>4  <code>error</code>//发生错误时触发。’close’ 事件将被下列事件直接调用。</p>\n<h4 id=\"net-Socket\"><a href=\"#net-Socket\" class=\"headerlink\" title=\"net.Socket\"></a>net.Socket</h4><p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。</p>\n<h5 id=\"net-Socket事件：\"><a href=\"#net-Socket事件：\" class=\"headerlink\" title=\"net.Socket事件：\"></a>net.Socket事件：</h5><p>1  <code>lookup</code>//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。<br>2  <code>connect</code>//成功建立 socket 连接时触发。<br>3  <code>data</code>//当接收到数据时触发。<br>4  <code>end</code>//当 socket 另一端发送 FIN 包时，触发该事件。<br>5  <code>timeout</code>//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。<br>6  <code>drain</code>//当写缓存为空得时候触发。可用来控制上传。<br>7  <code>error</code>//错误发生时触发。<br>8  <code>close</code>//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。</p>\n<h5 id=\"net-Socket属性：\"><a href=\"#net-Socket属性：\" class=\"headerlink\" title=\"net.Socket属性：\"></a>net.Socket属性：</h5><p>1  <code>socket.bufferSize</code>//该属性显示了要写入缓冲区的字节数。<br>2  <code>socket.remoteAddress</code>//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。<br>3  <code>socket.remoteFamily</code>//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。<br>4  <code>socket.remotePort</code>//远程端口，数字表示，例如：80 or 21。<br>5  <code>socket.localAddress</code>//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。<br>6  <code>socket.localPort</code>//本地端口地址，数字表示。例如：80 or 21。<br>7  <code>socket.bytesRead</code>//接收到得字节数。<br>8  <code>socket.bytesWritten</code>//发送的字节数。</p>\n<h5 id=\"net-Socket方法：\"><a href=\"#net-Socket方法：\" class=\"headerlink\" title=\"net.Socket方法：\"></a>net.Socket方法：</h5><p>1  <code>new net.Socket([options])</code>//构造一个新的 socket 对象。<br>2  <code>socket.connect(port[, host][, connectListener])</code>//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>3  <code>socket.connect(path[, connectListener])</code>//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>4  <code>socket.setEncoding([encoding])</code>//设置编码<br>5  <code>socket.write(data[, encoding][, callback])</code>//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。<br>6  <code>socket.end([data][, encoding])</code>//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。<br>7  <code>socket.destroy()</code>//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。<br>8  <code>socket.pause()</code>//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。<br>9  <code>socket.resume()</code>//调用 pause() 后想恢复读取数据。<br>10  <code>socket.setTimeout(timeout[, callback])</code>//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。<br>11  <code>socket.setNoDelay([noDelay])</code>//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。<br>12  <code>socket.setKeepAlive([enable][, initialDelay])</code>//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.<br>13  <code>socket.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。<br>14  <code>socket.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。<br>15  <code>socket.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。</p>\n<h6 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 server.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">connection</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">  connection.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'客户端关闭连接'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  connection.write(<span class=\"string\">'Hello World!\\r\\n'</span>);</div><div class=\"line\">  connection.pipe(connection);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8080</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server is listening'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上服务端代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">server is listening # 服务已创建并监听8080端口</div></pre></td></tr></table></figure></p>\n<p>新开一个窗口，创建client.js文件，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;<span class=\"attr\">port</span>: <span class=\"number\">8080</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接服务器！'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">  client.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'断开与服务器的连接'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上客户端的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">连接服务器！</div><div class=\"line\">Hello World!</div><div class=\"line\">断开与服务器的连接</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-DNS-模块\"><a href=\"#Node-js-DNS-模块\" class=\"headerlink\" title=\"Node.js DNS 模块\"></a>Node.js DNS 模块</h4><p>Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">\"dns\"</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"方法：-2\"><a href=\"#方法：-2\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>dns.lookup(hostname[, options], callback)</code>//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。<br>2  <code>dns.lookupService(address, port, callback)</code>//使用 getnameinfo 解析传入的地址和端口为域名和服务。<br>3  <code>dns.resolve(hostname[, rrtype], callback)</code>//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。<br>4  <code>dns.resolve4(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。<br>5  <code>dns.resolve6(hostname, callback)</code>//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）<br>6  <code>dns.resolveMx(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。<br>7  <code>dns.resolveTxt(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。<br>8  <code>dns.resolveSrv(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。<br>9  <code>dns.resolveSoa(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。<br>10  <code>dns.resolveNs(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。<br>11  <code>dns.resolveCname(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。<br>12  <code>dns.reverse(ip, callback)</code>//反向解析 IP 地址，指向该 IP 地址的域名数组。<br>13  <code>dns.getServers()</code>//返回一个用于当前解析的 IP 地址数组的字符串。<br>14  <code>dns.setServers(servers)</code>//指定一组 IP 地址作为解析服务器。</p>\n<h5 id=\"rrtypes\"><a href=\"#rrtypes\" class=\"headerlink\" title=\"rrtypes\"></a>rrtypes</h5><p>dns.resolve()方法中有效的rrtypes值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;A&apos; IPV4 地址, 默认</div><div class=\"line\">&apos;AAAA&apos; IPV6 地址</div><div class=\"line\">&apos;MX&apos; 邮件交换记录</div><div class=\"line\">&apos;TXT&apos; text 记录</div><div class=\"line\">&apos;SRV&apos; SRV 记录</div><div class=\"line\">&apos;PTR&apos; 用来反向 IP 查找</div><div class=\"line\">&apos;NS&apos; 域名服务器记录</div><div class=\"line\">&apos;CNAME&apos; 别名记录</div><div class=\"line\">&apos;SOA&apos; 授权记录的初始值</div></pre></td></tr></table></figure></p>\n<h5 id=\"错误码\"><a href=\"#错误码\" class=\"headerlink\" title=\"错误码\"></a>错误码</h5><p>每次 DNS 查询都可能返回以下错误码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">dns.NODATA: 无数据响应。</div><div class=\"line\">dns.FORMERR: 查询格式错误。</div><div class=\"line\">dns.SERVFAIL: 常规失败。</div><div class=\"line\">dns.NOTFOUND: 没有找到域名。</div><div class=\"line\">dns.NOTIMP: 未实现请求的操作。</div><div class=\"line\">dns.REFUSED: 拒绝查询。</div><div class=\"line\">dns.BADQUERY: 查询格式错误。</div><div class=\"line\">dns.BADNAME: 域名格式错误。</div><div class=\"line\">dns.BADFAMILY: 地址协议不支持。</div><div class=\"line\">dns.BADRESP: 回复格式错误。</div><div class=\"line\">dns.CONNREFUSED: 无法连接到 DNS 服务器。</div><div class=\"line\">dns.TIMEOUT: 连接 DNS 服务器超时。</div><div class=\"line\">dns.EOF: 文件末端。</div><div class=\"line\">dns.FILE: 读文件错误。</div><div class=\"line\">dns.NOMEM: 内存溢出。</div><div class=\"line\">dns.DESTRUCTION: 通道被摧毁。</div><div class=\"line\">dns.BADSTR: 字符串格式错误。</div><div class=\"line\">dns.BADFLAGS: 非法标识符。</div><div class=\"line\">dns.NONAME: 所给主机不是数字。</div><div class=\"line\">dns.BADHINTS: 非法HINTS标识符。</div><div class=\"line\">dns.NOTINITIALIZED: c c-ares 库尚未初始化。</div><div class=\"line\">dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。</div><div class=\"line\">dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。</div><div class=\"line\">dns.CANCELLED: 取消 DNS 查询。</div></pre></td></tr></table></figure></p>\n<h6 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);</div><div class=\"line\">dns.lookup(<span class=\"string\">'www.github.com'</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onLookup</span>(<span class=\"params\">err, address, family</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ip 地址：'</span>, address);</div><div class=\"line\">  dns.reverse(address, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, hostname</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'反向解析'</span> + address + <span class=\"string\">':'</span> + <span class=\"built_in\">JSON</span>.stringify(hostname));</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>执行以上代码，结果如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">address: 192.30.252.130</div><div class=\"line\">reverse for 192.30.252.130: [&quot;github.com&quot;]</div></pre></td></tr></table></figure></p>\n<h4 id=\"Node-js-Domain-模块\"><a href=\"#Node-js-Domain-模块\" class=\"headerlink\" title=\"Node.js Domain 模块\"></a>Node.js Domain 模块</h4><p>Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">require</span>(<span class=\"string\">\"domain\"</span>)</div></pre></td></tr></table></figure></p>\n<p>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。<br>Domain 模块可分为隐式绑定和显式绑定：<br>1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象<br>2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</p>\n<h5 id=\"方法：-3\"><a href=\"#方法：-3\" class=\"headerlink\" title=\"方法：\"></a>方法：</h5><p>1  <code>domain.run(function)</code>//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。<br>2  <code>domain.add(emitter)</code>//显式的增加事件<br>3  <code>domain.remove(emitter)</code>//删除事件。<br>4  <code>domain.bind(callback)</code>//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。<br>5  <code>domain.intercept(callback)</code>//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。<br>6  <code>domain.enter()</code>//进入一个异步调用的上下文，绑定到domain。<br>7  <code>domain.exit()</code>//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。<br>8  <code>domain.dispose()</code>//释放一个domain对象，让node进程回收这部分资源。<br>9  <code>domain.create()</code>//返回一个domain对象。</p>\n<h5 id=\"事件：\"><a href=\"#事件：\" class=\"headerlink\" title=\"事件：\"></a>事件：</h5><p>1  <code>domain.menbers</code>//已加入domain对象的域定时器和事件发射器的数组。</p>\n<h6 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">\"events\"</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">require</span>(<span class=\"string\">\"domain\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter1 = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 创建域</span></div><div class=\"line\"><span class=\"keyword\">var</span> domain1 = domain.create();</div><div class=\"line\">domain1.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"domain1 处理这个错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 显式绑定</span></div><div class=\"line\">domain1.add(emitter1);</div><div class=\"line\">emitter1.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"监听器处理此错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过监听器来处理'</span>));</div><div class=\"line\">emitter1.removeAllListeners(<span class=\"string\">'error'</span>);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过 domain1 处理'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> domain2 = domain.create();</div><div class=\"line\">domain2.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"domain2 处理这个错误 (\"</span>+err.message+<span class=\"string\">\")\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 隐式绑定</span></div><div class=\"line\">domain2.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> emitter2 = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">   emitter2.emit(<span class=\"string\">'error'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'通过 domain2 处理'</span>));   </div><div class=\"line\">&#125;);</div><div class=\"line\">domain1.remove(emitter1);</div><div class=\"line\">emitter1.emit(<span class=\"string\">'error'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'转换为异常，系统将崩溃!'</span>));</div></pre></td></tr></table></figure></p>\n<p>执行以上代码，结果如下所示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">监听器处理此错误 (通过监听器来处理)</div><div class=\"line\">domain1 处理这个错误 (通过 domain1 处理)</div><div class=\"line\">domain2 处理这个错误 (通过 domain2 处理)</div><div class=\"line\">events.js:72</div><div class=\"line\">        throw er; // Unhandled &apos;error&apos; event</div><div class=\"line\">              ^</div><div class=\"line\">Error: 转换为异常，系统将崩溃!</div><div class=\"line\">    at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)</div><div class=\"line\">    at Module._compile (module.js:456:26)</div><div class=\"line\">    at Object.Module._extensions..js (module.js:474:10)</div><div class=\"line\">    at Module.load (module.js:356:32)</div><div class=\"line\">    at Function.Module._load (module.js:312:12)</div><div class=\"line\">    at Function.Module.runMain (module.js:497:10)</div><div class=\"line\">    at startup (node.js:119:16)</div><div class=\"line\">    at node.js:929:3</div></pre></td></tr></table></figure></p>"},{"title":"Node.js常用工具(10)","date":"2016-06-29T00:10:03.000Z","_content":"\n### 10、Node.js 常用工具\n`util` 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。\n<!-- more -->\n#### util.inherits\n`util.inherits(constructor, superConstructor)`//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。\n在这里我们只介绍`util.inherits` 的用法，示例如下：\n``` javascript\n  var util = require('util');\n  function Base() {\n    this.name = 'base';\n    this.base = 1991;\n    this.sayHello = function() {\n      console.log('Hello ' + this.name);\n    };\n  } \n  Base.prototype.showName = function(){\n    console.log(this.name);\n  };\n  function Sub() {\n    this.name = 'sub';\n  }\n  util.inherits(Sub, Base);\n  var objBase = new Base();\n  objBase.showName();\n  objBase.sayHello();\n  console.log(objBase);\n  var objSub = new Sub();\n  objSub.showName();\n  console.log(objSub);\n  ```\n我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过`util.inherits` 实现继承。运行结果如下：\n```\n  base \n  Hello base \n  { name: 'base', base: 1991, sayHello: [Function] } \n  sub \n  { name: 'sub' }\n```\n注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.\n#### util.inspect\n`util.inspect(object,[showHidden],[depth],[colors])`//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。\n-`showHidden`//是一个可选参数，如果值为 true，将会输出更多隐藏信息。\n-`depth`//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。\n-`colors`//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。\n特别要指出的是，`util.inspect` 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。\n``` javascript\n  var util = require('util');\n  function Person(){\n    this.name = 'byvoid';\n    this.toString = function(){\n      return this.name;\n    };\n  }\n  var obj = new Person();\n  console.log(util.inspect(obj));\n  console.log(util.inspect(obj,true));\n  //运行结果是： \n  Person { name: 'byvoid', toString: [Function] }\n  Person {\n    name: 'byvoid',\n    toString:\n     { [Function]\n       [length]: 0,\n       [name]: '',\n       [arguments]: null,\n       [caller]: null,\n       [prototype]: { [constructor]: [Circular] } \n    } }\n```\n#### util.isArray\n`util.isArray(object)`//如果给定的参数 \"object\" 是一个数组返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isArray([]);// true\n        util.isArray(new Array);// true\n        util.isArray({});// false\n```\n#### util.isRegExp\n`util.isRegExp(object)`//如果给定的参数 \"object\" 是一个正则表达式返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isRegExp(/some regexp/);// true\n        util.isRegExp(new RegExp('another regexp'));// true\n        util.isRegExp({});// false\n```\n#### util.isDate\n`util.isDate(object)`// 如果给定的参数 \"object\" 是一个日期返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isDate(new Date());// true\n        util.isDate(Date());// false (without 'new' returns a String)\n        util.isDate({});// false\n```\n#### util.isError \n`util.isError(object)`// 如果给定的参数 \"object\" 是一个错误对象返回true，否则返回false。\n``` javascript     \n        var util = require('util');\n        util.isError(new Error());// true\n        util.isError(new TypeError());// true\n        util.isError({ name: 'Error', message: 'an error occurred' });// false\n```\n","source":"_posts/Node.js 常用工具.md","raw":"---\ntitle: Node.js常用工具(10)\ndate: 2016-06-29 08:10:03\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 10、Node.js 常用工具\n`util` 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。\n<!-- more -->\n#### util.inherits\n`util.inherits(constructor, superConstructor)`//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。\n在这里我们只介绍`util.inherits` 的用法，示例如下：\n``` javascript\n  var util = require('util');\n  function Base() {\n    this.name = 'base';\n    this.base = 1991;\n    this.sayHello = function() {\n      console.log('Hello ' + this.name);\n    };\n  } \n  Base.prototype.showName = function(){\n    console.log(this.name);\n  };\n  function Sub() {\n    this.name = 'sub';\n  }\n  util.inherits(Sub, Base);\n  var objBase = new Base();\n  objBase.showName();\n  objBase.sayHello();\n  console.log(objBase);\n  var objSub = new Sub();\n  objSub.showName();\n  console.log(objSub);\n  ```\n我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过`util.inherits` 实现继承。运行结果如下：\n```\n  base \n  Hello base \n  { name: 'base', base: 1991, sayHello: [Function] } \n  sub \n  { name: 'sub' }\n```\n注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.\n#### util.inspect\n`util.inspect(object,[showHidden],[depth],[colors])`//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。\n-`showHidden`//是一个可选参数，如果值为 true，将会输出更多隐藏信息。\n-`depth`//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。\n-`colors`//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。\n特别要指出的是，`util.inspect` 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。\n``` javascript\n  var util = require('util');\n  function Person(){\n    this.name = 'byvoid';\n    this.toString = function(){\n      return this.name;\n    };\n  }\n  var obj = new Person();\n  console.log(util.inspect(obj));\n  console.log(util.inspect(obj,true));\n  //运行结果是： \n  Person { name: 'byvoid', toString: [Function] }\n  Person {\n    name: 'byvoid',\n    toString:\n     { [Function]\n       [length]: 0,\n       [name]: '',\n       [arguments]: null,\n       [caller]: null,\n       [prototype]: { [constructor]: [Circular] } \n    } }\n```\n#### util.isArray\n`util.isArray(object)`//如果给定的参数 \"object\" 是一个数组返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isArray([]);// true\n        util.isArray(new Array);// true\n        util.isArray({});// false\n```\n#### util.isRegExp\n`util.isRegExp(object)`//如果给定的参数 \"object\" 是一个正则表达式返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isRegExp(/some regexp/);// true\n        util.isRegExp(new RegExp('another regexp'));// true\n        util.isRegExp({});// false\n```\n#### util.isDate\n`util.isDate(object)`// 如果给定的参数 \"object\" 是一个日期返回true，否则返回false。\n``` javascript\n        var util = require('util');\n        util.isDate(new Date());// true\n        util.isDate(Date());// false (without 'new' returns a String)\n        util.isDate({});// false\n```\n#### util.isError \n`util.isError(object)`// 如果给定的参数 \"object\" 是一个错误对象返回true，否则返回false。\n``` javascript     \n        var util = require('util');\n        util.isError(new Error());// true\n        util.isError(new TypeError());// true\n        util.isError({ name: 'Error', message: 'an error occurred' });// false\n```\n","slug":"Node.js 常用工具","published":1,"updated":"2017-07-30T07:21:47.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvuu001ov0uifyzgri7y","content":"<h3 id=\"10、Node-js-常用工具\"><a href=\"#10、Node-js-常用工具\" class=\"headerlink\" title=\"10、Node.js 常用工具\"></a>10、Node.js 常用工具</h3><p><code>util</code> 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br><a id=\"more\"></a></p>\n<h4 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h4><p><code>util.inherits(constructor, superConstructor)</code>//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。<br>在这里我们只介绍<code>util.inherits</code> 的用法，示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'base'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = <span class=\"number\">1991</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125; </div><div class=\"line\">Base.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'sub'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Sub, Base);</div><div class=\"line\"><span class=\"keyword\">var</span> objBase = <span class=\"keyword\">new</span> Base();</div><div class=\"line\">objBase.showName();</div><div class=\"line\">objBase.sayHello();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objBase);</div><div class=\"line\"><span class=\"keyword\">var</span> objSub = <span class=\"keyword\">new</span> Sub();</div><div class=\"line\">objSub.showName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objSub);</div></pre></td></tr></table></figure></p>\n<p>我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过<code>util.inherits</code> 实现继承。运行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">base </div><div class=\"line\">Hello base </div><div class=\"line\">&#123; name: &apos;base&apos;, base: 1991, sayHello: [Function] &#125; </div><div class=\"line\">sub </div><div class=\"line\">&#123; name: &apos;sub&apos; &#125;</div></pre></td></tr></table></figure></p>\n<p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.</p>\n<h4 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h4><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。<br>-<code>showHidden</code>//是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>-<code>depth</code>//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。<br>-<code>colors</code>//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。<br>特别要指出的是，<code>util.inspect</code> 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'byvoid'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj,<span class=\"literal\">true</span>));</div><div class=\"line\"><span class=\"comment\">//运行结果是： </span></div><div class=\"line\">Person &#123; <span class=\"attr\">name</span>: <span class=\"string\">'byvoid'</span>, <span class=\"attr\">toString</span>: [<span class=\"built_in\">Function</span>] &#125;</div><div class=\"line\">Person &#123;</div><div class=\"line\">  name: <span class=\"string\">'byvoid'</span>,</div><div class=\"line\">  toString:</div><div class=\"line\">   &#123; [<span class=\"built_in\">Function</span>]</div><div class=\"line\">     [length]: <span class=\"number\">0</span>,</div><div class=\"line\">     [name]: <span class=\"string\">''</span>,</div><div class=\"line\">     [<span class=\"built_in\">arguments</span>]: <span class=\"literal\">null</span>,</div><div class=\"line\">     [caller]: <span class=\"literal\">null</span>,</div><div class=\"line\">     [prototype]: &#123; [<span class=\"keyword\">constructor</span>]: [Circular] &#125; </div><div class=\"line\">  &#125; &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isArray\"><a href=\"#util-isArray\" class=\"headerlink\" title=\"util.isArray\"></a>util.isArray</h4><p><code>util.isArray(object)</code>//如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isArray([]);<span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>);<span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isRegExp\"><a href=\"#util-isRegExp\" class=\"headerlink\" title=\"util.isRegExp\"></a>util.isRegExp</h4><p><code>util.isRegExp(object)</code>//如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isRegExp(<span class=\"regexp\">/some regexp/</span>);<span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'another regexp'</span>));<span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isDate\"><a href=\"#util-isDate\" class=\"headerlink\" title=\"util.isDate\"></a>util.isDate</h4><p><code>util.isDate(object)</code>// 如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isDate(<span class=\"built_in\">Date</span>());<span class=\"comment\">// false (without 'new' returns a String)</span></div><div class=\"line\">util.isDate(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isError\"><a href=\"#util-isError\" class=\"headerlink\" title=\"util.isError\"></a>util.isError</h4><p><code>util.isError(object)</code>// 如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isError(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>, <span class=\"attr\">message</span>: <span class=\"string\">'an error occurred'</span> &#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"10、Node-js-常用工具\"><a href=\"#10、Node-js-常用工具\" class=\"headerlink\" title=\"10、Node.js 常用工具\"></a>10、Node.js 常用工具</h3><p><code>util</code> 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br>","more":"</p>\n<h4 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h4><p><code>util.inherits(constructor, superConstructor)</code>//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。<br>在这里我们只介绍<code>util.inherits</code> 的用法，示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'base'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = <span class=\"number\">1991</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125; </div><div class=\"line\">Base.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'sub'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Sub, Base);</div><div class=\"line\"><span class=\"keyword\">var</span> objBase = <span class=\"keyword\">new</span> Base();</div><div class=\"line\">objBase.showName();</div><div class=\"line\">objBase.sayHello();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objBase);</div><div class=\"line\"><span class=\"keyword\">var</span> objSub = <span class=\"keyword\">new</span> Sub();</div><div class=\"line\">objSub.showName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objSub);</div></pre></td></tr></table></figure></p>\n<p>我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过<code>util.inherits</code> 实现继承。运行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">base </div><div class=\"line\">Hello base </div><div class=\"line\">&#123; name: &apos;base&apos;, base: 1991, sayHello: [Function] &#125; </div><div class=\"line\">sub </div><div class=\"line\">&#123; name: &apos;sub&apos; &#125;</div></pre></td></tr></table></figure></p>\n<p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.</p>\n<h4 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h4><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。<br>-<code>showHidden</code>//是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>-<code>depth</code>//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。<br>-<code>colors</code>//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。<br>特别要指出的是，<code>util.inspect</code> 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'byvoid'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj,<span class=\"literal\">true</span>));</div><div class=\"line\"><span class=\"comment\">//运行结果是： </span></div><div class=\"line\">Person &#123; <span class=\"attr\">name</span>: <span class=\"string\">'byvoid'</span>, <span class=\"attr\">toString</span>: [<span class=\"built_in\">Function</span>] &#125;</div><div class=\"line\">Person &#123;</div><div class=\"line\">  name: <span class=\"string\">'byvoid'</span>,</div><div class=\"line\">  toString:</div><div class=\"line\">   &#123; [<span class=\"built_in\">Function</span>]</div><div class=\"line\">     [length]: <span class=\"number\">0</span>,</div><div class=\"line\">     [name]: <span class=\"string\">''</span>,</div><div class=\"line\">     [<span class=\"built_in\">arguments</span>]: <span class=\"literal\">null</span>,</div><div class=\"line\">     [caller]: <span class=\"literal\">null</span>,</div><div class=\"line\">     [prototype]: &#123; [<span class=\"keyword\">constructor</span>]: [Circular] &#125; </div><div class=\"line\">  &#125; &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isArray\"><a href=\"#util-isArray\" class=\"headerlink\" title=\"util.isArray\"></a>util.isArray</h4><p><code>util.isArray(object)</code>//如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isArray([]);<span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>);<span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isRegExp\"><a href=\"#util-isRegExp\" class=\"headerlink\" title=\"util.isRegExp\"></a>util.isRegExp</h4><p><code>util.isRegExp(object)</code>//如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isRegExp(<span class=\"regexp\">/some regexp/</span>);<span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'another regexp'</span>));<span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isDate\"><a href=\"#util-isDate\" class=\"headerlink\" title=\"util.isDate\"></a>util.isDate</h4><p><code>util.isDate(object)</code>// 如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isDate(<span class=\"built_in\">Date</span>());<span class=\"comment\">// false (without 'new' returns a String)</span></div><div class=\"line\">util.isDate(&#123;&#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isError\"><a href=\"#util-isError\" class=\"headerlink\" title=\"util.isError\"></a>util.isError</h4><p><code>util.isError(object)</code>// 如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());<span class=\"comment\">// true</span></div><div class=\"line\">util.isError(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>, <span class=\"attr\">message</span>: <span class=\"string\">'an error occurred'</span> &#125;);<span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>"},{"title":"Node.js 文件系统(11)","date":"2016-06-29T05:35:20.000Z","_content":"\n\n### 11、Node.js 文件系统\nNode.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：\n``` javascript\n  var fs = require(\"fs\");\n  //读取文件内容\n  fs.readFile(filename, [options], callback)//异步读取文件内容。\n  fs.readFileSync(filename, [options])//同步读取文件内容。\n```\n建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。\n<!-- more -->\n#### 打开文件\n`fs.open(path, flags, [mode], callback)`//异步打开文件。\n    path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。\nflags参数描述：\n1  `r` //以读取模式打开文件。如果文件不存在抛出异常。\n2  `r+` //以读写模式打开文件。如果文件不存在抛出异常。\n3  `rs` //以同步的方式读取文件。\n4  `rs+` //以同步的方式读取和写入文件。\n5  `w` //以写入模式打开文件，如果文件不存在则创建。\n6  `wx` //类似 'w'，但是如果文件路径存在，则文件写入失败。\n7  `w+` //以读写模式打开文件，如果文件不存在则创建。\n8  `wx+` //类似 'w+'， 但是如果文件路径存在，则文件读写失败。\n9  `a` //以追加模式打开文件，如果文件不存在则创建。\n10  `ax` //类似 'a'， 但是如果文件路径存在，则文件追加失败。\n11  `a+` //以读取追加模式打开文件，如果文件不存在则创建。\n12  `ax+` //类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。\n\n#### 读取文件信息\n`fs.stat(path, callback)`//通过异步模式获取文件信息.\n    path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。\nfs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。\nstats类中方法有：\n1  `stats.isFile()`//如果是文件返回 true，否则返回 false。\n2  `stats.isDirectory()`//如果是目录返回 true，否则返回 false。\n3  `stats.isBlockDevice()`//如果是块设备返回 true，否则返回 false。\n4  `stats.isCharacterDevice()`//如果是字符设备返回 true，否则返回 false。\n5  `stats.isSymbolicLink()`//如果是软链接返回 true，否则返回 false。\n6  `stats.isFIFO()`//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。\n7  `stats.isSocket()`//如果是 Socket 返回 true，否则返回 false。\n#### 写入文件\n`fs.writeFile(filename, data, [options], callback)`//异步写入文件\n    path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,'w'；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。\n#### 读取文件\n`fs.read(fd, buffer, offset, length, position, callback)`//异步模式下使用文件描述符来读取文件。\n    fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.\n#### 关闭文件\n`fs.close(fd, callback)`//异步模式下关闭文件,该方法使用了文件描述符来读取文件。\n    fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。\n#### 截取文件\n`fs.ftruncate(fd, len, callback)`//异步模式下截取文件,该方法使用了文件描述符来读取文件。\n    fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。\n#### 删除文件\n`fs.unlink(path, callback)`\n    path - 文件路径; callback - 回调函数，没有参数。\n#### 创建目录\n`fs.mkdir(path[, mode], callback)`\n    path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。\n#### 读取目录\n`fs.readdir(path, callback)`\n    path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。\n#### 文件模块方法参考手册\n1  `fs.rename(oldPath, newPath, callback)`//异步 rename().回调函数没有参数，但可能抛出异常。\n2  `fs.ftruncate(fd, len, callback)`//异步 ftruncate().回调函数没有参数，但可能抛出异常。\n3  `fs.ftruncateSync(fd, len)`//同步 ftruncate()\n4  `fs.truncate(path, len, callback)`//异步 truncate().回调函数没有参数，但可能抛出异常。\n5  `fs.truncateSync(path, len)`//同步 truncate()\n6  `fs.chown(path, uid, gid, callback)`//异步 chown().回调函数没有参数，但可能抛出异常。\n7  `fs.chownSync(path, uid, gid)`//同步 chown()\n8  `fs.fchown(fd, uid, gid, callback)`//异步 fchown().回调函数没有参数，但可能抛出异常。\n9  `fs.fchownSync(fd, uid, gid)`//同步 fchown()\n10  `fs.lchown(path, uid, gid, callback)`//异步 lchown().回调函数没有参数，但可能抛出异常。\n11  `fs.lchownSync(path, uid, gid)`//同步 lchown()\n12  `fs.chmod(path, mode, callback)`//异步 chmod().回调函数没有参数，但可能抛出异常。\n13  `fs.chmodSync(path, mode)`//同步 chmod().\n14  `fs.fchmod(fd, mode, callback)`//异步 fchmod().回调函数没有参数，但可能抛出异常。\n15  `fs.fchmodSync(fd, mode)`//同步 fchmod().\n16  `fs.lchmod(path, mode, callback)`//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.\n17  `fs.lchmodSync(path, mode)`//同步 lchmod().\n18  `fs.stat(path, callback)`//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n19  `fs.lstat(path, callback)`//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n20  `fs.fstat(fd, callback)`//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n21  `fs.statSync(path)`//同步 stat(). 返回 fs.Stats 的实例。\n22  `fs.lstatSync(path)`//同步 lstat(). 返回 fs.Stats 的实例。\n23  `fs.fstatSync(fd)`//同步 fstat(). 返回 fs.Stats 的实例。\n24  `fs.link(srcpath, dstpath, callback)`//异步 link().回调函数没有参数，但可能抛出异常。\n25  `fs.linkSync(srcpath, dstpath)`//同步 link().\n26  `fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 'dir', 'file', 或 'junction' (默认为 'file') 。\n27  `fs.symlinkSync(srcpath, dstpath[, type])`//同步 symlink().\n28  `fs.readlink(path, callback)`//异步 readlink(). 回调函数有两个参数 err, linkString。\n29  `fs.realpath(path[, cache], callback)`//异步 realpath(). 回调函数有两个参数 err, resolvedPath。\n30  `fs.realpathSync(path[, cache])`//同步 realpath()。返回绝对路径。\n31  `fs.unlink(path, callback)`//异步 unlink().回调函数没有参数，但可能抛出异常。\n32  `fs.unlinkSync(path)`//同步 unlink().\n33  `fs.rmdir(path, callback)`//异步 rmdir().回调函数没有参数，但可能抛出异常。\n34  `fs.rmdirSync(path)`//同步 rmdir().\n35  `fs.mkdir(path[, mode], callback)`//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.\n36  `fs.mkdirSync(path[, mode])`//同步 mkdir().\n37  `fs.readdir(path, callback)`//异步 readdir(3). 读取目录的内容。\n38  `fs.readdirSync(path)`//同步 readdir().返回文件数组列表。\n39  `fs.close(fd, callback)`//异步 close().回调函数没有参数，但可能抛出异常。\n40  `fs.closeSync(fd)`//同步 close().\n41  `fs.open(path, flags[, mode], callback)`//异步打开文件。\n42  `fs.openSync(path, flags[, mode])`//同步 version of fs.open().\n43  `fs.utimes(path, atime, mtime, callback)\n44  `fs.utimesSync(path, atime, mtime)`//修改文件时间戳，文件通过指定的文件路径。\n45  `fs.futimes(fd, atime, mtime, callback)\n46  `fs.futimesSync(fd, atime, mtime)`//修改文件时间戳，通过文件描述符指定。\n47  `fs.fsync(fd, callback)`//异步 fsync.回调函数没有参数，但可能抛出异常。\n48  `fs.fsyncSync(fd)`//同步 fsync.\n49  `fs.write(fd, buffer, offset, length[, position], callback)`//将缓冲区内容写入到通过文件描述符指定的文件。\n50  `fs.write(fd, data[, position[, encoding]], callback)`//通过文件描述符 fd 写入文件内容。\n51  `fs.writeSync(fd, buffer, offset, length[, position])`//同步版的 fs.write()。\n52  `fs.writeSync(fd, data[, position[, encoding]])`//同步版的 fs.write().\n53  `fs.read(fd, buffer, offset, length, position, callback)`//通过文件描述符 fd 读取文件内容。\n54  `fs.readSync(fd, buffer, offset, length, position)`//同步版的 fs.read.\n55  `fs.readFile(filename[, options], callback)`//异步读取文件内容。\n56  `fs.readFileSync(filename[, options])\n57  `fs.writeFile(filename, data[, options], callback)\n异步写入`文件内容。\n58  `fs.writeFileSync(filename, data[, options])`//同步版的 fs.writeFile。\n59  `fs.appendFile(filename, data[, options], callback)`//异步追加文件内容。\n60  `fs.appendFileSync(filename, data[, options])`//The 同步 version of fs.appendFile.\n61  `fs.watchFile(filename[, options], listener)`//查看文件的修改。\n62  `fs.unwatchFile(filename[, listener])`//停止查看 filename 的修改。\n63  `fs.watch(filename[, options][, listener])`//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。\n64  `fs.exists(path, callback)`//检测给定的路径是否存在。\n65  `fs.existsSync(path)`//同步版的 fs.exists.\n66  `fs.access(path[, mode], callback)`//测试指定路径用户权限。\n67  `fs.accessSync(path[, mode])`//同步版的 fs.access。\n68  `fs.createReadStream(path[, options])`//返回ReadStream 对象。\n69  `fs.createWriteStream(path[, options])`//返回 WriteStream 对象。\n70  `fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。\n\n","source":"_posts/Node.js 文件系统.md","raw":"---\ntitle: Node.js 文件系统(11)\ndate: 2016-06-29 13:35:20\ntags: node\ncategories: nodeJS学习笔记\n---\n\n\n### 11、Node.js 文件系统\nNode.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：\n``` javascript\n  var fs = require(\"fs\");\n  //读取文件内容\n  fs.readFile(filename, [options], callback)//异步读取文件内容。\n  fs.readFileSync(filename, [options])//同步读取文件内容。\n```\n建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。\n<!-- more -->\n#### 打开文件\n`fs.open(path, flags, [mode], callback)`//异步打开文件。\n    path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。\nflags参数描述：\n1  `r` //以读取模式打开文件。如果文件不存在抛出异常。\n2  `r+` //以读写模式打开文件。如果文件不存在抛出异常。\n3  `rs` //以同步的方式读取文件。\n4  `rs+` //以同步的方式读取和写入文件。\n5  `w` //以写入模式打开文件，如果文件不存在则创建。\n6  `wx` //类似 'w'，但是如果文件路径存在，则文件写入失败。\n7  `w+` //以读写模式打开文件，如果文件不存在则创建。\n8  `wx+` //类似 'w+'， 但是如果文件路径存在，则文件读写失败。\n9  `a` //以追加模式打开文件，如果文件不存在则创建。\n10  `ax` //类似 'a'， 但是如果文件路径存在，则文件追加失败。\n11  `a+` //以读取追加模式打开文件，如果文件不存在则创建。\n12  `ax+` //类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。\n\n#### 读取文件信息\n`fs.stat(path, callback)`//通过异步模式获取文件信息.\n    path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。\nfs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。\nstats类中方法有：\n1  `stats.isFile()`//如果是文件返回 true，否则返回 false。\n2  `stats.isDirectory()`//如果是目录返回 true，否则返回 false。\n3  `stats.isBlockDevice()`//如果是块设备返回 true，否则返回 false。\n4  `stats.isCharacterDevice()`//如果是字符设备返回 true，否则返回 false。\n5  `stats.isSymbolicLink()`//如果是软链接返回 true，否则返回 false。\n6  `stats.isFIFO()`//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。\n7  `stats.isSocket()`//如果是 Socket 返回 true，否则返回 false。\n#### 写入文件\n`fs.writeFile(filename, data, [options], callback)`//异步写入文件\n    path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,'w'；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。\n#### 读取文件\n`fs.read(fd, buffer, offset, length, position, callback)`//异步模式下使用文件描述符来读取文件。\n    fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.\n#### 关闭文件\n`fs.close(fd, callback)`//异步模式下关闭文件,该方法使用了文件描述符来读取文件。\n    fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。\n#### 截取文件\n`fs.ftruncate(fd, len, callback)`//异步模式下截取文件,该方法使用了文件描述符来读取文件。\n    fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。\n#### 删除文件\n`fs.unlink(path, callback)`\n    path - 文件路径; callback - 回调函数，没有参数。\n#### 创建目录\n`fs.mkdir(path[, mode], callback)`\n    path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。\n#### 读取目录\n`fs.readdir(path, callback)`\n    path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。\n#### 文件模块方法参考手册\n1  `fs.rename(oldPath, newPath, callback)`//异步 rename().回调函数没有参数，但可能抛出异常。\n2  `fs.ftruncate(fd, len, callback)`//异步 ftruncate().回调函数没有参数，但可能抛出异常。\n3  `fs.ftruncateSync(fd, len)`//同步 ftruncate()\n4  `fs.truncate(path, len, callback)`//异步 truncate().回调函数没有参数，但可能抛出异常。\n5  `fs.truncateSync(path, len)`//同步 truncate()\n6  `fs.chown(path, uid, gid, callback)`//异步 chown().回调函数没有参数，但可能抛出异常。\n7  `fs.chownSync(path, uid, gid)`//同步 chown()\n8  `fs.fchown(fd, uid, gid, callback)`//异步 fchown().回调函数没有参数，但可能抛出异常。\n9  `fs.fchownSync(fd, uid, gid)`//同步 fchown()\n10  `fs.lchown(path, uid, gid, callback)`//异步 lchown().回调函数没有参数，但可能抛出异常。\n11  `fs.lchownSync(path, uid, gid)`//同步 lchown()\n12  `fs.chmod(path, mode, callback)`//异步 chmod().回调函数没有参数，但可能抛出异常。\n13  `fs.chmodSync(path, mode)`//同步 chmod().\n14  `fs.fchmod(fd, mode, callback)`//异步 fchmod().回调函数没有参数，但可能抛出异常。\n15  `fs.fchmodSync(fd, mode)`//同步 fchmod().\n16  `fs.lchmod(path, mode, callback)`//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.\n17  `fs.lchmodSync(path, mode)`//同步 lchmod().\n18  `fs.stat(path, callback)`//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n19  `fs.lstat(path, callback)`//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n20  `fs.fstat(fd, callback)`//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。\n21  `fs.statSync(path)`//同步 stat(). 返回 fs.Stats 的实例。\n22  `fs.lstatSync(path)`//同步 lstat(). 返回 fs.Stats 的实例。\n23  `fs.fstatSync(fd)`//同步 fstat(). 返回 fs.Stats 的实例。\n24  `fs.link(srcpath, dstpath, callback)`//异步 link().回调函数没有参数，但可能抛出异常。\n25  `fs.linkSync(srcpath, dstpath)`//同步 link().\n26  `fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 'dir', 'file', 或 'junction' (默认为 'file') 。\n27  `fs.symlinkSync(srcpath, dstpath[, type])`//同步 symlink().\n28  `fs.readlink(path, callback)`//异步 readlink(). 回调函数有两个参数 err, linkString。\n29  `fs.realpath(path[, cache], callback)`//异步 realpath(). 回调函数有两个参数 err, resolvedPath。\n30  `fs.realpathSync(path[, cache])`//同步 realpath()。返回绝对路径。\n31  `fs.unlink(path, callback)`//异步 unlink().回调函数没有参数，但可能抛出异常。\n32  `fs.unlinkSync(path)`//同步 unlink().\n33  `fs.rmdir(path, callback)`//异步 rmdir().回调函数没有参数，但可能抛出异常。\n34  `fs.rmdirSync(path)`//同步 rmdir().\n35  `fs.mkdir(path[, mode], callback)`//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.\n36  `fs.mkdirSync(path[, mode])`//同步 mkdir().\n37  `fs.readdir(path, callback)`//异步 readdir(3). 读取目录的内容。\n38  `fs.readdirSync(path)`//同步 readdir().返回文件数组列表。\n39  `fs.close(fd, callback)`//异步 close().回调函数没有参数，但可能抛出异常。\n40  `fs.closeSync(fd)`//同步 close().\n41  `fs.open(path, flags[, mode], callback)`//异步打开文件。\n42  `fs.openSync(path, flags[, mode])`//同步 version of fs.open().\n43  `fs.utimes(path, atime, mtime, callback)\n44  `fs.utimesSync(path, atime, mtime)`//修改文件时间戳，文件通过指定的文件路径。\n45  `fs.futimes(fd, atime, mtime, callback)\n46  `fs.futimesSync(fd, atime, mtime)`//修改文件时间戳，通过文件描述符指定。\n47  `fs.fsync(fd, callback)`//异步 fsync.回调函数没有参数，但可能抛出异常。\n48  `fs.fsyncSync(fd)`//同步 fsync.\n49  `fs.write(fd, buffer, offset, length[, position], callback)`//将缓冲区内容写入到通过文件描述符指定的文件。\n50  `fs.write(fd, data[, position[, encoding]], callback)`//通过文件描述符 fd 写入文件内容。\n51  `fs.writeSync(fd, buffer, offset, length[, position])`//同步版的 fs.write()。\n52  `fs.writeSync(fd, data[, position[, encoding]])`//同步版的 fs.write().\n53  `fs.read(fd, buffer, offset, length, position, callback)`//通过文件描述符 fd 读取文件内容。\n54  `fs.readSync(fd, buffer, offset, length, position)`//同步版的 fs.read.\n55  `fs.readFile(filename[, options], callback)`//异步读取文件内容。\n56  `fs.readFileSync(filename[, options])\n57  `fs.writeFile(filename, data[, options], callback)\n异步写入`文件内容。\n58  `fs.writeFileSync(filename, data[, options])`//同步版的 fs.writeFile。\n59  `fs.appendFile(filename, data[, options], callback)`//异步追加文件内容。\n60  `fs.appendFileSync(filename, data[, options])`//The 同步 version of fs.appendFile.\n61  `fs.watchFile(filename[, options], listener)`//查看文件的修改。\n62  `fs.unwatchFile(filename[, listener])`//停止查看 filename 的修改。\n63  `fs.watch(filename[, options][, listener])`//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。\n64  `fs.exists(path, callback)`//检测给定的路径是否存在。\n65  `fs.existsSync(path)`//同步版的 fs.exists.\n66  `fs.access(path[, mode], callback)`//测试指定路径用户权限。\n67  `fs.accessSync(path[, mode])`//同步版的 fs.access。\n68  `fs.createReadStream(path[, options])`//返回ReadStream 对象。\n69  `fs.createWriteStream(path[, options])`//返回 WriteStream 对象。\n70  `fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。\n\n","slug":"Node.js 文件系统","published":1,"updated":"2017-07-30T07:21:47.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvv4001sv0ui2lpzc1dv","content":"<h3 id=\"11、Node-js-文件系统\"><a href=\"#11、Node-js-文件系统\" class=\"headerlink\" title=\"11、Node.js 文件系统\"></a>11、Node.js 文件系统</h3><p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"comment\">//读取文件内容</span></div><div class=\"line\">fs.readFile(filename, [options], callback)<span class=\"comment\">//异步读取文件内容。</span></div><div class=\"line\">fs.readFileSync(filename, [options])<span class=\"comment\">//同步读取文件内容。</span></div></pre></td></tr></table></figure></p>\n<p>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。<br><a id=\"more\"></a></p>\n<h4 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h4><p><code>fs.open(path, flags, [mode], callback)</code>//异步打开文件。<br>    path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。<br>flags参数描述：<br>1  <code>r</code> //以读取模式打开文件。如果文件不存在抛出异常。<br>2  <code>r+</code> //以读写模式打开文件。如果文件不存在抛出异常。<br>3  <code>rs</code> //以同步的方式读取文件。<br>4  <code>rs+</code> //以同步的方式读取和写入文件。<br>5  <code>w</code> //以写入模式打开文件，如果文件不存在则创建。<br>6  <code>wx</code> //类似 ‘w’，但是如果文件路径存在，则文件写入失败。<br>7  <code>w+</code> //以读写模式打开文件，如果文件不存在则创建。<br>8  <code>wx+</code> //类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。<br>9  <code>a</code> //以追加模式打开文件，如果文件不存在则创建。<br>10  <code>ax</code> //类似 ‘a’， 但是如果文件路径存在，则文件追加失败。<br>11  <code>a+</code> //以读取追加模式打开文件，如果文件不存在则创建。<br>12  <code>ax+</code> //类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</p>\n<h4 id=\"读取文件信息\"><a href=\"#读取文件信息\" class=\"headerlink\" title=\"读取文件信息\"></a>读取文件信息</h4><p><code>fs.stat(path, callback)</code>//通过异步模式获取文件信息.<br>    path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。<br>fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。<br>stats类中方法有：<br>1  <code>stats.isFile()</code>//如果是文件返回 true，否则返回 false。<br>2  <code>stats.isDirectory()</code>//如果是目录返回 true，否则返回 false。<br>3  <code>stats.isBlockDevice()</code>//如果是块设备返回 true，否则返回 false。<br>4  <code>stats.isCharacterDevice()</code>//如果是字符设备返回 true，否则返回 false。<br>5  <code>stats.isSymbolicLink()</code>//如果是软链接返回 true，否则返回 false。<br>6  <code>stats.isFIFO()</code>//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。<br>7  <code>stats.isSocket()</code>//如果是 Socket 返回 true，否则返回 false。</p>\n<h4 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h4><p><code>fs.writeFile(filename, data, [options], callback)</code>//异步写入文件<br>    path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,’w’；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。</p>\n<h4 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h4><p><code>fs.read(fd, buffer, offset, length, position, callback)</code>//异步模式下使用文件描述符来读取文件。<br>    fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.</p>\n<h4 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h4><p><code>fs.close(fd, callback)</code>//异步模式下关闭文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。</p>\n<h4 id=\"截取文件\"><a href=\"#截取文件\" class=\"headerlink\" title=\"截取文件\"></a>截取文件</h4><p><code>fs.ftruncate(fd, len, callback)</code>//异步模式下截取文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p><code>fs.unlink(path, callback)</code><br>    path - 文件路径; callback - 回调函数，没有参数。</p>\n<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><p><code>fs.mkdir(path[, mode], callback)</code><br>    path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。</p>\n<h4 id=\"读取目录\"><a href=\"#读取目录\" class=\"headerlink\" title=\"读取目录\"></a>读取目录</h4><p><code>fs.readdir(path, callback)</code><br>    path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。</p>\n<h4 id=\"文件模块方法参考手册\"><a href=\"#文件模块方法参考手册\" class=\"headerlink\" title=\"文件模块方法参考手册\"></a>文件模块方法参考手册</h4><p>1  <code>fs.rename(oldPath, newPath, callback)</code>//异步 rename().回调函数没有参数，但可能抛出异常。<br>2  <code>fs.ftruncate(fd, len, callback)</code>//异步 ftruncate().回调函数没有参数，但可能抛出异常。<br>3  <code>fs.ftruncateSync(fd, len)</code>//同步 ftruncate()<br>4  <code>fs.truncate(path, len, callback)</code>//异步 truncate().回调函数没有参数，但可能抛出异常。<br>5  <code>fs.truncateSync(path, len)</code>//同步 truncate()<br>6  <code>fs.chown(path, uid, gid, callback)</code>//异步 chown().回调函数没有参数，但可能抛出异常。<br>7  <code>fs.chownSync(path, uid, gid)</code>//同步 chown()<br>8  <code>fs.fchown(fd, uid, gid, callback)</code>//异步 fchown().回调函数没有参数，但可能抛出异常。<br>9  <code>fs.fchownSync(fd, uid, gid)</code>//同步 fchown()<br>10  <code>fs.lchown(path, uid, gid, callback)</code>//异步 lchown().回调函数没有参数，但可能抛出异常。<br>11  <code>fs.lchownSync(path, uid, gid)</code>//同步 lchown()<br>12  <code>fs.chmod(path, mode, callback)</code>//异步 chmod().回调函数没有参数，但可能抛出异常。<br>13  <code>fs.chmodSync(path, mode)</code>//同步 chmod().<br>14  <code>fs.fchmod(fd, mode, callback)</code>//异步 fchmod().回调函数没有参数，但可能抛出异常。<br>15  <code>fs.fchmodSync(fd, mode)</code>//同步 fchmod().<br>16  <code>fs.lchmod(path, mode, callback)</code>//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.<br>17  <code>fs.lchmodSync(path, mode)</code>//同步 lchmod().<br>18  <code>fs.stat(path, callback)</code>//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>19  <code>fs.lstat(path, callback)</code>//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>20  <code>fs.fstat(fd, callback)</code>//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>21  <code>fs.statSync(path)</code>//同步 stat(). 返回 fs.Stats 的实例。<br>22  <code>fs.lstatSync(path)</code>//同步 lstat(). 返回 fs.Stats 的实例。<br>23  <code>fs.fstatSync(fd)</code>//同步 fstat(). 返回 fs.Stats 的实例。<br>24  <code>fs.link(srcpath, dstpath, callback)</code>//异步 link().回调函数没有参数，但可能抛出异常。<br>25  <code>fs.linkSync(srcpath, dstpath)</code>//同步 link().<br>26  <code>fs.symlink(srcpath, dstpath[, type], callback)</code>//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 ‘dir’, ‘file’, 或 ‘junction’ (默认为 ‘file’) 。<br>27  <code>fs.symlinkSync(srcpath, dstpath[, type])</code>//同步 symlink().<br>28  <code>fs.readlink(path, callback)</code>//异步 readlink(). 回调函数有两个参数 err, linkString。<br>29  <code>fs.realpath(path[, cache], callback)</code>//异步 realpath(). 回调函数有两个参数 err, resolvedPath。<br>30  <code>fs.realpathSync(path[, cache])</code>//同步 realpath()。返回绝对路径。<br>31  <code>fs.unlink(path, callback)</code>//异步 unlink().回调函数没有参数，但可能抛出异常。<br>32  <code>fs.unlinkSync(path)</code>//同步 unlink().<br>33  <code>fs.rmdir(path, callback)</code>//异步 rmdir().回调函数没有参数，但可能抛出异常。<br>34  <code>fs.rmdirSync(path)</code>//同步 rmdir().<br>35  <code>fs.mkdir(path[, mode], callback)</code>//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.<br>36  <code>fs.mkdirSync(path[, mode])</code>//同步 mkdir().<br>37  <code>fs.readdir(path, callback)</code>//异步 readdir(3). 读取目录的内容。<br>38  <code>fs.readdirSync(path)</code>//同步 readdir().返回文件数组列表。<br>39  <code>fs.close(fd, callback)</code>//异步 close().回调函数没有参数，但可能抛出异常。<br>40  <code>fs.closeSync(fd)</code>//同步 close().<br>41  <code>fs.open(path, flags[, mode], callback)</code>//异步打开文件。<br>42  <code>fs.openSync(path, flags[, mode])</code>//同步 version of fs.open().<br>43  <code>fs.utimes(path, atime, mtime, callback)\n44</code>fs.utimesSync(path, atime, mtime)<code>//修改文件时间戳，文件通过指定的文件路径。\n45</code>fs.futimes(fd, atime, mtime, callback)<br>46  <code>fs.futimesSync(fd, atime, mtime)</code>//修改文件时间戳，通过文件描述符指定。<br>47  <code>fs.fsync(fd, callback)</code>//异步 fsync.回调函数没有参数，但可能抛出异常。<br>48  <code>fs.fsyncSync(fd)</code>//同步 fsync.<br>49  <code>fs.write(fd, buffer, offset, length[, position], callback)</code>//将缓冲区内容写入到通过文件描述符指定的文件。<br>50  <code>fs.write(fd, data[, position[, encoding]], callback)</code>//通过文件描述符 fd 写入文件内容。<br>51  <code>fs.writeSync(fd, buffer, offset, length[, position])</code>//同步版的 fs.write()。<br>52  <code>fs.writeSync(fd, data[, position[, encoding]])</code>//同步版的 fs.write().<br>53  <code>fs.read(fd, buffer, offset, length, position, callback)</code>//通过文件描述符 fd 读取文件内容。<br>54  <code>fs.readSync(fd, buffer, offset, length, position)</code>//同步版的 fs.read.<br>55  <code>fs.readFile(filename[, options], callback)</code>//异步读取文件内容。<br>56  <code>fs.readFileSync(filename[, options])\n57</code>fs.writeFile(filename, data[, options], callback)<br>异步写入<code>文件内容。\n58</code>fs.writeFileSync(filename, data[, options])<code>//同步版的 fs.writeFile。\n59</code>fs.appendFile(filename, data[, options], callback)<code>//异步追加文件内容。\n60</code>fs.appendFileSync(filename, data[, options])<code>//The 同步 version of fs.appendFile.\n61</code>fs.watchFile(filename[, options], listener)<code>//查看文件的修改。\n62</code>fs.unwatchFile(filename[, listener])<code>//停止查看 filename 的修改。\n63</code>fs.watch(filename[, options][, listener])<code>//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。\n64</code>fs.exists(path, callback)<code>//检测给定的路径是否存在。\n65</code>fs.existsSync(path)<code>//同步版的 fs.exists.\n66</code>fs.access(path[, mode], callback)<code>//测试指定路径用户权限。\n67</code>fs.accessSync(path[, mode])<code>//同步版的 fs.access。\n68</code>fs.createReadStream(path[, options])<code>//返回ReadStream 对象。\n69</code>fs.createWriteStream(path[, options])<code>//返回 WriteStream 对象。\n70</code>fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"11、Node-js-文件系统\"><a href=\"#11、Node-js-文件系统\" class=\"headerlink\" title=\"11、Node.js 文件系统\"></a>11、Node.js 文件系统</h3><p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"comment\">//读取文件内容</span></div><div class=\"line\">fs.readFile(filename, [options], callback)<span class=\"comment\">//异步读取文件内容。</span></div><div class=\"line\">fs.readFileSync(filename, [options])<span class=\"comment\">//同步读取文件内容。</span></div></pre></td></tr></table></figure></p>\n<p>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。<br>","more":"</p>\n<h4 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h4><p><code>fs.open(path, flags, [mode], callback)</code>//异步打开文件。<br>    path-文件路径；flag-文件打开行为；mode-设置文件模式(默认:0666-可读可写)；callback - 回调函数，带有两个参数如：callback(err, fd)。<br>flags参数描述：<br>1  <code>r</code> //以读取模式打开文件。如果文件不存在抛出异常。<br>2  <code>r+</code> //以读写模式打开文件。如果文件不存在抛出异常。<br>3  <code>rs</code> //以同步的方式读取文件。<br>4  <code>rs+</code> //以同步的方式读取和写入文件。<br>5  <code>w</code> //以写入模式打开文件，如果文件不存在则创建。<br>6  <code>wx</code> //类似 ‘w’，但是如果文件路径存在，则文件写入失败。<br>7  <code>w+</code> //以读写模式打开文件，如果文件不存在则创建。<br>8  <code>wx+</code> //类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。<br>9  <code>a</code> //以追加模式打开文件，如果文件不存在则创建。<br>10  <code>ax</code> //类似 ‘a’， 但是如果文件路径存在，则文件追加失败。<br>11  <code>a+</code> //以读取追加模式打开文件，如果文件不存在则创建。<br>12  <code>ax+</code> //类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</p>\n<h4 id=\"读取文件信息\"><a href=\"#读取文件信息\" class=\"headerlink\" title=\"读取文件信息\"></a>读取文件信息</h4><p><code>fs.stat(path, callback)</code>//通过异步模式获取文件信息.<br>    path - 文件路径。callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。<br>fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。<br>stats类中方法有：<br>1  <code>stats.isFile()</code>//如果是文件返回 true，否则返回 false。<br>2  <code>stats.isDirectory()</code>//如果是目录返回 true，否则返回 false。<br>3  <code>stats.isBlockDevice()</code>//如果是块设备返回 true，否则返回 false。<br>4  <code>stats.isCharacterDevice()</code>//如果是字符设备返回 true，否则返回 false。<br>5  <code>stats.isSymbolicLink()</code>//如果是软链接返回 true，否则返回 false。<br>6  <code>stats.isFIFO()</code>//如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。<br>7  <code>stats.isSocket()</code>//如果是 Socket 返回 true，否则返回 false。</p>\n<h4 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h4><p><code>fs.writeFile(filename, data, [options], callback)</code>//异步写入文件<br>    path-文件路径；data-要写入的数据，可以是String或Buffer(流)对象；options-该参数是一个对象，包含{encoding,mode,flag}默认utf8 ,0666,’w’；callback-回调函数，只包含错误信息参数(err),在写入失败是返回。</p>\n<h4 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h4><p><code>fs.read(fd, buffer, offset, length, position, callback)</code>//异步模式下使用文件描述符来读取文件。<br>    fd-通过fs.open()方法返回文件描述符；buffer-数据写入的缓冲区；offset-缓冲区写入的写入偏移量；length-要从文件中读取的字节数；position-文件读取的起始位置，值为null则会从当前文件指针位置读取；callback-回调函数，有三个参数err错误信息,bytesRead字节数,buffer缓冲区对象.</p>\n<h4 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h4><p><code>fs.close(fd, callback)</code>//异步模式下关闭文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; callback - 回调函数，没有参数。</p>\n<h4 id=\"截取文件\"><a href=\"#截取文件\" class=\"headerlink\" title=\"截取文件\"></a>截取文件</h4><p><code>fs.ftruncate(fd, len, callback)</code>//异步模式下截取文件,该方法使用了文件描述符来读取文件。<br>    fd - 通过 fs.open() 方法返回的文件描述符; len - 文件内容截取的长度; callback - 回调函数，没有参数。</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p><code>fs.unlink(path, callback)</code><br>    path - 文件路径; callback - 回调函数，没有参数。</p>\n<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><p><code>fs.mkdir(path[, mode], callback)</code><br>    path - 文件路径; mode - 设置目录权限，默认为 0777; callback - 回调函数，没有参数。</p>\n<h4 id=\"读取目录\"><a href=\"#读取目录\" class=\"headerlink\" title=\"读取目录\"></a>读取目录</h4><p><code>fs.readdir(path, callback)</code><br>    path - 文件路径; callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。</p>\n<h4 id=\"文件模块方法参考手册\"><a href=\"#文件模块方法参考手册\" class=\"headerlink\" title=\"文件模块方法参考手册\"></a>文件模块方法参考手册</h4><p>1  <code>fs.rename(oldPath, newPath, callback)</code>//异步 rename().回调函数没有参数，但可能抛出异常。<br>2  <code>fs.ftruncate(fd, len, callback)</code>//异步 ftruncate().回调函数没有参数，但可能抛出异常。<br>3  <code>fs.ftruncateSync(fd, len)</code>//同步 ftruncate()<br>4  <code>fs.truncate(path, len, callback)</code>//异步 truncate().回调函数没有参数，但可能抛出异常。<br>5  <code>fs.truncateSync(path, len)</code>//同步 truncate()<br>6  <code>fs.chown(path, uid, gid, callback)</code>//异步 chown().回调函数没有参数，但可能抛出异常。<br>7  <code>fs.chownSync(path, uid, gid)</code>//同步 chown()<br>8  <code>fs.fchown(fd, uid, gid, callback)</code>//异步 fchown().回调函数没有参数，但可能抛出异常。<br>9  <code>fs.fchownSync(fd, uid, gid)</code>//同步 fchown()<br>10  <code>fs.lchown(path, uid, gid, callback)</code>//异步 lchown().回调函数没有参数，但可能抛出异常。<br>11  <code>fs.lchownSync(path, uid, gid)</code>//同步 lchown()<br>12  <code>fs.chmod(path, mode, callback)</code>//异步 chmod().回调函数没有参数，但可能抛出异常。<br>13  <code>fs.chmodSync(path, mode)</code>//同步 chmod().<br>14  <code>fs.fchmod(fd, mode, callback)</code>//异步 fchmod().回调函数没有参数，但可能抛出异常。<br>15  <code>fs.fchmodSync(fd, mode)</code>//同步 fchmod().<br>16  <code>fs.lchmod(path, mode, callback)</code>//异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.<br>17  <code>fs.lchmodSync(path, mode)</code>//同步 lchmod().<br>18  <code>fs.stat(path, callback)</code>//异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>19  <code>fs.lstat(path, callback)</code>//异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>20  <code>fs.fstat(fd, callback)</code>//异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。<br>21  <code>fs.statSync(path)</code>//同步 stat(). 返回 fs.Stats 的实例。<br>22  <code>fs.lstatSync(path)</code>//同步 lstat(). 返回 fs.Stats 的实例。<br>23  <code>fs.fstatSync(fd)</code>//同步 fstat(). 返回 fs.Stats 的实例。<br>24  <code>fs.link(srcpath, dstpath, callback)</code>//异步 link().回调函数没有参数，但可能抛出异常。<br>25  <code>fs.linkSync(srcpath, dstpath)</code>//同步 link().<br>26  <code>fs.symlink(srcpath, dstpath[, type], callback)</code>//异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 ‘dir’, ‘file’, 或 ‘junction’ (默认为 ‘file’) 。<br>27  <code>fs.symlinkSync(srcpath, dstpath[, type])</code>//同步 symlink().<br>28  <code>fs.readlink(path, callback)</code>//异步 readlink(). 回调函数有两个参数 err, linkString。<br>29  <code>fs.realpath(path[, cache], callback)</code>//异步 realpath(). 回调函数有两个参数 err, resolvedPath。<br>30  <code>fs.realpathSync(path[, cache])</code>//同步 realpath()。返回绝对路径。<br>31  <code>fs.unlink(path, callback)</code>//异步 unlink().回调函数没有参数，但可能抛出异常。<br>32  <code>fs.unlinkSync(path)</code>//同步 unlink().<br>33  <code>fs.rmdir(path, callback)</code>//异步 rmdir().回调函数没有参数，但可能抛出异常。<br>34  <code>fs.rmdirSync(path)</code>//同步 rmdir().<br>35  <code>fs.mkdir(path[, mode], callback)</code>//S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.<br>36  <code>fs.mkdirSync(path[, mode])</code>//同步 mkdir().<br>37  <code>fs.readdir(path, callback)</code>//异步 readdir(3). 读取目录的内容。<br>38  <code>fs.readdirSync(path)</code>//同步 readdir().返回文件数组列表。<br>39  <code>fs.close(fd, callback)</code>//异步 close().回调函数没有参数，但可能抛出异常。<br>40  <code>fs.closeSync(fd)</code>//同步 close().<br>41  <code>fs.open(path, flags[, mode], callback)</code>//异步打开文件。<br>42  <code>fs.openSync(path, flags[, mode])</code>//同步 version of fs.open().<br>43  <code>fs.utimes(path, atime, mtime, callback)\n44</code>fs.utimesSync(path, atime, mtime)<code>//修改文件时间戳，文件通过指定的文件路径。\n45</code>fs.futimes(fd, atime, mtime, callback)<br>46  <code>fs.futimesSync(fd, atime, mtime)</code>//修改文件时间戳，通过文件描述符指定。<br>47  <code>fs.fsync(fd, callback)</code>//异步 fsync.回调函数没有参数，但可能抛出异常。<br>48  <code>fs.fsyncSync(fd)</code>//同步 fsync.<br>49  <code>fs.write(fd, buffer, offset, length[, position], callback)</code>//将缓冲区内容写入到通过文件描述符指定的文件。<br>50  <code>fs.write(fd, data[, position[, encoding]], callback)</code>//通过文件描述符 fd 写入文件内容。<br>51  <code>fs.writeSync(fd, buffer, offset, length[, position])</code>//同步版的 fs.write()。<br>52  <code>fs.writeSync(fd, data[, position[, encoding]])</code>//同步版的 fs.write().<br>53  <code>fs.read(fd, buffer, offset, length, position, callback)</code>//通过文件描述符 fd 读取文件内容。<br>54  <code>fs.readSync(fd, buffer, offset, length, position)</code>//同步版的 fs.read.<br>55  <code>fs.readFile(filename[, options], callback)</code>//异步读取文件内容。<br>56  <code>fs.readFileSync(filename[, options])\n57</code>fs.writeFile(filename, data[, options], callback)<br>异步写入<code>文件内容。\n58</code>fs.writeFileSync(filename, data[, options])<code>//同步版的 fs.writeFile。\n59</code>fs.appendFile(filename, data[, options], callback)<code>//异步追加文件内容。\n60</code>fs.appendFileSync(filename, data[, options])<code>//The 同步 version of fs.appendFile.\n61</code>fs.watchFile(filename[, options], listener)<code>//查看文件的修改。\n62</code>fs.unwatchFile(filename[, listener])<code>//停止查看 filename 的修改。\n63</code>fs.watch(filename[, options][, listener])<code>//查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。\n64</code>fs.exists(path, callback)<code>//检测给定的路径是否存在。\n65</code>fs.existsSync(path)<code>//同步版的 fs.exists.\n66</code>fs.access(path[, mode], callback)<code>//测试指定路径用户权限。\n67</code>fs.accessSync(path[, mode])<code>//同步版的 fs.access。\n68</code>fs.createReadStream(path[, options])<code>//返回ReadStream 对象。\n69</code>fs.createWriteStream(path[, options])<code>//返回 WriteStream 对象。\n70</code>fs.symlink(srcpath, dstpath[, type], callback)`//异步 symlink().回调函数没有参数，但可能抛出异常。</p>"},{"title":"Node.js 路由(8)","date":"2016-06-28T10:55:08.000Z","_content":"\n### 8、Node.js 路由\n我们要为路由提供请求的`URL`和其他需要的`GET`及`POST`参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看`HTTP`请求，从中提取出请求的`URL`以及`GET/POST`参数。我们需要的所有数据都会包含在`request`对象中，该对象作为`onRequest()`回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的`Node.JS`模块，它们分别是`url`和`querystring`模块。\n<!-- more -->\n``` javascript\n                       url.parse(string).query\n                                               |\n               url.parse(string).pathname      |\n                           |                   |\n                           |                   |\n                         ------ -------------------\n    http://localhost:8888/start?foo=bar&hello=world\n                                    ---       -----\n                                     |          |\n                                     |          |\n                  querystring(string)[\"foo\"]    |\n                                                |\n                             querystring(string)[\"hello\"]\n```\n当然我们也可以用`querystring`模块来解析`POST`请求体中的参数，稍后会有演示。\n现在我们来给`onRequest()`函数加上一些逻辑，用来找出浏览器请求的`URL`路径：\n``` javascript \n  var http = require(\"http\");\n  var url = require(\"url\");\n  function start() {\n    function onRequest(request, response) {\n      var pathname = url.parse(request.url).pathname;\n      console.log(\"Request for \" + pathname + \"received.\");\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(\"Hello World\");\n      response.end();\n    }\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started.\");\n  }\n  exports.start = start;\n```\n现在我们可以来编写路由了，建立一个名为`router.js`的文件:\n``` javascript\n  function route(pathname){\n    console.log(\"About to route a request for \" + pathname);\n  }\n  exports.route = route;\n```\n在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的`start()`函数，以便将路由函数作为参数传递过去：\n``` javascript\n  var http = require(\"http\");\n  var url = require(\"url\");\n  function start() {\n    function onRequest(request, response) {\n      var pathname = url.parse(request.url).pathname;\n      console.log(\"Request for \" + pathname + \"received.\");\n      route(pathname);//路由函数\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(\"Hello World\");\n      response.end();\n    }\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started.\");\n  }\n  exports.start = start;\n```\n同时，我们会相应扩展`index.js`，使得路由函数可以被注入到服务器中：\n``` javascript\n  var server = require(\"./server\");\n  var router = require(\"./router\");\n  server.start(router.route);\n```\n现在启动应用（`node index.js`），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n``` javascript\n  node index.js\n  Request for /foo received.\n  About to route a request for /foo\n  //以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。\n```\n","source":"_posts/Node.js 路由.md","raw":"---\ntitle: Node.js 路由(8)\ndate: 2016-06-28 18:55:08\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 8、Node.js 路由\n我们要为路由提供请求的`URL`和其他需要的`GET`及`POST`参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看`HTTP`请求，从中提取出请求的`URL`以及`GET/POST`参数。我们需要的所有数据都会包含在`request`对象中，该对象作为`onRequest()`回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的`Node.JS`模块，它们分别是`url`和`querystring`模块。\n<!-- more -->\n``` javascript\n                       url.parse(string).query\n                                               |\n               url.parse(string).pathname      |\n                           |                   |\n                           |                   |\n                         ------ -------------------\n    http://localhost:8888/start?foo=bar&hello=world\n                                    ---       -----\n                                     |          |\n                                     |          |\n                  querystring(string)[\"foo\"]    |\n                                                |\n                             querystring(string)[\"hello\"]\n```\n当然我们也可以用`querystring`模块来解析`POST`请求体中的参数，稍后会有演示。\n现在我们来给`onRequest()`函数加上一些逻辑，用来找出浏览器请求的`URL`路径：\n``` javascript \n  var http = require(\"http\");\n  var url = require(\"url\");\n  function start() {\n    function onRequest(request, response) {\n      var pathname = url.parse(request.url).pathname;\n      console.log(\"Request for \" + pathname + \"received.\");\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(\"Hello World\");\n      response.end();\n    }\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started.\");\n  }\n  exports.start = start;\n```\n现在我们可以来编写路由了，建立一个名为`router.js`的文件:\n``` javascript\n  function route(pathname){\n    console.log(\"About to route a request for \" + pathname);\n  }\n  exports.route = route;\n```\n在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的`start()`函数，以便将路由函数作为参数传递过去：\n``` javascript\n  var http = require(\"http\");\n  var url = require(\"url\");\n  function start() {\n    function onRequest(request, response) {\n      var pathname = url.parse(request.url).pathname;\n      console.log(\"Request for \" + pathname + \"received.\");\n      route(pathname);//路由函数\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(\"Hello World\");\n      response.end();\n    }\n    http.createServer(onRequest).listen(8888);\n    console.log(\"Server has started.\");\n  }\n  exports.start = start;\n```\n同时，我们会相应扩展`index.js`，使得路由函数可以被注入到服务器中：\n``` javascript\n  var server = require(\"./server\");\n  var router = require(\"./router\");\n  server.start(router.route);\n```\n现在启动应用（`node index.js`），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n``` javascript\n  node index.js\n  Request for /foo received.\n  About to route a request for /foo\n  //以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。\n```\n","slug":"Node.js 路由","published":1,"updated":"2017-07-30T07:21:47.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvv9001vv0uinbxtzndx","content":"<h3 id=\"8、Node-js-路由\"><a href=\"#8、Node-js-路由\" class=\"headerlink\" title=\"8、Node.js 路由\"></a>8、Node.js 路由</h3><p>我们要为路由提供请求的<code>URL</code>和其他需要的<code>GET</code>及<code>POST</code>参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看<code>HTTP</code>请求，从中提取出请求的<code>URL</code>以及<code>GET/POST</code>参数。我们需要的所有数据都会包含在<code>request</code>对象中，该对象作为<code>onRequest()</code>回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的<code>Node.JS</code>模块，它们分别是<code>url</code>和<code>querystring</code>模块。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">                   url.parse(string).query</div><div class=\"line\">                                           |</div><div class=\"line\">           url.parse(string).pathname      |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                     ------ -------------------</div><div class=\"line\">http:<span class=\"comment\">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class=\"line\">                                ---       -----</div><div class=\"line\">                                 |          |</div><div class=\"line\">                                 |          |</div><div class=\"line\">              querystring(string)[<span class=\"string\">\"foo\"</span>]    |</div><div class=\"line\">                                            |</div><div class=\"line\">                         querystring(string)[<span class=\"string\">\"hello\"</span>]</div></pre></td></tr></table></figure></p>\n<p>当然我们也可以用<code>querystring</code>模块来解析<code>POST</code>请求体中的参数，稍后会有演示。<br>现在我们来给<code>onRequest()</code>函数加上一些逻辑，用来找出浏览器请求的<code>URL</code>路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\"received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>现在我们可以来编写路由了，建立一个名为<code>router.js</code>的文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p>在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的<code>start()</code>函数，以便将路由函数作为参数传递过去：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\"received.\"</span>);</div><div class=\"line\">    route(pathname);<span class=\"comment\">//路由函数</span></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>同时，我们会相应扩展<code>index.js</code>，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>现在启动应用（<code>node index.js</code>），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div><div class=\"line\">Request <span class=\"keyword\">for</span> /foo received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /foo</div><div class=\"line\"><span class=\"comment\">//以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"8、Node-js-路由\"><a href=\"#8、Node-js-路由\" class=\"headerlink\" title=\"8、Node.js 路由\"></a>8、Node.js 路由</h3><p>我们要为路由提供请求的<code>URL</code>和其他需要的<code>GET</code>及<code>POST</code>参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看<code>HTTP</code>请求，从中提取出请求的<code>URL</code>以及<code>GET/POST</code>参数。我们需要的所有数据都会包含在<code>request</code>对象中，该对象作为<code>onRequest()</code>回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的<code>Node.JS</code>模块，它们分别是<code>url</code>和<code>querystring</code>模块。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">                   url.parse(string).query</div><div class=\"line\">                                           |</div><div class=\"line\">           url.parse(string).pathname      |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                     ------ -------------------</div><div class=\"line\">http:<span class=\"comment\">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class=\"line\">                                ---       -----</div><div class=\"line\">                                 |          |</div><div class=\"line\">                                 |          |</div><div class=\"line\">              querystring(string)[<span class=\"string\">\"foo\"</span>]    |</div><div class=\"line\">                                            |</div><div class=\"line\">                         querystring(string)[<span class=\"string\">\"hello\"</span>]</div></pre></td></tr></table></figure></p>\n<p>当然我们也可以用<code>querystring</code>模块来解析<code>POST</code>请求体中的参数，稍后会有演示。<br>现在我们来给<code>onRequest()</code>函数加上一些逻辑，用来找出浏览器请求的<code>URL</code>路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\"received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>现在我们可以来编写路由了，建立一个名为<code>router.js</code>的文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p>在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的<code>start()</code>函数，以便将路由函数作为参数传递过去：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\"received.\"</span>);</div><div class=\"line\">    route(pathname);<span class=\"comment\">//路由函数</span></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>同时，我们会相应扩展<code>index.js</code>，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>现在启动应用（<code>node index.js</code>），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div><div class=\"line\">Request <span class=\"keyword\">for</span> /foo received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /foo</div><div class=\"line\"><span class=\"comment\">//以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。</span></div></pre></td></tr></table></figure></p>"},{"title":"Node.js函数(7)","date":"2016-06-28T07:20:07.000Z","_content":"\n### 7、Node.js函数\nNode.js中函数的使用与Javascript类似:\n``` javascript\n  function say(word) {\n    console.log(word);\n  }\n  function execute(someFunction, value) {\n    someFunction(value);\n  }\n  execute(say, \"Hello\");\n```\n以上代码中，我们把 `say` 函数作为`execute`函数的第一个变量进行了传递。这里返回的不是 `say` 的返回值，而是 `say` 本身！<!-- more -->这样一来， `say` 就变成了`execute` 中的本地变量 `someFunction` ，`execute`可以通过调用 `someFunction()` （带括号的形式）来使用 `say` 函数。 当然，因为 `say` 有一个变量， `execute` 在调用 `someFunction` 时可以传递这样一个变量。\n#### 匿名函数\n我们可以把一个函数作为变量传递。但是我们不一定要绕这个\"先定义，再传递\"的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：\n``` javascript\n  function execute(someFunction, value){\n    someFunction(value);\n  }\n  execute(function(word){console.log(word)}, \"Hello\");\n```\n我们在 `execute` 接受第一个参数的地方直接定义了我们准备传递给 `execute` 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。\n#### 函数传递是如何让HTTP服务器工作的\n``` javascript\n  var http = require(\"http\");\n  http.createServer(function(request,response){\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }).listen(8888);\n```","source":"_posts/Node.js函数.md","raw":"---\ntitle: Node.js函数(7)\ndate: 2016-06-28 15:20:07\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 7、Node.js函数\nNode.js中函数的使用与Javascript类似:\n``` javascript\n  function say(word) {\n    console.log(word);\n  }\n  function execute(someFunction, value) {\n    someFunction(value);\n  }\n  execute(say, \"Hello\");\n```\n以上代码中，我们把 `say` 函数作为`execute`函数的第一个变量进行了传递。这里返回的不是 `say` 的返回值，而是 `say` 本身！<!-- more -->这样一来， `say` 就变成了`execute` 中的本地变量 `someFunction` ，`execute`可以通过调用 `someFunction()` （带括号的形式）来使用 `say` 函数。 当然，因为 `say` 有一个变量， `execute` 在调用 `someFunction` 时可以传递这样一个变量。\n#### 匿名函数\n我们可以把一个函数作为变量传递。但是我们不一定要绕这个\"先定义，再传递\"的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：\n``` javascript\n  function execute(someFunction, value){\n    someFunction(value);\n  }\n  execute(function(word){console.log(word)}, \"Hello\");\n```\n我们在 `execute` 接受第一个参数的地方直接定义了我们准备传递给 `execute` 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。\n#### 函数传递是如何让HTTP服务器工作的\n``` javascript\n  var http = require(\"http\");\n  http.createServer(function(request,response){\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }).listen(8888);\n```","slug":"Node.js函数","published":1,"updated":"2017-07-30T07:21:47.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvc001zv0uirt5gt83r","content":"<h3 id=\"7、Node-js函数\"><a href=\"#7、Node-js函数\" class=\"headerlink\" title=\"7、Node.js函数\"></a>7、Node.js函数</h3><p>Node.js中函数的使用与Javascript类似:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\">execute(say, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上代码中，我们把 <code>say</code> 函数作为<code>execute</code>函数的第一个变量进行了传递。这里返回的不是 <code>say</code> 的返回值，而是 <code>say</code> 本身！<a id=\"more\"></a>这样一来， <code>say</code> 就变成了<code>execute</code> 中的本地变量 <code>someFunction</code> ，<code>execute</code>可以通过调用 <code>someFunction()</code> （带括号的形式）来使用 <code>say</code> 函数。 当然，因为 <code>say</code> 有一个变量， <code>execute</code> 在调用 <code>someFunction</code> 时可以传递这样一个变量。</p>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>)</span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\">execute(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>)</span>&#123;<span class=\"built_in\">console</span>.log(word)&#125;, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure></p>\n<p>我们在 <code>execute</code> 接受第一个参数的地方直接定义了我们准备传递给 <code>execute</code> 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。</p>\n<h4 id=\"函数传递是如何让HTTP服务器工作的\"><a href=\"#函数传递是如何让HTTP服务器工作的\" class=\"headerlink\" title=\"函数传递是如何让HTTP服务器工作的\"></a>函数传递是如何让HTTP服务器工作的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"7、Node-js函数\"><a href=\"#7、Node-js函数\" class=\"headerlink\" title=\"7、Node.js函数\"></a>7、Node.js函数</h3><p>Node.js中函数的使用与Javascript类似:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\">execute(say, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上代码中，我们把 <code>say</code> 函数作为<code>execute</code>函数的第一个变量进行了传递。这里返回的不是 <code>say</code> 的返回值，而是 <code>say</code> 本身！","more":"这样一来， <code>say</code> 就变成了<code>execute</code> 中的本地变量 <code>someFunction</code> ，<code>execute</code>可以通过调用 <code>someFunction()</code> （带括号的形式）来使用 <code>say</code> 函数。 当然，因为 <code>say</code> 有一个变量， <code>execute</code> 在调用 <code>someFunction</code> 时可以传递这样一个变量。</p>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>)</span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\">execute(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>)</span>&#123;<span class=\"built_in\">console</span>.log(word)&#125;, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure></p>\n<p>我们在 <code>execute</code> 接受第一个参数的地方直接定义了我们准备传递给 <code>execute</code> 的函数。 用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。</p>\n<h4 id=\"函数传递是如何让HTTP服务器工作的\"><a href=\"#函数传递是如何让HTTP服务器工作的\" class=\"headerlink\" title=\"函数传递是如何让HTTP服务器工作的\"></a>函数传递是如何让HTTP服务器工作的</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>"},{"title":"Node.js创建第一个应用(1)","date":"2016-06-27T03:55:07.000Z","_content":"\n### 1、Node.js创建第一个应用\n\n#### 1.1、创建服务器\n\n使用 `http.createServer()` 方法创建服务器，并使用 `listen` 方法绑定 8888 端口。 函数通过 `request`, `response` 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：\n<!-- more --> \n``` javascript\n  var http = require(\"http\");//引入require模块\n  http.createServer(function(require, response){\n    //发送 HTTP 头部\n    //HTTP 状态值：200：OK\n    //内容类型：text/plain\n    response.writeHead(200, {'Content-Type':'text/plain'});\n    //发送响应数据：“Hello World”\n    response.end('Hello World\\n');\n  }).listen(8888);\n  //终端打印如下信息\n  console.log('Server running at http://127.0.0.1:8888/');\n```\n使用 node 命令执行以上的代码：\n```\n  node server.js\n  Server running at http://127.0.0.1:8888/\n```\n接下来，打开浏览器访问 `http://127.0.0.1:8888/`，你会看到一个写着 \"Hello World\" 的网页。","source":"_posts/Node.js创建第一个应用.md","raw":"---\ntitle: Node.js创建第一个应用(1)\ndate: 2016-06-27 11:55:07\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 1、Node.js创建第一个应用\n\n#### 1.1、创建服务器\n\n使用 `http.createServer()` 方法创建服务器，并使用 `listen` 方法绑定 8888 端口。 函数通过 `request`, `response` 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：\n<!-- more --> \n``` javascript\n  var http = require(\"http\");//引入require模块\n  http.createServer(function(require, response){\n    //发送 HTTP 头部\n    //HTTP 状态值：200：OK\n    //内容类型：text/plain\n    response.writeHead(200, {'Content-Type':'text/plain'});\n    //发送响应数据：“Hello World”\n    response.end('Hello World\\n');\n  }).listen(8888);\n  //终端打印如下信息\n  console.log('Server running at http://127.0.0.1:8888/');\n```\n使用 node 命令执行以上的代码：\n```\n  node server.js\n  Server running at http://127.0.0.1:8888/\n```\n接下来，打开浏览器访问 `http://127.0.0.1:8888/`，你会看到一个写着 \"Hello World\" 的网页。","slug":"Node.js创建第一个应用","published":1,"updated":"2017-07-30T07:21:47.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvj0023v0ui5usadmlu","content":"<h3 id=\"1、Node-js创建第一个应用\"><a href=\"#1、Node-js创建第一个应用\" class=\"headerlink\" title=\"1、Node.js创建第一个应用\"></a>1、Node.js创建第一个应用</h3><h4 id=\"1-1、创建服务器\"><a href=\"#1-1、创建服务器\" class=\"headerlink\" title=\"1.1、创建服务器\"></a>1.1、创建服务器</h4><p>使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 8888 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);<span class=\"comment\">//引入require模块</span></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//发送 HTTP 头部</span></div><div class=\"line\">  <span class=\"comment\">//HTTP 状态值：200：OK</span></div><div class=\"line\">  <span class=\"comment\">//内容类型：text/plain</span></div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  <span class=\"comment\">//发送响应数据：“Hello World”</span></div><div class=\"line\">  response.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"comment\">//终端打印如下信息</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8888/'</span>);</div></pre></td></tr></table></figure></p>\n<p>使用 node 命令执行以上的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http://127.0.0.1:8888/</div></pre></td></tr></table></figure></p>\n<p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code>，你会看到一个写着 “Hello World” 的网页。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、Node-js创建第一个应用\"><a href=\"#1、Node-js创建第一个应用\" class=\"headerlink\" title=\"1、Node.js创建第一个应用\"></a>1、Node.js创建第一个应用</h3><h4 id=\"1-1、创建服务器\"><a href=\"#1-1、创建服务器\" class=\"headerlink\" title=\"1.1、创建服务器\"></a>1.1、创建服务器</h4><p>使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 8888 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);<span class=\"comment\">//引入require模块</span></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, response</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//发送 HTTP 头部</span></div><div class=\"line\">  <span class=\"comment\">//HTTP 状态值：200：OK</span></div><div class=\"line\">  <span class=\"comment\">//内容类型：text/plain</span></div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  <span class=\"comment\">//发送响应数据：“Hello World”</span></div><div class=\"line\">  response.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"comment\">//终端打印如下信息</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8888/'</span>);</div></pre></td></tr></table></figure></p>\n<p>使用 node 命令执行以上的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http://127.0.0.1:8888/</div></pre></td></tr></table></figure></p>\n<p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code>，你会看到一个写着 “Hello World” 的网页。</p>"},{"title":"Node.js模块系统(6)","date":"2016-06-28T03:32:07.000Z","_content":"\n### 6、Node.js模块系统\nNode.js 提供了`exports` 和 `require` 两个对象，其中 `exports` 是模块公开的接口，`require` 用于从外部获取一个模块的接口，即所获取模块的 `exports` 对象。\n<!-- more -->\n实例：\n``` javascript\n  //hello.js\n  function Hello(){\n    var name;\n    this.setName = function(thyName){\n      name = thyName;\n    };\n    this.sayHello = function(){\n      console.log('Hello '+ name);\n    };\n  };\n  module.exports = Hello;\n  //main.js\n  var Hello = require('./hello');\n  hello = new Hello();\n  hello.setName('BYVoid');\n  hello.sayHello();\n```\n#### 服务端的模块放在哪里\n我们已经在代码中使用了模块了。像这样：\n``` javascript\n  var http = require(\"http\");\n  ...\n  http.createServer(...);\n```\nNode.js中自带了一个叫做\"http\"的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 `http` 模块所提供的公共方法的对象。\nNode.js 的 `require`方法中的文件查找策略如下：\n```\n开始require-->\n  if (在文件模块缓存区中) {\n    返回exports.\n  } else{\n    if (是原生模块) {\n      if (在原生模块缓存区中) {\n        返回exports.\n      } else{\n        加载原生模块-->缓存原生模块-->返回exports.\n      };\n    } else{\n      查找文件模块-->根据扩展名载入文件模块-->缓存文件模块-->返回exports.\n    };\n  };\n```\n#### 从文件模块缓存中加载\n尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。\n#### 从原生模块加载 */\n原生模块的优先级仅次于文件模块缓存的优先级。`require`方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个`http/http.js/http.node/http.json`文件，`require(\"http\")`都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。\n#### 从文件加载 */\n当文件模块缓存中不存在，而且不是原生模块的时候，`Node.js`会解析`require`方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。\n`require`方法接受以下几种参数的传递:\n  `http、fs、path`等，原生模块。\n  `./mod`或`../mod`，相对路径的文件模块。\n  `/pathtomodule/mod`，绝对路径的文件模块。\n  `mod`，非原生模块的文件模块。","source":"_posts/Node.js模块系统.md","raw":"---\ntitle: Node.js模块系统(6)\ndate: 2016-06-28 11:32:07\ntags: node\ncategories: nodeJS学习笔记\n---\n\n### 6、Node.js模块系统\nNode.js 提供了`exports` 和 `require` 两个对象，其中 `exports` 是模块公开的接口，`require` 用于从外部获取一个模块的接口，即所获取模块的 `exports` 对象。\n<!-- more -->\n实例：\n``` javascript\n  //hello.js\n  function Hello(){\n    var name;\n    this.setName = function(thyName){\n      name = thyName;\n    };\n    this.sayHello = function(){\n      console.log('Hello '+ name);\n    };\n  };\n  module.exports = Hello;\n  //main.js\n  var Hello = require('./hello');\n  hello = new Hello();\n  hello.setName('BYVoid');\n  hello.sayHello();\n```\n#### 服务端的模块放在哪里\n我们已经在代码中使用了模块了。像这样：\n``` javascript\n  var http = require(\"http\");\n  ...\n  http.createServer(...);\n```\nNode.js中自带了一个叫做\"http\"的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 `http` 模块所提供的公共方法的对象。\nNode.js 的 `require`方法中的文件查找策略如下：\n```\n开始require-->\n  if (在文件模块缓存区中) {\n    返回exports.\n  } else{\n    if (是原生模块) {\n      if (在原生模块缓存区中) {\n        返回exports.\n      } else{\n        加载原生模块-->缓存原生模块-->返回exports.\n      };\n    } else{\n      查找文件模块-->根据扩展名载入文件模块-->缓存文件模块-->返回exports.\n    };\n  };\n```\n#### 从文件模块缓存中加载\n尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。\n#### 从原生模块加载 */\n原生模块的优先级仅次于文件模块缓存的优先级。`require`方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个`http/http.js/http.node/http.json`文件，`require(\"http\")`都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。\n#### 从文件加载 */\n当文件模块缓存中不存在，而且不是原生模块的时候，`Node.js`会解析`require`方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。\n`require`方法接受以下几种参数的传递:\n  `http、fs、path`等，原生模块。\n  `./mod`或`../mod`，相对路径的文件模块。\n  `/pathtomodule/mod`，绝对路径的文件模块。\n  `mod`，非原生模块的文件模块。","slug":"Node.js模块系统","published":1,"updated":"2017-07-30T07:21:47.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvm0027v0uicn30m24m","content":"<h3 id=\"6、Node-js模块系统\"><a href=\"#6、Node-js模块系统\" class=\"headerlink\" title=\"6、Node.js模块系统\"></a>6、Node.js模块系统</h3><p>Node.js 提供了<code>exports</code> 和 <code>require</code> 两个对象，其中 <code>exports</code> 是模块公开的接口，<code>require</code> 用于从外部获取一个模块的接口，即所获取模块的 <code>exports</code> 对象。<br><a id=\"more\"></a><br>实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//hello.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>)</span>&#123;</div><div class=\"line\">    name = thyName;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span>+ name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</div><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>);</div><div class=\"line\">hello = <span class=\"keyword\">new</span> Hello();</div><div class=\"line\">hello.setName(<span class=\"string\">'BYVoid'</span>);</div><div class=\"line\">hello.sayHello();</div></pre></td></tr></table></figure></p>\n<h4 id=\"服务端的模块放在哪里\"><a href=\"#服务端的模块放在哪里\" class=\"headerlink\" title=\"服务端的模块放在哪里\"></a>服务端的模块放在哪里</h4><p>我们已经在代码中使用了模块了。像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">...</div><div class=\"line\">http.createServer(...);</div></pre></td></tr></table></figure></p>\n<p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 <code>http</code> 模块所提供的公共方法的对象。<br>Node.js 的 <code>require</code>方法中的文件查找策略如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">开始require--&gt;</div><div class=\"line\">  if (在文件模块缓存区中) &#123;</div><div class=\"line\">    返回exports.</div><div class=\"line\">  &#125; else&#123;</div><div class=\"line\">    if (是原生模块) &#123;</div><div class=\"line\">      if (在原生模块缓存区中) &#123;</div><div class=\"line\">        返回exports.</div><div class=\"line\">      &#125; else&#123;</div><div class=\"line\">        加载原生模块--&gt;缓存原生模块--&gt;返回exports.</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125; else&#123;</div><div class=\"line\">      查找文件模块--&gt;根据扩展名载入文件模块--&gt;缓存文件模块--&gt;返回exports.</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"从文件模块缓存中加载\"><a href=\"#从文件模块缓存中加载\" class=\"headerlink\" title=\"从文件模块缓存中加载\"></a>从文件模块缓存中加载</h4><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>\n<h4 id=\"从原生模块加载\"><a href=\"#从原生模块加载\" class=\"headerlink\" title=\"从原生模块加载 */\"></a>从原生模块加载 */</h4><p>原生模块的优先级仅次于文件模块缓存的优先级。<code>require</code>方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个<code>http/http.js/http.node/http.json</code>文件，<code>require(&quot;http&quot;)</code>都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p>\n<h4 id=\"从文件加载\"><a href=\"#从文件加载\" class=\"headerlink\" title=\"从文件加载 */\"></a>从文件加载 */</h4><p>当文件模块缓存中不存在，而且不是原生模块的时候，<code>Node.js</code>会解析<code>require</code>方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br><code>require</code>方法接受以下几种参数的传递:<br>  <code>http、fs、path</code>等，原生模块。<br>  <code>./mod</code>或<code>../mod</code>，相对路径的文件模块。<br>  <code>/pathtomodule/mod</code>，绝对路径的文件模块。<br>  <code>mod</code>，非原生模块的文件模块。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"6、Node-js模块系统\"><a href=\"#6、Node-js模块系统\" class=\"headerlink\" title=\"6、Node.js模块系统\"></a>6、Node.js模块系统</h3><p>Node.js 提供了<code>exports</code> 和 <code>require</code> 两个对象，其中 <code>exports</code> 是模块公开的接口，<code>require</code> 用于从外部获取一个模块的接口，即所获取模块的 <code>exports</code> 对象。<br>","more":"<br>实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//hello.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>)</span>&#123;</div><div class=\"line\">    name = thyName;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span>+ name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</div><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>);</div><div class=\"line\">hello = <span class=\"keyword\">new</span> Hello();</div><div class=\"line\">hello.setName(<span class=\"string\">'BYVoid'</span>);</div><div class=\"line\">hello.sayHello();</div></pre></td></tr></table></figure></p>\n<h4 id=\"服务端的模块放在哪里\"><a href=\"#服务端的模块放在哪里\" class=\"headerlink\" title=\"服务端的模块放在哪里\"></a>服务端的模块放在哪里</h4><p>我们已经在代码中使用了模块了。像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\">...</div><div class=\"line\">http.createServer(...);</div></pre></td></tr></table></figure></p>\n<p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。这把我们的本地变量变成了一个拥有所有 <code>http</code> 模块所提供的公共方法的对象。<br>Node.js 的 <code>require</code>方法中的文件查找策略如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">开始require--&gt;</div><div class=\"line\">  if (在文件模块缓存区中) &#123;</div><div class=\"line\">    返回exports.</div><div class=\"line\">  &#125; else&#123;</div><div class=\"line\">    if (是原生模块) &#123;</div><div class=\"line\">      if (在原生模块缓存区中) &#123;</div><div class=\"line\">        返回exports.</div><div class=\"line\">      &#125; else&#123;</div><div class=\"line\">        加载原生模块--&gt;缓存原生模块--&gt;返回exports.</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125; else&#123;</div><div class=\"line\">      查找文件模块--&gt;根据扩展名载入文件模块--&gt;缓存文件模块--&gt;返回exports.</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"从文件模块缓存中加载\"><a href=\"#从文件模块缓存中加载\" class=\"headerlink\" title=\"从文件模块缓存中加载\"></a>从文件模块缓存中加载</h4><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>\n<h4 id=\"从原生模块加载\"><a href=\"#从原生模块加载\" class=\"headerlink\" title=\"从原生模块加载 */\"></a>从原生模块加载 */</h4><p>原生模块的优先级仅次于文件模块缓存的优先级。<code>require</code>方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个<code>http/http.js/http.node/http.json</code>文件，<code>require(&quot;http&quot;)</code>都不会从这些文件中加载，而是从原生模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p>\n<h4 id=\"从文件加载\"><a href=\"#从文件加载\" class=\"headerlink\" title=\"从文件加载 */\"></a>从文件加载 */</h4><p>当文件模块缓存中不存在，而且不是原生模块的时候，<code>Node.js</code>会解析<code>require</code>方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br><code>require</code>方法接受以下几种参数的传递:<br>  <code>http、fs、path</code>等，原生模块。<br>  <code>./mod</code>或<code>../mod</code>，相对路径的文件模块。<br>  <code>/pathtomodule/mod</code>，绝对路径的文件模块。<br>  <code>mod</code>，非原生模块的文件模块。</p>"},{"title":"好用的Web包管理器-Bower","date":"2016-08-12T07:32:41.000Z","_content":"\nBower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。\n<!-- more --> \n### 开始之前\n\n在安装[bower](https://bower.io/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n\n### 1.安装Bower\n使用npm，打开终端，键入：\n``` bash\nnpm install -g bower   #全局安装bower\n```\n移步[这里](https://github.com/bower/bower/wiki/Troubleshooting)查看不同平台上安装的问题。\n\n### 2.使用Bower\n使用help命令查看帮助。   \n``` bash\nbower help\n\nUsage:\n    bower <command> [<args>] [<options>]\nCommands:\n    cache                   Manage bower cache\n    help                    Display help information about Bower\n    home                    Opens a package homepage into your favorite browser\n    info                    Info of a particular package\n    init                    Interactively create a bower.json file\n    install                 Install a package locally\n    link                    Symlink a package folder\n    list                    List local packages - and possible updates\n    login                   Authenticate with GitHub and store credentials\n    lookup                  Look up a package URL by name\n    prune                   Removes local extraneous packages\n    register                Register a package\n    search                  Search for a package by name\n    update                  Update a local package\n    uninstall               Remove a local package\n    unregister              Remove a package from the registry\n    version                 Bump a package version\nOptions:\n    -f, --force             Makes various commands more forceful\n    -j, --json              Output consumable JSON\n    -l, --loglevel          What level of logs to report\n    -o, --offline           Do not hit the network\n    -q, --quiet             Only output important information\n    -s, --silent            Do not output anything, besides errors\n    -V, --verbose           Makes output more verbose\n    --allow-root            Allows running commands as root\n    -v, --version           Output Bower version\n    --no-color              Disable colors\nSee 'bower help <command>' for more information on a specific command.\n```\n### 3.安装包到本地\n通过命令bower install安装软件包默认到bower_components/目录。\n``` bash\nbower install <package>    #package为包名\n```\n想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.\n``` bash\nbower install  # 通过 bower.json 文件安装\nbower install jquery   # 通过在github上注册的包名安装\nbower install desandro/masonry   # GitHub短链接\nbower install git://github.com/user/package.git   # Github上的 .git\nbower install http://example.com/script.js   # URL\n```\n安装选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Save installed packages into the project’s bower.json dependencies\n    -D, --save-dev: Save installed packages into the project’s bower.json devDependencies\n    -E, --save-exact: Configure installed packages with an exact version rather than semver\n```\n\n### 4.用bower.json文件来管理依赖\n发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行`bower install`就可根据bower.json来安装依赖的包。\n在项目中执行\n``` bash\nbower init\n```\n会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.\n如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上`--save`即可。\n\n### 5.使用下载好的包\n对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：\n``` html\n<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\">\n<script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n```\n\n### 6.更新包\n若下载的包升级了，只需执行`update`命令即可更新，例如：\n``` bash \nbower update jquery\n```\n这样就可以自动升级到最新版的jquery了。\n更新选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Update dependencies in bower.json\n    -D, --save-dev: Update devDependencies in bower.json\n```\n\n### 7.搜索包\n``` bash\nbower search               #搜索所有包\nbower search <packageName> #搜索指定名称的包\n```\n或者可以在[这里:https://bower.io/search/](https://bower.io/search/)搜索喜欢的包.\n\n### 8.卸载包\n``` bash\nbower uninstall <name> [<name> ..] [<options>]\n```\n卸载选项\n``` bash\n    -S, --save: Remove uninstalled packages from the project’s bower.json dependencies\n    -D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies\n```\n","source":"_posts/Web包管理器-Bower.md","raw":"---\ntitle: 好用的Web包管理器-Bower\ndate: 2016-08-12 15:32:41\ntags: bower\ncategories: 前端工具\n---\n\nBower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。\n<!-- more --> \n### 开始之前\n\n在安装[bower](https://bower.io/)之前，必须确认你已经安装了[Node.js](http://nodejs.org/)和[Git](http://git-scm.com/)。\n\n### 1.安装Bower\n使用npm，打开终端，键入：\n``` bash\nnpm install -g bower   #全局安装bower\n```\n移步[这里](https://github.com/bower/bower/wiki/Troubleshooting)查看不同平台上安装的问题。\n\n### 2.使用Bower\n使用help命令查看帮助。   \n``` bash\nbower help\n\nUsage:\n    bower <command> [<args>] [<options>]\nCommands:\n    cache                   Manage bower cache\n    help                    Display help information about Bower\n    home                    Opens a package homepage into your favorite browser\n    info                    Info of a particular package\n    init                    Interactively create a bower.json file\n    install                 Install a package locally\n    link                    Symlink a package folder\n    list                    List local packages - and possible updates\n    login                   Authenticate with GitHub and store credentials\n    lookup                  Look up a package URL by name\n    prune                   Removes local extraneous packages\n    register                Register a package\n    search                  Search for a package by name\n    update                  Update a local package\n    uninstall               Remove a local package\n    unregister              Remove a package from the registry\n    version                 Bump a package version\nOptions:\n    -f, --force             Makes various commands more forceful\n    -j, --json              Output consumable JSON\n    -l, --loglevel          What level of logs to report\n    -o, --offline           Do not hit the network\n    -q, --quiet             Only output important information\n    -s, --silent            Do not output anything, besides errors\n    -V, --verbose           Makes output more verbose\n    --allow-root            Allows running commands as root\n    -v, --version           Output Bower version\n    --no-color              Disable colors\nSee 'bower help <command>' for more information on a specific command.\n```\n### 3.安装包到本地\n通过命令bower install安装软件包默认到bower_components/目录。\n``` bash\nbower install <package>    #package为包名\n```\n想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.\n``` bash\nbower install  # 通过 bower.json 文件安装\nbower install jquery   # 通过在github上注册的包名安装\nbower install desandro/masonry   # GitHub短链接\nbower install git://github.com/user/package.git   # Github上的 .git\nbower install http://example.com/script.js   # URL\n```\n安装选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Save installed packages into the project’s bower.json dependencies\n    -D, --save-dev: Save installed packages into the project’s bower.json devDependencies\n    -E, --save-exact: Configure installed packages with an exact version rather than semver\n```\n\n### 4.用bower.json文件来管理依赖\n发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行`bower install`就可根据bower.json来安装依赖的包。\n在项目中执行\n``` bash\nbower init\n```\n会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.\n如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上`--save`即可。\n\n### 5.使用下载好的包\n对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：\n``` html\n<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\">\n<script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"></script>\n```\n\n### 6.更新包\n若下载的包升级了，只需执行`update`命令即可更新，例如：\n``` bash \nbower update jquery\n```\n这样就可以自动升级到最新版的jquery了。\n更新选项\n``` bash\n    -F, --force-latest: Force latest version on conflict\n    -p, --production: Do not install project devDependencies\n    -S, --save: Update dependencies in bower.json\n    -D, --save-dev: Update devDependencies in bower.json\n```\n\n### 7.搜索包\n``` bash\nbower search               #搜索所有包\nbower search <packageName> #搜索指定名称的包\n```\n或者可以在[这里:https://bower.io/search/](https://bower.io/search/)搜索喜欢的包.\n\n### 8.卸载包\n``` bash\nbower uninstall <name> [<name> ..] [<options>]\n```\n卸载选项\n``` bash\n    -S, --save: Remove uninstalled packages from the project’s bower.json dependencies\n    -D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies\n```\n","slug":"Web包管理器-Bower","published":1,"updated":"2017-07-30T07:21:47.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvq002bv0ui14a8ns3u","content":"<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。<br><a id=\"more\"></a> </p>\n<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://bower.io/\" target=\"_blank\" rel=\"external\">bower</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>。</p>\n<h3 id=\"1-安装Bower\"><a href=\"#1-安装Bower\" class=\"headerlink\" title=\"1.安装Bower\"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g bower   <span class=\"comment\">#全局安装bower</span></div></pre></td></tr></table></figure></p>\n<p>移步<a href=\"https://github.com/bower/bower/wiki/Troubleshooting\" target=\"_blank\" rel=\"external\">这里</a>查看不同平台上安装的问题。</p>\n<h3 id=\"2-使用Bower\"><a href=\"#2-使用Bower\" class=\"headerlink\" title=\"2.使用Bower\"></a>2.使用Bower</h3><p>使用help命令查看帮助。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower <span class=\"built_in\">help</span></div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">    bower &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</div><div class=\"line\">Commands:</div><div class=\"line\">    cache                   Manage bower cache</div><div class=\"line\">    <span class=\"built_in\">help</span>                    Display <span class=\"built_in\">help</span> information about Bower</div><div class=\"line\">    home                    Opens a package homepage into your favorite browser</div><div class=\"line\">    info                    Info of a particular package</div><div class=\"line\">    init                    Interactively create a bower.json file</div><div class=\"line\">    install                 Install a package locally</div><div class=\"line\">    link                    Symlink a package folder</div><div class=\"line\">    list                    List <span class=\"built_in\">local</span> packages - and possible updates</div><div class=\"line\">    login                   Authenticate with GitHub and store credentials</div><div class=\"line\">    lookup                  Look up a package URL by name</div><div class=\"line\">    prune                   Removes <span class=\"built_in\">local</span> extraneous packages</div><div class=\"line\">    register                Register a package</div><div class=\"line\">    search                  Search <span class=\"keyword\">for</span> a package by name</div><div class=\"line\">    update                  Update a <span class=\"built_in\">local</span> package</div><div class=\"line\">    uninstall               Remove a <span class=\"built_in\">local</span> package</div><div class=\"line\">    unregister              Remove a package from the registry</div><div class=\"line\">    version                 Bump a package version</div><div class=\"line\">Options:</div><div class=\"line\">    -f, --force             Makes various commands more forceful</div><div class=\"line\">    -j, --json              Output consumable JSON</div><div class=\"line\">    -l, --loglevel          What level of logs to report</div><div class=\"line\">    -o, --offline           Do not hit the network</div><div class=\"line\">    -q, --quiet             Only output important information</div><div class=\"line\">    -s, --silent            Do not output anything, besides errors</div><div class=\"line\">    -V, --verbose           Makes output more verbose</div><div class=\"line\">    --allow-root            Allows running commands as root</div><div class=\"line\">    -v, --version           Output Bower version</div><div class=\"line\">    --no-color              Disable colors</div><div class=\"line\">See <span class=\"string\">'bower help &lt;command&gt;'</span> <span class=\"keyword\">for</span> more information on a specific <span class=\"built_in\">command</span>.</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装包到本地\"><a href=\"#3-安装包到本地\" class=\"headerlink\" title=\"3.安装包到本地\"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install &lt;package&gt;    <span class=\"comment\">#package为包名</span></div></pre></td></tr></table></figure></p>\n<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install  <span class=\"comment\"># 通过 bower.json 文件安装</span></div><div class=\"line\">bower install jquery   <span class=\"comment\"># 通过在github上注册的包名安装</span></div><div class=\"line\">bower install desandro/masonry   <span class=\"comment\"># GitHub短链接</span></div><div class=\"line\">bower install git://github.com/user/package.git   <span class=\"comment\"># Github上的 .git</span></div><div class=\"line\">bower install http://example.com/script.js   <span class=\"comment\"># URL</span></div></pre></td></tr></table></figure></p>\n<p>安装选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-F, --force-latest: Force latest version on conflict</div><div class=\"line\">-p, --production: Do not install project devDependencies</div><div class=\"line\">-S, --save: Save installed packages into the project’s bower.json dependencies</div><div class=\"line\">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</div><div class=\"line\">-E, --save-exact: Configure installed packages with an exact version rather than semver</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-用bower-json文件来管理依赖\"><a href=\"#4-用bower-json文件来管理依赖\" class=\"headerlink\" title=\"4.用bower.json文件来管理依赖\"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower init</div></pre></td></tr></table></figure></p>\n<p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p>\n<h3 id=\"5-使用下载好的包\"><a href=\"#5-使用下载好的包\" class=\"headerlink\" title=\"5.使用下载好的包\"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.min.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/jquery/dist/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"6-更新包\"><a href=\"#6-更新包\" class=\"headerlink\" title=\"6.更新包\"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower update jquery</div></pre></td></tr></table></figure></p>\n<p>这样就可以自动升级到最新版的jquery了。<br>更新选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-F, --force-latest: Force latest version on conflict</div><div class=\"line\">-p, --production: Do not install project devDependencies</div><div class=\"line\">-S, --save: Update dependencies <span class=\"keyword\">in</span> bower.json</div><div class=\"line\">-D, --save-dev: Update devDependencies <span class=\"keyword\">in</span> bower.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-搜索包\"><a href=\"#7-搜索包\" class=\"headerlink\" title=\"7.搜索包\"></a>7.搜索包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower search               <span class=\"comment\">#搜索所有包</span></div><div class=\"line\">bower search &lt;packageName&gt; <span class=\"comment\">#搜索指定名称的包</span></div></pre></td></tr></table></figure>\n<p>或者可以在<a href=\"https://bower.io/search/\" target=\"_blank\" rel=\"external\">这里:https://bower.io/search/</a>搜索喜欢的包.</p>\n<h3 id=\"8-卸载包\"><a href=\"#8-卸载包\" class=\"headerlink\" title=\"8.卸载包\"></a>8.卸载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</div></pre></td></tr></table></figure>\n<p>卸载选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</div><div class=\"line\">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。<br>","more":"</p>\n<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>在安装<a href=\"https://bower.io/\" target=\"_blank\" rel=\"external\">bower</a>之前，必须确认你已经安装了<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a>和<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>。</p>\n<h3 id=\"1-安装Bower\"><a href=\"#1-安装Bower\" class=\"headerlink\" title=\"1.安装Bower\"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g bower   <span class=\"comment\">#全局安装bower</span></div></pre></td></tr></table></figure></p>\n<p>移步<a href=\"https://github.com/bower/bower/wiki/Troubleshooting\" target=\"_blank\" rel=\"external\">这里</a>查看不同平台上安装的问题。</p>\n<h3 id=\"2-使用Bower\"><a href=\"#2-使用Bower\" class=\"headerlink\" title=\"2.使用Bower\"></a>2.使用Bower</h3><p>使用help命令查看帮助。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower <span class=\"built_in\">help</span></div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">    bower &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</div><div class=\"line\">Commands:</div><div class=\"line\">    cache                   Manage bower cache</div><div class=\"line\">    <span class=\"built_in\">help</span>                    Display <span class=\"built_in\">help</span> information about Bower</div><div class=\"line\">    home                    Opens a package homepage into your favorite browser</div><div class=\"line\">    info                    Info of a particular package</div><div class=\"line\">    init                    Interactively create a bower.json file</div><div class=\"line\">    install                 Install a package locally</div><div class=\"line\">    link                    Symlink a package folder</div><div class=\"line\">    list                    List <span class=\"built_in\">local</span> packages - and possible updates</div><div class=\"line\">    login                   Authenticate with GitHub and store credentials</div><div class=\"line\">    lookup                  Look up a package URL by name</div><div class=\"line\">    prune                   Removes <span class=\"built_in\">local</span> extraneous packages</div><div class=\"line\">    register                Register a package</div><div class=\"line\">    search                  Search <span class=\"keyword\">for</span> a package by name</div><div class=\"line\">    update                  Update a <span class=\"built_in\">local</span> package</div><div class=\"line\">    uninstall               Remove a <span class=\"built_in\">local</span> package</div><div class=\"line\">    unregister              Remove a package from the registry</div><div class=\"line\">    version                 Bump a package version</div><div class=\"line\">Options:</div><div class=\"line\">    -f, --force             Makes various commands more forceful</div><div class=\"line\">    -j, --json              Output consumable JSON</div><div class=\"line\">    -l, --loglevel          What level of logs to report</div><div class=\"line\">    -o, --offline           Do not hit the network</div><div class=\"line\">    -q, --quiet             Only output important information</div><div class=\"line\">    -s, --silent            Do not output anything, besides errors</div><div class=\"line\">    -V, --verbose           Makes output more verbose</div><div class=\"line\">    --allow-root            Allows running commands as root</div><div class=\"line\">    -v, --version           Output Bower version</div><div class=\"line\">    --no-color              Disable colors</div><div class=\"line\">See <span class=\"string\">'bower help &lt;command&gt;'</span> <span class=\"keyword\">for</span> more information on a specific <span class=\"built_in\">command</span>.</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装包到本地\"><a href=\"#3-安装包到本地\" class=\"headerlink\" title=\"3.安装包到本地\"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install &lt;package&gt;    <span class=\"comment\">#package为包名</span></div></pre></td></tr></table></figure></p>\n<p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install  <span class=\"comment\"># 通过 bower.json 文件安装</span></div><div class=\"line\">bower install jquery   <span class=\"comment\"># 通过在github上注册的包名安装</span></div><div class=\"line\">bower install desandro/masonry   <span class=\"comment\"># GitHub短链接</span></div><div class=\"line\">bower install git://github.com/user/package.git   <span class=\"comment\"># Github上的 .git</span></div><div class=\"line\">bower install http://example.com/script.js   <span class=\"comment\"># URL</span></div></pre></td></tr></table></figure></p>\n<p>安装选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-F, --force-latest: Force latest version on conflict</div><div class=\"line\">-p, --production: Do not install project devDependencies</div><div class=\"line\">-S, --save: Save installed packages into the project’s bower.json dependencies</div><div class=\"line\">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</div><div class=\"line\">-E, --save-exact: Configure installed packages with an exact version rather than semver</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-用bower-json文件来管理依赖\"><a href=\"#4-用bower-json文件来管理依赖\" class=\"headerlink\" title=\"4.用bower.json文件来管理依赖\"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower init</div></pre></td></tr></table></figure></p>\n<p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p>\n<h3 id=\"5-使用下载好的包\"><a href=\"#5-使用下载好的包\" class=\"headerlink\" title=\"5.使用下载好的包\"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.min.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/jquery/dist/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"6-更新包\"><a href=\"#6-更新包\" class=\"headerlink\" title=\"6.更新包\"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower update jquery</div></pre></td></tr></table></figure></p>\n<p>这样就可以自动升级到最新版的jquery了。<br>更新选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-F, --force-latest: Force latest version on conflict</div><div class=\"line\">-p, --production: Do not install project devDependencies</div><div class=\"line\">-S, --save: Update dependencies <span class=\"keyword\">in</span> bower.json</div><div class=\"line\">-D, --save-dev: Update devDependencies <span class=\"keyword\">in</span> bower.json</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-搜索包\"><a href=\"#7-搜索包\" class=\"headerlink\" title=\"7.搜索包\"></a>7.搜索包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower search               <span class=\"comment\">#搜索所有包</span></div><div class=\"line\">bower search &lt;packageName&gt; <span class=\"comment\">#搜索指定名称的包</span></div></pre></td></tr></table></figure>\n<p>或者可以在<a href=\"https://bower.io/search/\" target=\"_blank\" rel=\"external\">这里:https://bower.io/search/</a>搜索喜欢的包.</p>\n<h3 id=\"8-卸载包\"><a href=\"#8-卸载包\" class=\"headerlink\" title=\"8.卸载包\"></a>8.卸载包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</div></pre></td></tr></table></figure>\n<p>卸载选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</div><div class=\"line\">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</div></pre></td></tr></table></figure></p>"},{"title":"github博客迁移","date":"2016-08-17T03:14:25.000Z","_content":"由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。\n### 1.迁移代码\n把代码从[github](https://github.com/)迁移至[码云（oschina）](http://git.oschina.net/)。\n首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。\n码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。\n<!-- more -->\n在GitHub上，可以新建一个以`用户名`命名的仓库，将网站代码放在master分支下，即可自动部署到：`http://用户名.github.io/`，若其他命名的仓库则新建一个`gh-pages`的分支，网站代码放在`gh-pages`下，，即可自动部署到：`http://用户名.github.io/仓库名/`。\n对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在`osc-pages`下，但可自定到自己喜欢的分支上。\n代码迁移步骤如下：\n##### 1.1 新建码云项目\n以我自己的博客为例，项目地址：[https://github.com/chaooo/chaooo.github.io.git](https://github.com/chaooo/chaooo.github.io.git)。\n它在Github上的Pages地址是：[http://chaooo.github.io](http://chaooo.github.io)\n如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的`+`号，选择新建项目:\n![博客迁移至码云1](http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg)\n##### 1.2 开启pages服务\n然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的`Pages`,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。\n![博客迁移至码云2](http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg)\n至此，博客已经部署成功，访问提供的地址：[http://chaoo.oschina.io](http://chaoo.oschina.io)即可查看到我的博客。\n![博客迁移至码云3](http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg)\n\n### 2.修改hexo配置\n打开博客根目录的_config.yml文件，找到：\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://chaooo.github.io\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n修改为(根据自己的仓库地址修改)：\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n#url: http://chaooo.github.io\nurl: http://chaoo.oschina.io\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n#- type: git\n#  repository: https://github.com/chaooo/chaooo.github.io.git\n#  branch: master\n- type: git\n  repository: https://git.oschina.net/chaoo/chaoo.git\n  branch: master\n```\n然后执行下面命令，以重新生成`baidusitemap.xml`。\n``` bash\nhexo generate -d\n```\n#### 3.验证网站\n百度搜索引擎入口：\n[百度搜索引擎入口](http://zhanzhang.baidu.com/linksubmit/url)。\n先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的`public/`下面 。\n然后部署到服务器,输入地址：`http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html`能访问到就可以点验证按钮(按照百度的引导步骤就好)。\n\n### 4.sitemap提交\n直接点击`sitemap`填写数据文件地址：`http://chaoo.oschina.io/baidusitemap.xml`,输入验证码提交。\n##### 自动推送\n自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到`\\themes\\landscape\\layout\\_partial\\after_footer.ejs`中的最下面就行。\n代码如下：\n``` javascript\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n\n这样就可以等待百度收录了。\n\n![博客迁移至码云4](http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg)","source":"_posts/github博客迁移.md","raw":"---\ntitle: github博客迁移\ndate: 2016-08-17 11:14:25\ntags: [github,hexo]\ncategories: hexo博客折腾\n---\n由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。\n### 1.迁移代码\n把代码从[github](https://github.com/)迁移至[码云（oschina）](http://git.oschina.net/)。\n首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。\n码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。\n<!-- more -->\n在GitHub上，可以新建一个以`用户名`命名的仓库，将网站代码放在master分支下，即可自动部署到：`http://用户名.github.io/`，若其他命名的仓库则新建一个`gh-pages`的分支，网站代码放在`gh-pages`下，，即可自动部署到：`http://用户名.github.io/仓库名/`。\n对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在`osc-pages`下，但可自定到自己喜欢的分支上。\n代码迁移步骤如下：\n##### 1.1 新建码云项目\n以我自己的博客为例，项目地址：[https://github.com/chaooo/chaooo.github.io.git](https://github.com/chaooo/chaooo.github.io.git)。\n它在Github上的Pages地址是：[http://chaooo.github.io](http://chaooo.github.io)\n如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的`+`号，选择新建项目:\n![博客迁移至码云1](http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg)\n##### 1.2 开启pages服务\n然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的`Pages`,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。\n![博客迁移至码云2](http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg)\n至此，博客已经部署成功，访问提供的地址：[http://chaoo.oschina.io](http://chaoo.oschina.io)即可查看到我的博客。\n![博客迁移至码云3](http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg)\n\n### 2.修改hexo配置\n打开博客根目录的_config.yml文件，找到：\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://chaooo.github.io\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/chaooo/chaooo.github.io.git\n  branch: master\n```\n修改为(根据自己的仓库地址修改)：\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n#url: http://chaooo.github.io\nurl: http://chaoo.oschina.io\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n#- type: git\n#  repository: https://github.com/chaooo/chaooo.github.io.git\n#  branch: master\n- type: git\n  repository: https://git.oschina.net/chaoo/chaoo.git\n  branch: master\n```\n然后执行下面命令，以重新生成`baidusitemap.xml`。\n``` bash\nhexo generate -d\n```\n#### 3.验证网站\n百度搜索引擎入口：\n[百度搜索引擎入口](http://zhanzhang.baidu.com/linksubmit/url)。\n先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的`public/`下面 。\n然后部署到服务器,输入地址：`http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html`能访问到就可以点验证按钮(按照百度的引导步骤就好)。\n\n### 4.sitemap提交\n直接点击`sitemap`填写数据文件地址：`http://chaoo.oschina.io/baidusitemap.xml`,输入验证码提交。\n##### 自动推送\n自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到`\\themes\\landscape\\layout\\_partial\\after_footer.ejs`中的最下面就行。\n代码如下：\n``` javascript\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n\n这样就可以等待百度收录了。\n\n![博客迁移至码云4](http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg)","slug":"github博客迁移","published":1,"updated":"2017-07-30T07:21:47.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvv002fv0uigi4r6k3l","content":"<p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p>\n<h3 id=\"1-迁移代码\"><a href=\"#1-迁移代码\" class=\"headerlink\" title=\"1.迁移代码\"></a>1.迁移代码</h3><p>把代码从<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>迁移至<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br><a id=\"more\"></a><br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p>\n<h5 id=\"1-1-新建码云项目\"><a href=\"#1-1-新建码云项目\" class=\"headerlink\" title=\"1.1 新建码云项目\"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href=\"https://github.com/chaooo/chaooo.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href=\"http://chaooo.github.io\" target=\"_blank\" rel=\"external\">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg\" alt=\"博客迁移至码云1\"></p>\n<h5 id=\"1-2-开启pages服务\"><a href=\"#1-2-开启pages服务\" class=\"headerlink\" title=\"1.2 开启pages服务\"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg\" alt=\"博客迁移至码云2\"><br>至此，博客已经部署成功，访问提供的地址：<a href=\"http://chaoo.oschina.io\" target=\"_blank\" rel=\"external\">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg\" alt=\"博客迁移至码云3\"></p>\n<h3 id=\"2-修改hexo配置\"><a href=\"#2-修改hexo配置\" class=\"headerlink\" title=\"2.修改hexo配置\"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http://chaooo.github.io</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>修改为(根据自己的仓库地址修改)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"comment\">#url: http://chaooo.github.io</span></div><div class=\"line\">url: http://chaoo.oschina.io</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\"><span class=\"comment\">#- type: git</span></div><div class=\"line\"><span class=\"comment\">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></div><div class=\"line\"><span class=\"comment\">#  branch: master</span></div><div class=\"line\">- <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://git.oschina.net/chaoo/chaoo.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate -d</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-验证网站\"><a href=\"#3-验证网站\" class=\"headerlink\" title=\"3.验证网站\"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"external\">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>\n<h3 id=\"4-sitemap提交\"><a href=\"#4-sitemap提交\" class=\"headerlink\" title=\"4.sitemap提交\"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p>\n<h5 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\\themes\\landscape\\layout\\_partial\\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"built_in\">window</span>.location.protocol.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">'https'</span>) &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样就可以等待百度收录了。</p>\n<p><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg\" alt=\"博客迁移至码云4\"></p>\n","site":{"data":{}},"excerpt":"<p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p>\n<h3 id=\"1-迁移代码\"><a href=\"#1-迁移代码\" class=\"headerlink\" title=\"1.迁移代码\"></a>1.迁移代码</h3><p>把代码从<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>迁移至<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br>","more":"<br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p>\n<h5 id=\"1-1-新建码云项目\"><a href=\"#1-1-新建码云项目\" class=\"headerlink\" title=\"1.1 新建码云项目\"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href=\"https://github.com/chaooo/chaooo.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href=\"http://chaooo.github.io\" target=\"_blank\" rel=\"external\">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg\" alt=\"博客迁移至码云1\"></p>\n<h5 id=\"1-2-开启pages服务\"><a href=\"#1-2-开启pages服务\" class=\"headerlink\" title=\"1.2 开启pages服务\"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg\" alt=\"博客迁移至码云2\"><br>至此，博客已经部署成功，访问提供的地址：<a href=\"http://chaoo.oschina.io\" target=\"_blank\" rel=\"external\">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg\" alt=\"博客迁移至码云3\"></p>\n<h3 id=\"2-修改hexo配置\"><a href=\"#2-修改hexo配置\" class=\"headerlink\" title=\"2.修改hexo配置\"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http://chaooo.github.io</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>修改为(根据自己的仓库地址修改)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"comment\">#url: http://chaooo.github.io</span></div><div class=\"line\">url: http://chaoo.oschina.io</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\"><span class=\"comment\">#- type: git</span></div><div class=\"line\"><span class=\"comment\">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></div><div class=\"line\"><span class=\"comment\">#  branch: master</span></div><div class=\"line\">- <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://git.oschina.net/chaoo/chaoo.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate -d</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-验证网站\"><a href=\"#3-验证网站\" class=\"headerlink\" title=\"3.验证网站\"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href=\"http://zhanzhang.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"external\">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p>\n<h3 id=\"4-sitemap提交\"><a href=\"#4-sitemap提交\" class=\"headerlink\" title=\"4.sitemap提交\"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p>\n<h5 id=\"自动推送\"><a href=\"#自动推送\" class=\"headerlink\" title=\"自动推送\"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\\themes\\landscape\\layout\\_partial\\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"built_in\">window</span>.location.protocol.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">'https'</span>) &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        bp.src = <span class=\"string\">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样就可以等待百度收录了。</p>\n<p><img src=\"http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg\" alt=\"博客迁移至码云4\"></p>"},{"title":"sublime text3个人习惯配置","date":"2016-06-29T01:41:48.000Z","_content":"\n### 1、安装\n\n分别在官网下载并安装 [nodejs](https://nodejs.org/en/download/) 和 [sublime text3](https://www.sublimetext.com/3)。\n\n### 2、sublime text3注册：\n<!-- more --> \n点击菜单【help】－>【Enter License】，粘贴下面注册码(亲测v3103可用 ):\n``` bash\n—– BEGIN LICENSE —–\nRyan Clark\nSingle User License\nEA7E-812479\n2158A7DE B690A7A3 8EC04710 006A5EEB\n34E77CA3 9C82C81F 0DB6371B 79704E6F\n93F36655 B031503A 03257CCC 01B20F60\nD304FA8D B1B4F0AF 8A76C7BA 0FA94D55\n56D46BCE 5237A341 CD837F30 4D60772D\n349B1179 A996F826 90CDB73C 24D41245\nFD032C30 AD5E7241 4EAA66ED 167D91FB\n55896B16 EA125C81 F550AF6B A6820916\n—— END LICENSE ——\n```\n\n### 3、安装package control组件，用于管理所有插件\n\n按ctrl + ~调出控制台(或点击菜单栏的【View】->【Show Console】)，在Console窗口中输入以下代码，按回车键：\n``` bash\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n等待安装完毕，重启Sublime Text3。\n按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：\n\n### 4、用Package Control安装插件\n\n按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）\n`Material Theme`\n`Emmet`\n`CSS Format`\n`CSScomb`\n`jsFormat`\n`AutoFileName`\n`Autoprefixer`\n`Doc Blockr`\n`SublimeLinter`\n`SublimeLinter-jshint`\n`SublimeLinter-csslint`\n`Color Highlighter`\n`BracketHighlighter`\n\n### 5、配置nodejs\n\n##### 方法1\n(1)下载sublime Text的[nodejs插件](https://github.com/tanepiper/SublimeText-Nodejs)\n(2)下载后解压:直接改名为nodejs 放到 Preferences–>浏览程序包Browse Packages所在的文件夹\n(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\", \n  \"windows\": \n    { \n        \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"] \n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(4)修改为：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(5)完成:随便写一段nodejs代码，ctrl+B运行\n(6)注意：在手动解压sublime Text插件后，需要在preference->package settings->package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。\n\n##### 方法2\n首先需要先安装[nodejs](https://nodejs.org/en/download/)。\n(1)运行Sublime,菜单上找到Tools ---> Build System ---> new Build System\n(2)输入：\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    }\n}\n(3)保存文件为NodeJs.sublime-build\n(4)菜单上找到Tools ---> Build System --->选择 NodeJs\n(5)安装sublime插件 JavaScript & NodeJs Snippets\n(6)新建test.js文件，输入 console.log('Hello Node.js'); 按快捷键 Ctrl + B 运行，成功输出","source":"_posts/sublime-text3个人习惯配置-C.md","raw":"---\ntitle: sublime text3个人习惯配置\ndate: 2016-06-29 09:41:48\ntags: sublime\ncategories: 前端工具\n---\n\n### 1、安装\n\n分别在官网下载并安装 [nodejs](https://nodejs.org/en/download/) 和 [sublime text3](https://www.sublimetext.com/3)。\n\n### 2、sublime text3注册：\n<!-- more --> \n点击菜单【help】－>【Enter License】，粘贴下面注册码(亲测v3103可用 ):\n``` bash\n—– BEGIN LICENSE —–\nRyan Clark\nSingle User License\nEA7E-812479\n2158A7DE B690A7A3 8EC04710 006A5EEB\n34E77CA3 9C82C81F 0DB6371B 79704E6F\n93F36655 B031503A 03257CCC 01B20F60\nD304FA8D B1B4F0AF 8A76C7BA 0FA94D55\n56D46BCE 5237A341 CD837F30 4D60772D\n349B1179 A996F826 90CDB73C 24D41245\nFD032C30 AD5E7241 4EAA66ED 167D91FB\n55896B16 EA125C81 F550AF6B A6820916\n—— END LICENSE ——\n```\n\n### 3、安装package control组件，用于管理所有插件\n\n按ctrl + ~调出控制台(或点击菜单栏的【View】->【Show Console】)，在Console窗口中输入以下代码，按回车键：\n``` bash\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n等待安装完毕，重启Sublime Text3。\n按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：\n\n### 4、用Package Control安装插件\n\n按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）\n`Material Theme`\n`Emmet`\n`CSS Format`\n`CSScomb`\n`jsFormat`\n`AutoFileName`\n`Autoprefixer`\n`Doc Blockr`\n`SublimeLinter`\n`SublimeLinter-jshint`\n`SublimeLinter-csslint`\n`Color Highlighter`\n`BracketHighlighter`\n\n### 5、配置nodejs\n\n##### 方法1\n(1)下载sublime Text的[nodejs插件](https://github.com/tanepiper/SublimeText-Nodejs)\n(2)下载后解压:直接改名为nodejs 放到 Preferences–>浏览程序包Browse Packages所在的文件夹\n(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\", \n  \"windows\": \n    { \n        \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"] \n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(4)修改为：\n``` json\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    },\n  \"linux\":\n    {\n        \"cmd\": [\"killall node; node\", \"$file\"]\n    },\n    \"osx\":\n    {\n  \"cmd\": [\"killall node; node $file\"]\n    }\n}\n```\n(5)完成:随便写一段nodejs代码，ctrl+B运行\n(6)注意：在手动解压sublime Text插件后，需要在preference->package settings->package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。\n\n##### 方法2\n首先需要先安装[nodejs](https://nodejs.org/en/download/)。\n(1)运行Sublime,菜单上找到Tools ---> Build System ---> new Build System\n(2)输入：\n{\n  \"cmd\": [\"node\", \"$file\"],\n  \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"utf-8\",\n  \"windows\":\n    {\n      \"cmd\": [\"taskkill /F /IM node.exe\", \"\"],\n      \"cmd\": [\"node\", \"$file\"]\n    }\n}\n(3)保存文件为NodeJs.sublime-build\n(4)菜单上找到Tools ---> Build System --->选择 NodeJs\n(5)安装sublime插件 JavaScript & NodeJs Snippets\n(6)新建test.js文件，输入 console.log('Hello Node.js'); 按快捷键 Ctrl + B 运行，成功输出","slug":"sublime-text3个人习惯配置-C","published":1,"updated":"2017-07-30T07:21:47.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvvy002jv0uianyi3ftc","content":"<h3 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h3><p>分别在官网下载并安装 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">nodejs</a> 和 <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">sublime text3</a>。</p>\n<h3 id=\"2、sublime-text3注册：\"><a href=\"#2、sublime-text3注册：\" class=\"headerlink\" title=\"2、sublime text3注册：\"></a>2、sublime text3注册：</h3><a id=\"more\"></a> \n<p>点击菜单【help】－&gt;【Enter License】，粘贴下面注册码(亲测v3103可用 ):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">—– BEGIN LICENSE —–</div><div class=\"line\">Ryan Clark</div><div class=\"line\">Single User License</div><div class=\"line\">EA7E-812479</div><div class=\"line\">2158A7DE B690A7A3 8EC04710 006A5EEB</div><div class=\"line\">34E77CA3 9C82C81F 0DB6371B 79704E6F</div><div class=\"line\">93F36655 B031503A 03257CCC 01B20F60</div><div class=\"line\">D304FA8D B1B4F0AF 8A76C7BA 0FA94D55</div><div class=\"line\">56D46BCE 5237A341 CD837F30 4D60772D</div><div class=\"line\">349B1179 A996F826 90CDB73C 24D41245</div><div class=\"line\">FD032C30 AD5E7241 4EAA66ED 167D91FB</div><div class=\"line\">55896B16 EA125C81 F550AF6B A6820916</div><div class=\"line\">—— END LICENSE ——</div></pre></td></tr></table></figure></p>\n<h3 id=\"3、安装package-control组件，用于管理所有插件\"><a href=\"#3、安装package-control组件，用于管理所有插件\" class=\"headerlink\" title=\"3、安装package control组件，用于管理所有插件\"></a>3、安装package control组件，用于管理所有插件</h3><p>按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>\n<p>等待安装完毕，重启Sublime Text3。<br>按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：</p>\n<h3 id=\"4、用Package-Control安装插件\"><a href=\"#4、用Package-Control安装插件\" class=\"headerlink\" title=\"4、用Package Control安装插件\"></a>4、用Package Control安装插件</h3><p>按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）<br><code>Material Theme</code><br><code>Emmet</code><br><code>CSS Format</code><br><code>CSScomb</code><br><code>jsFormat</code><br><code>AutoFileName</code><br><code>Autoprefixer</code><br><code>Doc Blockr</code><br><code>SublimeLinter</code><br><code>SublimeLinter-jshint</code><br><code>SublimeLinter-csslint</code><br><code>Color Highlighter</code><br><code>BracketHighlighter</code></p>\n<h3 id=\"5、配置nodejs\"><a href=\"#5、配置nodejs\" class=\"headerlink\" title=\"5、配置nodejs\"></a>5、配置nodejs</h3><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p>(1)下载sublime Text的<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"external\">nodejs插件</a><br>(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹<br>(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"cp1252\"</span>, </div><div class=\"line\">  <span class=\"attr\">\"windows\"</span>: </div><div class=\"line\">    &#123; </div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe &amp; node\"</span>, <span class=\"string\">\"$file\"</span>] </div><div class=\"line\">    &#125;,</div><div class=\"line\">  <span class=\"attr\">\"linux\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"osx\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)修改为：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"utf-8\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"windows\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe\"</span>, <span class=\"string\">\"\"</span>],</div><div class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">  <span class=\"attr\">\"linux\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"osx\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(5)完成:随便写一段nodejs代码，ctrl+B运行<br>(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。</p>\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>首先需要先安装<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">nodejs</a>。<br>(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System<br>(2)输入：<br>{<br>  “cmd”: [“node”, “$file”],<br>  “file_regex”: “^[ ]<em>File \\”(…</em>?)\\”, line ([0-9]*)”,<br>  “selector”: “source.js”,<br>  “shell”:true,<br>  “encoding”: “utf-8”,<br>  “windows”:<br>    {<br>      “cmd”: [“taskkill /F /IM node.exe”, “”],<br>      “cmd”: [“node”, “$file”]<br>    }<br>}<br>(3)保存文件为NodeJs.sublime-build<br>(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs<br>(5)安装sublime插件 JavaScript &amp; NodeJs Snippets<br>(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h3><p>分别在官网下载并安装 <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">nodejs</a> 和 <a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">sublime text3</a>。</p>\n<h3 id=\"2、sublime-text3注册：\"><a href=\"#2、sublime-text3注册：\" class=\"headerlink\" title=\"2、sublime text3注册：\"></a>2、sublime text3注册：</h3>","more":"<p>点击菜单【help】－&gt;【Enter License】，粘贴下面注册码(亲测v3103可用 ):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">—– BEGIN LICENSE —–</div><div class=\"line\">Ryan Clark</div><div class=\"line\">Single User License</div><div class=\"line\">EA7E-812479</div><div class=\"line\">2158A7DE B690A7A3 8EC04710 006A5EEB</div><div class=\"line\">34E77CA3 9C82C81F 0DB6371B 79704E6F</div><div class=\"line\">93F36655 B031503A 03257CCC 01B20F60</div><div class=\"line\">D304FA8D B1B4F0AF 8A76C7BA 0FA94D55</div><div class=\"line\">56D46BCE 5237A341 CD837F30 4D60772D</div><div class=\"line\">349B1179 A996F826 90CDB73C 24D41245</div><div class=\"line\">FD032C30 AD5E7241 4EAA66ED 167D91FB</div><div class=\"line\">55896B16 EA125C81 F550AF6B A6820916</div><div class=\"line\">—— END LICENSE ——</div></pre></td></tr></table></figure></p>\n<h3 id=\"3、安装package-control组件，用于管理所有插件\"><a href=\"#3、安装package-control组件，用于管理所有插件\" class=\"headerlink\" title=\"3、安装package control组件，用于管理所有插件\"></a>3、安装package control组件，用于管理所有插件</h3><p>按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>\n<p>等待安装完毕，重启Sublime Text3。<br>按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control：</p>\n<h3 id=\"4、用Package-Control安装插件\"><a href=\"#4、用Package-Control安装插件\" class=\"headerlink\" title=\"4、用Package Control安装插件\"></a>4、用Package Control安装插件</h3><p>按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）<br><code>Material Theme</code><br><code>Emmet</code><br><code>CSS Format</code><br><code>CSScomb</code><br><code>jsFormat</code><br><code>AutoFileName</code><br><code>Autoprefixer</code><br><code>Doc Blockr</code><br><code>SublimeLinter</code><br><code>SublimeLinter-jshint</code><br><code>SublimeLinter-csslint</code><br><code>Color Highlighter</code><br><code>BracketHighlighter</code></p>\n<h3 id=\"5、配置nodejs\"><a href=\"#5、配置nodejs\" class=\"headerlink\" title=\"5、配置nodejs\"></a>5、配置nodejs</h3><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p>(1)下载sublime Text的<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"external\">nodejs插件</a><br>(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹<br>(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"cp1252\"</span>, </div><div class=\"line\">  <span class=\"attr\">\"windows\"</span>: </div><div class=\"line\">    &#123; </div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe &amp; node\"</span>, <span class=\"string\">\"$file\"</span>] </div><div class=\"line\">    &#125;,</div><div class=\"line\">  <span class=\"attr\">\"linux\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"osx\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)修改为：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"shell\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"utf-8\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"windows\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"taskkill /F /IM node.exe\"</span>, <span class=\"string\">\"\"</span>],</div><div class=\"line\">      <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">  <span class=\"attr\">\"linux\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node\"</span>, <span class=\"string\">\"$file\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"osx\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: [<span class=\"string\">\"killall node; node $file\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(5)完成:随便写一段nodejs代码，ctrl+B运行<br>(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。</p>\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>首先需要先安装<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">nodejs</a>。<br>(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System<br>(2)输入：<br>{<br>  “cmd”: [“node”, “$file”],<br>  “file_regex”: “^[ ]<em>File \\”(…</em>?)\\”, line ([0-9]*)”,<br>  “selector”: “source.js”,<br>  “shell”:true,<br>  “encoding”: “utf-8”,<br>  “windows”:<br>    {<br>      “cmd”: [“taskkill /F /IM node.exe”, “”],<br>      “cmd”: [“node”, “$file”]<br>    }<br>}<br>(3)保存文件为NodeJs.sublime-build<br>(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs<br>(5)安装sublime插件 JavaScript &amp; NodeJs Snippets<br>(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出</p>"},{"title":"自定义HEXO站内搜索Javascript+json","date":"2016-11-09T01:24:56.000Z","_content":"\n### 开始之前\n\n目前很多[Hexo](https://hexo.io/)博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：\n    [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)生成`xml`格式的数据文件。\n    [hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content) 生成`json`格式的数据文件。 \n今天的主角是[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。\n### 1.安装 \n\n``` bash \n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后执行`hexo generate`时会自动生成`content.json`文件，若使用默认设置，生成的数据结构如下 \n``` json\nmeta: {\n    title: hexo.config.title,\n    subtitle: hexo.config.subtitle,\n    description: hexo.config.description,\n    author: hexo.config.author,\n    url: hexo.config.url\n},\npages: [{ //-> all pages\n    title: page.title,\n    slug: page.slug,\n    date: page.date,\n    updated: page.updated,\n    comments: page.comments,\n    permalink: page.permalink,\n    path: page.path,\n    excerpt: page.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: page.content, //-> only text minified ;)\n    raw: page.raw, //-> original MD content\n    content: page.content //-> final HTML content\n}],\nposts: [{ //-> only published posts\n    title: post.title,\n    slug: post.slug,\n    date: post.date,\n    updated: post.updated,\n    comments: post.comments,\n    permalink: post.permalink,\n    path: post.path,\n    excerpt: post.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: post.content, //-> only text minified ;)\n    raw: post.raw, //-> original MD content\n    content: post.content, //-> final HTML content\n    categories: [{\n        name: category.name,\n        slug: category.slug,\n        permalink: category.permalink\n    }],\n    tags: [{\n        name: tag.name,\n        slug: tag.slug,\n        permalink: tag.permalink\n    }]\n}]\n```\n### 2.配置 \n\nhexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：\n``` yml\njsonContent:\n  meta: true\n  keywords: false # (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)\n  pages:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n    categories: true\n    tags: true\n```\n因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在`hexo/_config.yml`中加入：\n``` yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true #文章标题\n    date: true #发表日期\n    path: true #路径\n    text: true #文本字段\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true #标签\n```\n这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。\n例如：\n``` json\n{\n  \"title\": \"自定义HEXO站内搜索Javascript+json\",\n  \"date\": \"2016-11-09T01:24:56.000Z\",\n  \"path\": \"2016/11/09/自定义HEXO站内搜索Javascript-json.html\",\n  \"text\": \"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\",\n  \"tags\": [{\n    \"name\": \"javascript,hexo\",\n    \"slug\": \"javascript-hexo\",\n    \"permalink\": \"http://chaoo.oschina.io/tags/javascript-hexo/\"\n  }]\n}\n```\n### 3.JavaScript实现代码\n\n接下来就是用JS实现查询方法并把结果渲染到页面。\n#### 3.1 xhr加载数据\n``` javascript\nvar searchData;\nfunction loadData(success) {\n    if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/content.json', true);\n        xhr.onload = function() {\n            if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response || this.responseText);\n                searchData = res instanceof Array ? res : res.posts;\n                success(searchData);\n            } else {\n                console.error(this.statusText);\n            }\n        };\n        xhr.onerror = function() {\n            console.error(this.statusText);\n        };\n        xhr.send();\n    } else {\n        success(searchData);\n    }\n}\n```\n#### 3.2 匹配文章内容返回结果\n``` javascript\nfunction matcher(post, regExp) {\n    // 匹配优先级：title > tags > text\n    return regtest(post.title, regExp) || post.tags.some(function(tag) {\n        return regtest(tag.name, regExp);\n    }) || regtest(post.text, regExp);\n}\nfunction regtest(raw, regExp) {\n    regExp.lastIndex = 0;\n    return regExp.test(raw);\n}\n```\n#### 3.3 结果渲染到页面\n``` javascript\nfunction render(data) {\n    var html = '';\n    if (data.length) {\n        html = data.map(function(post) {\n            return tpl(searchTpl, {\n                title: post.title,\n                path: post.path,\n                date: new Date(post.date).toLocaleDateString(),\n                tags: post.tags.map(function(tag) {\n                    return '<span>' + tag.name + '</span>';\n                }).join('')\n            });\n        }).join('');\n    } \n}\n```\n#### 3.3 查询匹配\n``` javascript\nfunction search(key) {\n    // 关键字 => 正则，空格隔开的看作多个关键字\n    // a b c => /a|b|c/gmi\n    var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi');\n    loadData(function(data) {\n        var result = data.filter(function(post) {\n            return matcher(post, regExp);\n        });\n        render(result);\n    });\n}\n```","source":"_posts/自定义HEXO站内搜索Javascript-json.md","raw":"---\ntitle: 自定义HEXO站内搜索Javascript+json\ndate: 2016-11-09 09:24:56\ntags: [javascript,hexo]\ncategories: hexo博客折腾\n---\n\n### 开始之前\n\n目前很多[Hexo](https://hexo.io/)博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：\n    [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)生成`xml`格式的数据文件。\n    [hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content) 生成`json`格式的数据文件。 \n今天的主角是[hexo-generator-json-content](https://github.com/alexbruno/hexo-generator-json-content)，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。\n### 1.安装 \n\n``` bash \n$ npm install hexo-generator-json-content@2.2.0 --save\n```\n然后执行`hexo generate`时会自动生成`content.json`文件，若使用默认设置，生成的数据结构如下 \n``` json\nmeta: {\n    title: hexo.config.title,\n    subtitle: hexo.config.subtitle,\n    description: hexo.config.description,\n    author: hexo.config.author,\n    url: hexo.config.url\n},\npages: [{ //-> all pages\n    title: page.title,\n    slug: page.slug,\n    date: page.date,\n    updated: page.updated,\n    comments: page.comments,\n    permalink: page.permalink,\n    path: page.path,\n    excerpt: page.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: page.content, //-> only text minified ;)\n    raw: page.raw, //-> original MD content\n    content: page.content //-> final HTML content\n}],\nposts: [{ //-> only published posts\n    title: post.title,\n    slug: post.slug,\n    date: post.date,\n    updated: post.updated,\n    comments: post.comments,\n    permalink: post.permalink,\n    path: post.path,\n    excerpt: post.excerpt, //-> only text ;)\n    keywords: null //-> it needs settings\n    text: post.content, //-> only text minified ;)\n    raw: post.raw, //-> original MD content\n    content: post.content, //-> final HTML content\n    categories: [{\n        name: category.name,\n        slug: category.slug,\n        permalink: category.permalink\n    }],\n    tags: [{\n        name: tag.name,\n        slug: tag.slug,\n        permalink: tag.permalink\n    }]\n}]\n```\n### 2.配置 \n\nhexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：\n``` yml\njsonContent:\n  meta: true\n  keywords: false # (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)\n  pages:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n  posts:\n    title: true\n    slug: true\n    date: true\n    updated: true\n    comments: true\n    path: true\n    link: true\n    permalink: true\n    excerpt: true\n    keywords: true # but only if root keywords option language was set\n    text: true\n    raw: false\n    content: false\n    categories: true\n    tags: true\n```\n因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在`hexo/_config.yml`中加入：\n``` yml\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true #文章标题\n    date: true #发表日期\n    path: true #路径\n    text: true #文本字段\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true #标签\n```\n这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。\n例如：\n``` json\n{\n  \"title\": \"自定义HEXO站内搜索Javascript+json\",\n  \"date\": \"2016-11-09T01:24:56.000Z\",\n  \"path\": \"2016/11/09/自定义HEXO站内搜索Javascript-json.html\",\n  \"text\": \"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\",\n  \"tags\": [{\n    \"name\": \"javascript,hexo\",\n    \"slug\": \"javascript-hexo\",\n    \"permalink\": \"http://chaoo.oschina.io/tags/javascript-hexo/\"\n  }]\n}\n```\n### 3.JavaScript实现代码\n\n接下来就是用JS实现查询方法并把结果渲染到页面。\n#### 3.1 xhr加载数据\n``` javascript\nvar searchData;\nfunction loadData(success) {\n    if (!searchData) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', '/content.json', true);\n        xhr.onload = function() {\n            if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response || this.responseText);\n                searchData = res instanceof Array ? res : res.posts;\n                success(searchData);\n            } else {\n                console.error(this.statusText);\n            }\n        };\n        xhr.onerror = function() {\n            console.error(this.statusText);\n        };\n        xhr.send();\n    } else {\n        success(searchData);\n    }\n}\n```\n#### 3.2 匹配文章内容返回结果\n``` javascript\nfunction matcher(post, regExp) {\n    // 匹配优先级：title > tags > text\n    return regtest(post.title, regExp) || post.tags.some(function(tag) {\n        return regtest(tag.name, regExp);\n    }) || regtest(post.text, regExp);\n}\nfunction regtest(raw, regExp) {\n    regExp.lastIndex = 0;\n    return regExp.test(raw);\n}\n```\n#### 3.3 结果渲染到页面\n``` javascript\nfunction render(data) {\n    var html = '';\n    if (data.length) {\n        html = data.map(function(post) {\n            return tpl(searchTpl, {\n                title: post.title,\n                path: post.path,\n                date: new Date(post.date).toLocaleDateString(),\n                tags: post.tags.map(function(tag) {\n                    return '<span>' + tag.name + '</span>';\n                }).join('')\n            });\n        }).join('');\n    } \n}\n```\n#### 3.3 查询匹配\n``` javascript\nfunction search(key) {\n    // 关键字 => 正则，空格隔开的看作多个关键字\n    // a b c => /a|b|c/gmi\n    var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi');\n    loadData(function(data) {\n        var result = data.filter(function(post) {\n            return matcher(post, regExp);\n        });\n        render(result);\n    });\n}\n```","slug":"自定义HEXO站内搜索Javascript-json","published":1,"updated":"2017-07-30T07:21:47.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ypzvw2002nv0uivronywmj","content":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>目前很多<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"external\">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure>\n<p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">meta: &#123;</div><div class=\"line\">    title: hexo.config.title,</div><div class=\"line\">    subtitle: hexo.config.subtitle,</div><div class=\"line\">    description: hexo.config.description,</div><div class=\"line\">    author: hexo.config.author,</div><div class=\"line\">    url: hexo.config.url</div><div class=\"line\">&#125;,</div><div class=\"line\">pages: [&#123; //-&gt; all pages</div><div class=\"line\">    title: page.title,</div><div class=\"line\">    slug: page.slug,</div><div class=\"line\">    date: page.date,</div><div class=\"line\">    updated: page.updated,</div><div class=\"line\">    comments: page.comments,</div><div class=\"line\">    permalink: page.permalink,</div><div class=\"line\">    path: page.path,</div><div class=\"line\">    excerpt: page.excerpt, //-&gt; only text ;)</div><div class=\"line\">    keywords: null //-&gt; it needs settings</div><div class=\"line\">    text: page.content, //-&gt; only text minified ;)</div><div class=\"line\">    raw: page.raw, //-&gt; original MD content</div><div class=\"line\">    content: page.content //-&gt; final HTML content</div><div class=\"line\">&#125;],</div><div class=\"line\">posts: [&#123; //-&gt; only published posts</div><div class=\"line\">    title: post.title,</div><div class=\"line\">    slug: post.slug,</div><div class=\"line\">    date: post.date,</div><div class=\"line\">    updated: post.updated,</div><div class=\"line\">    comments: post.comments,</div><div class=\"line\">    permalink: post.permalink,</div><div class=\"line\">    path: post.path,</div><div class=\"line\">    excerpt: post.excerpt, //-&gt; only text ;)</div><div class=\"line\">    keywords: null //-&gt; it needs settings</div><div class=\"line\">    text: post.content, //-&gt; only text minified ;)</div><div class=\"line\">    raw: post.raw, //-&gt; original MD content</div><div class=\"line\">    content: post.content, //-&gt; final HTML content</div><div class=\"line\">    categories: [&#123;</div><div class=\"line\">        name: category.name,</div><div class=\"line\">        slug: category.slug,</div><div class=\"line\">        permalink: category.permalink</div><div class=\"line\">    &#125;],</div><div class=\"line\">    tags: [&#123;</div><div class=\"line\">        name: tag.name,</div><div class=\"line\">        slug: tag.slug,</div><div class=\"line\">        permalink: tag.permalink</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  keywords:</span> <span class=\"literal\">false</span> <span class=\"comment\"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></div><div class=\"line\"><span class=\"attr\">  pages:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文章标题</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span> <span class=\"comment\">#发表日期</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span> <span class=\"comment\">#路径</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文本字段</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span> <span class=\"comment\">#标签</span></div></pre></td></tr></table></figure></p>\n<p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"自定义HEXO站内搜索Javascript+json\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2016-11-09T01:24:56.000Z\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"2016/11/09/自定义HEXO站内搜索Javascript-json.html\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"tags\"</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"javascript,hexo\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"slug\"</span>: <span class=\"string\">\"javascript-hexo\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"permalink\"</span>: <span class=\"string\">\"http://chaoo.oschina.io/tags/javascript-hexo/\"</span></div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-JavaScript实现代码\"><a href=\"#3-JavaScript实现代码\" class=\"headerlink\" title=\"3.JavaScript实现代码\"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p>\n<h4 id=\"3-1-xhr加载数据\"><a href=\"#3-1-xhr加载数据\" class=\"headerlink\" title=\"3.1 xhr加载数据\"></a>3.1 xhr加载数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> searchData;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadData</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!searchData) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/content.json'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">        xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status &gt;= <span class=\"number\">200</span> &amp;&amp; <span class=\"keyword\">this</span>.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.response || <span class=\"keyword\">this</span>.responseText);</div><div class=\"line\">                searchData = res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? res : res.posts;</div><div class=\"line\">                success(searchData);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        xhr.send();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        success(searchData);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-匹配文章内容返回结果\"><a href=\"#3-2-匹配文章内容返回结果\" class=\"headerlink\" title=\"3.2 匹配文章内容返回结果\"></a>3.2 匹配文章内容返回结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matcher</span>(<span class=\"params\">post, regExp</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 匹配优先级：title &gt; tags &gt; text</span></div><div class=\"line\">    <span class=\"keyword\">return</span> regtest(post.title, regExp) || post.tags.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> regtest(tag.name, regExp);</div><div class=\"line\">    &#125;) || regtest(post.text, regExp);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regtest</span>(<span class=\"params\">raw, regExp</span>) </span>&#123;</div><div class=\"line\">    regExp.lastIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> regExp.test(raw);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-结果渲染到页面\"><a href=\"#3-3-结果渲染到页面\" class=\"headerlink\" title=\"3.3 结果渲染到页面\"></a>3.3 结果渲染到页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.length) &#123;</div><div class=\"line\">        html = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> tpl(searchTpl, &#123;</div><div class=\"line\">                title: post.title,</div><div class=\"line\">                path: post.path,</div><div class=\"line\">                date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(post.date).toLocaleDateString(),</div><div class=\"line\">                tags: post.tags.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span&gt;'</span> + tag.name + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">                &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;).join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-查询匹配\"><a href=\"#3-3-查询匹配\" class=\"headerlink\" title=\"3.3 查询匹配\"></a>3.3 查询匹配</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></div><div class=\"line\">    <span class=\"comment\">// a b c =&gt; /a|b|c/gmi</span></div><div class=\"line\">    <span class=\"keyword\">var</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key.replace(<span class=\"regexp\">/[ ]/g</span>, <span class=\"string\">'|'</span>), <span class=\"string\">'gmi'</span>);</div><div class=\"line\">    loadData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> matcher(post, regExp);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        render(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>目前很多<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"external\">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href=\"https://github.com/alexbruno/hexo-generator-json-content\" target=\"_blank\" rel=\"external\">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure>\n<p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">meta: &#123;</div><div class=\"line\">    title: hexo.config.title,</div><div class=\"line\">    subtitle: hexo.config.subtitle,</div><div class=\"line\">    description: hexo.config.description,</div><div class=\"line\">    author: hexo.config.author,</div><div class=\"line\">    url: hexo.config.url</div><div class=\"line\">&#125;,</div><div class=\"line\">pages: [&#123; //-&gt; all pages</div><div class=\"line\">    title: page.title,</div><div class=\"line\">    slug: page.slug,</div><div class=\"line\">    date: page.date,</div><div class=\"line\">    updated: page.updated,</div><div class=\"line\">    comments: page.comments,</div><div class=\"line\">    permalink: page.permalink,</div><div class=\"line\">    path: page.path,</div><div class=\"line\">    excerpt: page.excerpt, //-&gt; only text ;)</div><div class=\"line\">    keywords: null //-&gt; it needs settings</div><div class=\"line\">    text: page.content, //-&gt; only text minified ;)</div><div class=\"line\">    raw: page.raw, //-&gt; original MD content</div><div class=\"line\">    content: page.content //-&gt; final HTML content</div><div class=\"line\">&#125;],</div><div class=\"line\">posts: [&#123; //-&gt; only published posts</div><div class=\"line\">    title: post.title,</div><div class=\"line\">    slug: post.slug,</div><div class=\"line\">    date: post.date,</div><div class=\"line\">    updated: post.updated,</div><div class=\"line\">    comments: post.comments,</div><div class=\"line\">    permalink: post.permalink,</div><div class=\"line\">    path: post.path,</div><div class=\"line\">    excerpt: post.excerpt, //-&gt; only text ;)</div><div class=\"line\">    keywords: null //-&gt; it needs settings</div><div class=\"line\">    text: post.content, //-&gt; only text minified ;)</div><div class=\"line\">    raw: post.raw, //-&gt; original MD content</div><div class=\"line\">    content: post.content, //-&gt; final HTML content</div><div class=\"line\">    categories: [&#123;</div><div class=\"line\">        name: category.name,</div><div class=\"line\">        slug: category.slug,</div><div class=\"line\">        permalink: category.permalink</div><div class=\"line\">    &#125;],</div><div class=\"line\">    tags: [&#123;</div><div class=\"line\">        name: tag.name,</div><div class=\"line\">        slug: tag.slug,</div><div class=\"line\">        permalink: tag.permalink</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  keywords:</span> <span class=\"literal\">false</span> <span class=\"comment\"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></div><div class=\"line\"><span class=\"attr\">  pages:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    keywords:</span> <span class=\"literal\">true</span> <span class=\"comment\"># but only if root keywords option language was set</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文章标题</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span> <span class=\"comment\">#发表日期</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span> <span class=\"comment\">#路径</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span> <span class=\"comment\">#文本字段</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span> <span class=\"comment\">#标签</span></div></pre></td></tr></table></figure></p>\n<p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"自定义HEXO站内搜索Javascript+json\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"date\"</span>: <span class=\"string\">\"2016-11-09T01:24:56.000Z\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"2016/11/09/自定义HEXO站内搜索Javascript-json.html\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"text\"</span>: <span class=\"string\">\"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"tags\"</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"javascript,hexo\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"slug\"</span>: <span class=\"string\">\"javascript-hexo\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"permalink\"</span>: <span class=\"string\">\"http://chaoo.oschina.io/tags/javascript-hexo/\"</span></div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-JavaScript实现代码\"><a href=\"#3-JavaScript实现代码\" class=\"headerlink\" title=\"3.JavaScript实现代码\"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p>\n<h4 id=\"3-1-xhr加载数据\"><a href=\"#3-1-xhr加载数据\" class=\"headerlink\" title=\"3.1 xhr加载数据\"></a>3.1 xhr加载数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> searchData;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadData</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!searchData) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/content.json'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">        xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status &gt;= <span class=\"number\">200</span> &amp;&amp; <span class=\"keyword\">this</span>.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">this</span>.response || <span class=\"keyword\">this</span>.responseText);</div><div class=\"line\">                searchData = res <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? res : res.posts;</div><div class=\"line\">                success(searchData);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        xhr.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"keyword\">this</span>.statusText);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        xhr.send();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        success(searchData);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-匹配文章内容返回结果\"><a href=\"#3-2-匹配文章内容返回结果\" class=\"headerlink\" title=\"3.2 匹配文章内容返回结果\"></a>3.2 匹配文章内容返回结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matcher</span>(<span class=\"params\">post, regExp</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 匹配优先级：title &gt; tags &gt; text</span></div><div class=\"line\">    <span class=\"keyword\">return</span> regtest(post.title, regExp) || post.tags.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> regtest(tag.name, regExp);</div><div class=\"line\">    &#125;) || regtest(post.text, regExp);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regtest</span>(<span class=\"params\">raw, regExp</span>) </span>&#123;</div><div class=\"line\">    regExp.lastIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> regExp.test(raw);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-结果渲染到页面\"><a href=\"#3-3-结果渲染到页面\" class=\"headerlink\" title=\"3.3 结果渲染到页面\"></a>3.3 结果渲染到页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.length) &#123;</div><div class=\"line\">        html = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> tpl(searchTpl, &#123;</div><div class=\"line\">                title: post.title,</div><div class=\"line\">                path: post.path,</div><div class=\"line\">                date: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(post.date).toLocaleDateString(),</div><div class=\"line\">                tags: post.tags.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span&gt;'</span> + tag.name + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">                &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;).join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-查询匹配\"><a href=\"#3-3-查询匹配\" class=\"headerlink\" title=\"3.3 查询匹配\"></a>3.3 查询匹配</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></div><div class=\"line\">    <span class=\"comment\">// a b c =&gt; /a|b|c/gmi</span></div><div class=\"line\">    <span class=\"keyword\">var</span> regExp = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(key.replace(<span class=\"regexp\">/[ ]/g</span>, <span class=\"string\">'|'</span>), <span class=\"string\">'gmi'</span>);</div><div class=\"line\">    loadData(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> matcher(post, regExp);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        render(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5ypzvru0007v0ui1jm16zlz","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvsg000dv0uitnnw7p0u"},{"post_id":"cj5ypzvr10001v0uijsq47a1v","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvsn000iv0ui15ioryuj"},{"post_id":"cj5ypzvs10008v0uicn4i3rws","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvsv000lv0uiqgkug7dy"},{"post_id":"cj5ypzvrb0003v0uird124777","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvt3000qv0uipoeuf93q"},{"post_id":"cj5ypzvrn0006v0uicspknpko","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvt8000tv0uidjhctanf"},{"post_id":"cj5ypzvsd000cv0uip82hsfep","category_id":"cj5ypzvsz000nv0uip4fzzxra","_id":"cj5ypzvtn0010v0uiohysli24"},{"post_id":"cj5ypzvsi000fv0uic7vf1vvq","category_id":"cj5ypzvtd000vv0uirj9o6rzc","_id":"cj5ypzvtw0015v0uix086u4xa"},{"post_id":"cj5ypzvso000jv0ui4din0lwx","category_id":"cj5ypzvtd000vv0uirj9o6rzc","_id":"cj5ypzvua001av0uiocw32m3p"},{"post_id":"cj5ypzvty0018v0uigbo7vup9","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvui001ev0uioye8f5p5"},{"post_id":"cj5ypzvsw000mv0uisnpekbf5","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvun001hv0uiv5sc12d0"},{"post_id":"cj5ypzvu20019v0uiq9g4qy87","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvut001mv0uib07a3nqo"},{"post_id":"cj5ypzvub001cv0ui8et7zj75","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvux001pv0ui29tb45z7"},{"post_id":"cj5ypzvt4000rv0uigb3u2i9a","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvv8001uv0uiwps6aci5"},{"post_id":"cj5ypzvuj001gv0ui8d22w8b7","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvb001xv0ui40z3nm38"},{"post_id":"cj5ypzvup001kv0uimix96od0","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvi0022v0ui0sqe5r7f"},{"post_id":"cj5ypzvtb000uv0uiqaizpghg","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvl0025v0uifia5ib53"},{"post_id":"cj5ypzvuu001ov0uifyzgri7y","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvp002av0uity9bxgw4"},{"post_id":"cj5ypzvv4001sv0ui2lpzc1dv","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvu002dv0uiyb5yf7qq"},{"post_id":"cj5ypzvtg000xv0uilhse2thu","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvvx002iv0uiz3vp4ced"},{"post_id":"cj5ypzvv9001vv0uinbxtzndx","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvw1002lv0uii1vuxy8j"},{"post_id":"cj5ypzvvc001zv0uirt5gt83r","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvw9002qv0ui7begzna2"},{"post_id":"cj5ypzvtl000zv0uiw38fze1j","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvwc002sv0ui97ef5z4r"},{"post_id":"cj5ypzvvj0023v0ui5usadmlu","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvwd002wv0uiok9jdd8t"},{"post_id":"cj5ypzvvm0027v0uicn30m24m","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvwe002yv0uidqfbmlxo"},{"post_id":"cj5ypzvtp0013v0ui4ayxdijd","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvwf0031v0uir3qolvn8"},{"post_id":"cj5ypzvvv002fv0uigi4r6k3l","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvwf0033v0ui7d7x089i"},{"post_id":"cj5ypzvts0014v0ui3shsqy4q","category_id":"cj5ypzvtw0016v0ui9vqh992v","_id":"cj5ypzvwh0035v0uinra5t3wm"},{"post_id":"cj5ypzvw2002nv0uivronywmj","category_id":"cj5ypzvrf0004v0ui4oclwcak","_id":"cj5ypzvwi0037v0ui7uo3tctz"},{"post_id":"cj5ypzvvq002bv0ui14a8ns3u","category_id":"cj5ypzvw1002mv0ui9dbr02l1","_id":"cj5ypzvwj0039v0uipohfi221"},{"post_id":"cj5ypzvvy002jv0uianyi3ftc","category_id":"cj5ypzvw1002mv0ui9dbr02l1","_id":"cj5ypzvwj003bv0uit131s7gv"}],"PostTag":[{"post_id":"cj5ypzvru0007v0ui1jm16zlz","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvsd000bv0uiof338gku"},{"post_id":"cj5ypzvs10008v0uicn4i3rws","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvsg000ev0ui6jjgd0mo"},{"post_id":"cj5ypzvr10001v0uijsq47a1v","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvsr000kv0ui2op362e3"},{"post_id":"cj5ypzvr10001v0uijsq47a1v","tag_id":"cj5ypzvs9000av0uij68fiybm","_id":"cj5ypzvt0000ov0uix0lrbmha"},{"post_id":"cj5ypzvrb0003v0uird124777","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvt7000sv0uiykhj5c3r"},{"post_id":"cj5ypzvrn0006v0uicspknpko","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvtk000yv0uiou01tbxj"},{"post_id":"cj5ypzvsd000cv0uip82hsfep","tag_id":"cj5ypzvte000wv0uiho2lh5gn","_id":"cj5ypzvuj001fv0uiuy1tg0al"},{"post_id":"cj5ypzvsd000cv0uip82hsfep","tag_id":"cj5ypzvto0012v0uicstj9tda","_id":"cj5ypzvuo001jv0uie1jc0eq1"},{"post_id":"cj5ypzvsd000cv0uip82hsfep","tag_id":"cj5ypzvtx0017v0ui11lwrvhf","_id":"cj5ypzvut001nv0ui7kzq4gl9"},{"post_id":"cj5ypzvsi000fv0uic7vf1vvq","tag_id":"cj5ypzvug001dv0uimu89c9c9","_id":"cj5ypzvv4001rv0uixsigy2g3"},{"post_id":"cj5ypzvso000jv0ui4din0lwx","tag_id":"cj5ypzvug001dv0uimu89c9c9","_id":"cj5ypzvva001wv0uiytybdtvb"},{"post_id":"cj5ypzvv9001vv0uinbxtzndx","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvvi0021v0uiyfrp7lr3"},{"post_id":"cj5ypzvsw000mv0uisnpekbf5","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvvl0024v0uiz58pj3p1"},{"post_id":"cj5ypzvvc001zv0uirt5gt83r","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvvp0029v0uidb3j11go"},{"post_id":"cj5ypzvvj0023v0ui5usadmlu","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvvu002cv0uiu4i0yw27"},{"post_id":"cj5ypzvt4000rv0uigb3u2i9a","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvvx002hv0uijgweosvi"},{"post_id":"cj5ypzvvm0027v0uicn30m24m","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvw1002kv0uifftqxpqu"},{"post_id":"cj5ypzvtb000uv0uiqaizpghg","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvw9002pv0ui5lqz5fld"},{"post_id":"cj5ypzvtg000xv0uilhse2thu","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwb002rv0uimfg82735"},{"post_id":"cj5ypzvw2002nv0uivronywmj","tag_id":"cj5ypzvte000wv0uiho2lh5gn","_id":"cj5ypzvwd002vv0ui1ajtbyso"},{"post_id":"cj5ypzvw2002nv0uivronywmj","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvwe002xv0uinvxym3da"},{"post_id":"cj5ypzvtl000zv0uiw38fze1j","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwf0030v0uigmgaya4s"},{"post_id":"cj5ypzvtp0013v0ui4ayxdijd","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwf0032v0uikjyc0q2u"},{"post_id":"cj5ypzvts0014v0ui3shsqy4q","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwh0036v0ui0155zhqo"},{"post_id":"cj5ypzvty0018v0uigbo7vup9","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwj003av0ui83wxzupn"},{"post_id":"cj5ypzvu20019v0uiq9g4qy87","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwl003dv0uivw381j01"},{"post_id":"cj5ypzvub001cv0ui8et7zj75","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwo003fv0uilo0fs1zw"},{"post_id":"cj5ypzvuj001gv0ui8d22w8b7","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwq003hv0ui4be9hmb8"},{"post_id":"cj5ypzvup001kv0uimix96od0","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvws003jv0uifb9bxau8"},{"post_id":"cj5ypzvuu001ov0uifyzgri7y","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvwu003lv0uieujcjxhw"},{"post_id":"cj5ypzvv4001sv0ui2lpzc1dv","tag_id":"cj5ypzvv7001tv0uiq1q8gsqy","_id":"cj5ypzvww003nv0ui9s2ryxvr"},{"post_id":"cj5ypzvvq002bv0ui14a8ns3u","tag_id":"cj5ypzvwu003mv0uim7w4z8pg","_id":"cj5ypzvwy003pv0uiag8rmtqg"},{"post_id":"cj5ypzvvv002fv0uigi4r6k3l","tag_id":"cj5ypzvwx003ov0uivj7n2ra1","_id":"cj5ypzvx1003rv0ui1n7bknya"},{"post_id":"cj5ypzvvv002fv0uigi4r6k3l","tag_id":"cj5ypzvrm0005v0ui1nok8byh","_id":"cj5ypzvx2003sv0uil856jttt"},{"post_id":"cj5ypzvvy002jv0uianyi3ftc","tag_id":"cj5ypzvx0003qv0uivpfi2udi","_id":"cj5ypzvx3003tv0uirbvptogp"}],"Tag":[{"name":"hexo","_id":"cj5ypzvrm0005v0ui1nok8byh"},{"name":"BlueLake","_id":"cj5ypzvs9000av0uij68fiybm"},{"name":"javascript","_id":"cj5ypzvte000wv0uiho2lh5gn"},{"name":"linq","_id":"cj5ypzvto0012v0uicstj9tda"},{"name":"语言集成查询","_id":"cj5ypzvtx0017v0ui11lwrvhf"},{"name":"mongodb","_id":"cj5ypzvug001dv0uimu89c9c9"},{"name":"node","_id":"cj5ypzvv7001tv0uiq1q8gsqy"},{"name":"bower","_id":"cj5ypzvwu003mv0uim7w4z8pg"},{"name":"github","_id":"cj5ypzvwx003ov0uivj7n2ra1"},{"name":"sublime","_id":"cj5ypzvx0003qv0uivpfi2udi"}]}}